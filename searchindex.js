Search.setIndex({"docnames": ["API", "api/iqm.benchmarks", "api/iqm.benchmarks.benchmark", "api/iqm.benchmarks.benchmark.BenchmarkBase", "api/iqm.benchmarks.benchmark.BenchmarkConfigurationBase", "api/iqm.benchmarks.benchmark_definition", "api/iqm.benchmarks.benchmark_definition.Benchmark", "api/iqm.benchmarks.benchmark_definition.BenchmarkAnalysisResult", "api/iqm.benchmarks.benchmark_definition.BenchmarkObservation", "api/iqm.benchmarks.benchmark_definition.BenchmarkObservationIdentifier", "api/iqm.benchmarks.benchmark_definition.BenchmarkRunResult", "api/iqm.benchmarks.benchmark_definition.add_counts_to_dataset", "api/iqm.benchmarks.benchmark_definition.default_analysis_function", "api/iqm.benchmarks.benchmark_definition.merge_datasets_dac", "api/iqm.benchmarks.benchmark_definition.show_figure", "api/iqm.benchmarks.circuit_containers", "api/iqm.benchmarks.circuit_containers.BenchmarkCircuit", "api/iqm.benchmarks.circuit_containers.CircuitGroup", "api/iqm.benchmarks.circuit_containers.Circuits", "api/iqm.benchmarks.coherence", "api/iqm.benchmarks.coherence.coherence", "api/iqm.benchmarks.coherence.coherence.CoherenceBenchmark", "api/iqm.benchmarks.coherence.coherence.CoherenceConfiguration", "api/iqm.benchmarks.coherence.coherence.calculate_probabilities", "api/iqm.benchmarks.coherence.coherence.coherence_analysis", "api/iqm.benchmarks.coherence.coherence.exp_decay", "api/iqm.benchmarks.coherence.coherence.fit_coherence_model", "api/iqm.benchmarks.coherence.coherence.plot_coherence", "api/iqm.benchmarks.compressive_gst", "api/iqm.benchmarks.compressive_gst.compressive_gst", "api/iqm.benchmarks.compressive_gst.compressive_gst.CompressiveGST", "api/iqm.benchmarks.compressive_gst.compressive_gst.GSTConfiguration", "api/iqm.benchmarks.compressive_gst.compressive_gst.create_predefined_gate_set", "api/iqm.benchmarks.compressive_gst.compressive_gst.parse_gate_set", "api/iqm.benchmarks.compressive_gst.compressive_gst.parse_layouts", "api/iqm.benchmarks.compressive_gst.gst_analysis", "api/iqm.benchmarks.compressive_gst.gst_analysis.bootstrap_errors", "api/iqm.benchmarks.compressive_gst.gst_analysis.dataframe_to_figure", "api/iqm.benchmarks.compressive_gst.gst_analysis.dataset_counts_to_mgst_format", "api/iqm.benchmarks.compressive_gst.gst_analysis.generate_basis_labels", "api/iqm.benchmarks.compressive_gst.gst_analysis.generate_gate_results", "api/iqm.benchmarks.compressive_gst.gst_analysis.generate_non_gate_results", "api/iqm.benchmarks.compressive_gst.gst_analysis.generate_unit_rank_gate_results", "api/iqm.benchmarks.compressive_gst.gst_analysis.mgst_analysis", "api/iqm.benchmarks.compressive_gst.gst_analysis.pandas_results_to_observations", "api/iqm.benchmarks.compressive_gst.gst_analysis.result_str_to_floats", "api/iqm.benchmarks.compressive_gst.gst_analysis.run_mGST_wrapper", "api/iqm.benchmarks.entanglement", "api/iqm.benchmarks.entanglement.ghz", "api/iqm.benchmarks.entanglement.ghz.GHZBenchmark", "api/iqm.benchmarks.entanglement.ghz.GHZConfiguration", "api/iqm.benchmarks.entanglement.ghz.fidelity_analysis", "api/iqm.benchmarks.entanglement.ghz.fidelity_ghz_coherences", "api/iqm.benchmarks.entanglement.ghz.fidelity_ghz_randomized_measurements", "api/iqm.benchmarks.entanglement.ghz.generate_ghz_linear", "api/iqm.benchmarks.entanglement.ghz.generate_ghz_log_cruz", "api/iqm.benchmarks.entanglement.ghz.generate_ghz_log_mooney", "api/iqm.benchmarks.entanglement.ghz.generate_ghz_spanning_tree", "api/iqm.benchmarks.entanglement.ghz.generate_ghz_star", "api/iqm.benchmarks.entanglement.ghz.get_cx_map", "api/iqm.benchmarks.entanglement.ghz.get_edges", "api/iqm.benchmarks.entanglement.ghz.plot_fidelities", "api/iqm.benchmarks.entanglement.graph_states", "api/iqm.benchmarks.entanglement.graph_states.GraphStateBenchmark", "api/iqm.benchmarks.entanglement.graph_states.GraphStateConfiguration", "api/iqm.benchmarks.entanglement.graph_states.find_edges_with_disjoint_neighbors", "api/iqm.benchmarks.entanglement.graph_states.generate_graph_state", "api/iqm.benchmarks.entanglement.graph_states.generate_minimal_edge_layers", "api/iqm.benchmarks.entanglement.graph_states.negativity_analysis", "api/iqm.benchmarks.entanglement.graph_states.plot_density_matrix", "api/iqm.benchmarks.entanglement.graph_states.plot_max_negativities", "api/iqm.benchmarks.entanglement.graph_states.plot_max_negativities_graph", "api/iqm.benchmarks.entanglement.graph_states.shadow_tomography_analysis", "api/iqm.benchmarks.entanglement.graph_states.state_tomography_analysis", "api/iqm.benchmarks.entanglement.graph_states.update_pauli_expectations", "api/iqm.benchmarks.logging_config", "api/iqm.benchmarks.optimization", "api/iqm.benchmarks.optimization.qscore", "api/iqm.benchmarks.optimization.qscore.QScoreBenchmark", "api/iqm.benchmarks.optimization.qscore.QScoreConfiguration", "api/iqm.benchmarks.optimization.qscore.calculate_optimal_angles_for_QAOA_p1", "api/iqm.benchmarks.optimization.qscore.compute_expectation_value", "api/iqm.benchmarks.optimization.qscore.create_objective_function", "api/iqm.benchmarks.optimization.qscore.cut_cost_function", "api/iqm.benchmarks.optimization.qscore.get_optimal_angles", "api/iqm.benchmarks.optimization.qscore.is_successful", "api/iqm.benchmarks.optimization.qscore.plot_approximation_ratios", "api/iqm.benchmarks.optimization.qscore.qscore_analysis", "api/iqm.benchmarks.optimization.qscore.run_QAOA", "api/iqm.benchmarks.quantum_volume", "api/iqm.benchmarks.quantum_volume.clops", "api/iqm.benchmarks.quantum_volume.clops.CLOPSBenchmark", "api/iqm.benchmarks.quantum_volume.clops.CLOPSConfiguration", "api/iqm.benchmarks.quantum_volume.clops.clops_analysis", "api/iqm.benchmarks.quantum_volume.clops.plot_times", "api/iqm.benchmarks.quantum_volume.clops.retrieve_clops_elapsed_times", "api/iqm.benchmarks.quantum_volume.quantum_volume", "api/iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeBenchmark", "api/iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeConfiguration", "api/iqm.benchmarks.quantum_volume.quantum_volume.compute_heavy_output_probabilities", "api/iqm.benchmarks.quantum_volume.quantum_volume.cumulative_hop", "api/iqm.benchmarks.quantum_volume.quantum_volume.cumulative_std", "api/iqm.benchmarks.quantum_volume.quantum_volume.get_ideal_heavy_outputs", "api/iqm.benchmarks.quantum_volume.quantum_volume.get_rem_hops", "api/iqm.benchmarks.quantum_volume.quantum_volume.heavy_projector", "api/iqm.benchmarks.quantum_volume.quantum_volume.is_successful", "api/iqm.benchmarks.quantum_volume.quantum_volume.plot_hop_threshold", "api/iqm.benchmarks.quantum_volume.quantum_volume.qv_analysis", "api/iqm.benchmarks.randomized_benchmarking", "api/iqm.benchmarks.randomized_benchmarking.clifford_rb", "api/iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb", "api/iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.CliffordRBConfiguration", "api/iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.CliffordRandomizedBenchmarking", "api/iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.clifford_rb_analysis", "api/iqm.benchmarks.randomized_benchmarking.direct_rb", "api/iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb", "api/iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.DirectRBConfiguration", "api/iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.DirectRandomizedBenchmarking", "api/iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.direct_rb_analysis", "api/iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.generate_drb_circuits", "api/iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.generate_fixed_depth_parallel_drb_circuits", "api/iqm.benchmarks.randomized_benchmarking.eplg", "api/iqm.benchmarks.randomized_benchmarking.eplg.eplg", "api/iqm.benchmarks.randomized_benchmarking.eplg.eplg.EPLGBenchmark", "api/iqm.benchmarks.randomized_benchmarking.eplg.eplg.EPLGConfiguration", "api/iqm.benchmarks.randomized_benchmarking.eplg.eplg.eplg_analysis", "api/iqm.benchmarks.randomized_benchmarking.eplg.eplg.plot_layered_fidelities_graph", "api/iqm.benchmarks.randomized_benchmarking.interleaved_rb", "api/iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb", "api/iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.InterleavedRBConfiguration", "api/iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.InterleavedRandomizedBenchmarking", "api/iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.interleaved_rb_analysis", "api/iqm.benchmarks.randomized_benchmarking.mirror_rb", "api/iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb", "api/iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRBConfiguration", "api/iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRandomizedBenchmarking", "api/iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.compute_polarizations", "api/iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.generate_fixed_depth_mrb_circuits", "api/iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.generate_pauli_dressed_mrb_circuits", "api/iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.list_to_numcircuit_times_numpauli_matrix", "api/iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.mrb_analysis", "api/iqm.benchmarks.randomized_benchmarking.multi_lmfit", "api/iqm.benchmarks.randomized_benchmarking.multi_lmfit.create_multi_dataset_params", "api/iqm.benchmarks.randomized_benchmarking.multi_lmfit.eval_func_single_dataset", "api/iqm.benchmarks.randomized_benchmarking.multi_lmfit.get_param_names_from_func_signature", "api/iqm.benchmarks.randomized_benchmarking.multi_lmfit.multi_dataset_residual", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.compute_inverse_clifford", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.edge_grab", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.estimate_survival_probabilities", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.exponential_rb", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.fit_decay_lmfit", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.generate_all_rb_circuits", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.generate_fixed_depth_parallel_rb_circuits", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.generate_random_clifford_seq_circuits", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.get_survival_probabilities", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.import_native_gate_cliffords", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.lmfit_minimizer", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.plot_rb_decay", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.relabel_qubits_array_from_zero", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.submit_parallel_rb_job", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.submit_sequential_rb_jobs", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.survival_probabilities_parallel", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.validate_irb_gate", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.validate_rb_qubits", "api/iqm.benchmarks.readout_mitigation", "api/iqm.benchmarks.readout_mitigation.M3IQM", "api/iqm.benchmarks.readout_mitigation.apply_readout_error_mitigation", "api/iqm.benchmarks.readout_mitigation.readout_error_m3", "api/iqm.benchmarks.utils", "api/iqm.benchmarks.utils.bootstrap_counts", "api/iqm.benchmarks.utils.count_2q_layers", "api/iqm.benchmarks.utils.count_native_gates", "api/iqm.benchmarks.utils.extract_fidelities", "api/iqm.benchmarks.utils.generate_state_tomography_circuits", "api/iqm.benchmarks.utils.get_Pauli_expectation", "api/iqm.benchmarks.utils.get_active_qubits", "api/iqm.benchmarks.utils.get_iqm_backend", "api/iqm.benchmarks.utils.get_measurement_mapping", "api/iqm.benchmarks.utils.get_neighbors_of_edges", "api/iqm.benchmarks.utils.get_tomography_matrix", "api/iqm.benchmarks.utils.marginal_distribution", "api/iqm.benchmarks.utils.median_with_uncertainty", "api/iqm.benchmarks.utils.perform_backend_transpilation", "api/iqm.benchmarks.utils.random_hamiltonian_path", "api/iqm.benchmarks.utils.reduce_to_active_qubits", "api/iqm.benchmarks.utils.remove_directed_duplicates_to_list", "api/iqm.benchmarks.utils.retrieve_all_counts", "api/iqm.benchmarks.utils.retrieve_all_job_metadata", "api/iqm.benchmarks.utils.set_coupling_map", "api/iqm.benchmarks.utils.sort_batches_by_final_layout", "api/iqm.benchmarks.utils.split_into_disjoint_pairs", "api/iqm.benchmarks.utils.split_sequence_in_chunks", "api/iqm.benchmarks.utils.submit_execute", "api/iqm.benchmarks.utils.timeit", "api/iqm.benchmarks.utils.xrvariable_to_counts", "api/iqm.benchmarks.utils_plots", "api/iqm.benchmarks.utils_plots.GraphPositions", "api/iqm.benchmarks.utils_plots.draw_graph_edges", "api/iqm.benchmarks.utils_plots.evaluate_hamiltonian_paths", "api/iqm.benchmarks.utils_plots.plot_layout_fidelity_graph", "api/iqm.benchmarks.utils_plots.rx_to_nx_graph", "api/iqm.benchmarks.utils_shadows", "api/iqm.benchmarks.utils_shadows.CUE", "api/iqm.benchmarks.utils_shadows.get_local_shadow", "api/iqm.benchmarks.utils_shadows.get_negativity", "api/iqm.benchmarks.utils_shadows.local_shadow_tomography", "changelog", "development/development", "development/generate_2qubit_cliffords", "development/how_to_make_your_own_benchmark", "devices/devices", "devices/spark", "devices/star", "examples/example_clifford_rb", "examples/example_clops", "examples/example_coherence", "examples/example_eplg", "examples/example_experiment_all", "examples/example_ghz", "examples/example_graphstate", "examples/example_gst", "examples/example_interleaved_rb", "examples/example_mirror_rb", "examples/example_qscore", "examples/example_quantum_volume", "examples/examples", "index", "license", "readme"], "filenames": ["API.rst", "api/iqm.benchmarks.rst", "api/iqm.benchmarks.benchmark.rst", "api/iqm.benchmarks.benchmark.BenchmarkBase.rst", "api/iqm.benchmarks.benchmark.BenchmarkConfigurationBase.rst", "api/iqm.benchmarks.benchmark_definition.rst", "api/iqm.benchmarks.benchmark_definition.Benchmark.rst", "api/iqm.benchmarks.benchmark_definition.BenchmarkAnalysisResult.rst", "api/iqm.benchmarks.benchmark_definition.BenchmarkObservation.rst", "api/iqm.benchmarks.benchmark_definition.BenchmarkObservationIdentifier.rst", "api/iqm.benchmarks.benchmark_definition.BenchmarkRunResult.rst", "api/iqm.benchmarks.benchmark_definition.add_counts_to_dataset.rst", "api/iqm.benchmarks.benchmark_definition.default_analysis_function.rst", "api/iqm.benchmarks.benchmark_definition.merge_datasets_dac.rst", "api/iqm.benchmarks.benchmark_definition.show_figure.rst", "api/iqm.benchmarks.circuit_containers.rst", "api/iqm.benchmarks.circuit_containers.BenchmarkCircuit.rst", "api/iqm.benchmarks.circuit_containers.CircuitGroup.rst", "api/iqm.benchmarks.circuit_containers.Circuits.rst", "api/iqm.benchmarks.coherence.rst", "api/iqm.benchmarks.coherence.coherence.rst", "api/iqm.benchmarks.coherence.coherence.CoherenceBenchmark.rst", "api/iqm.benchmarks.coherence.coherence.CoherenceConfiguration.rst", "api/iqm.benchmarks.coherence.coherence.calculate_probabilities.rst", "api/iqm.benchmarks.coherence.coherence.coherence_analysis.rst", "api/iqm.benchmarks.coherence.coherence.exp_decay.rst", "api/iqm.benchmarks.coherence.coherence.fit_coherence_model.rst", "api/iqm.benchmarks.coherence.coherence.plot_coherence.rst", "api/iqm.benchmarks.compressive_gst.rst", "api/iqm.benchmarks.compressive_gst.compressive_gst.rst", "api/iqm.benchmarks.compressive_gst.compressive_gst.CompressiveGST.rst", "api/iqm.benchmarks.compressive_gst.compressive_gst.GSTConfiguration.rst", "api/iqm.benchmarks.compressive_gst.compressive_gst.create_predefined_gate_set.rst", "api/iqm.benchmarks.compressive_gst.compressive_gst.parse_gate_set.rst", "api/iqm.benchmarks.compressive_gst.compressive_gst.parse_layouts.rst", "api/iqm.benchmarks.compressive_gst.gst_analysis.rst", "api/iqm.benchmarks.compressive_gst.gst_analysis.bootstrap_errors.rst", "api/iqm.benchmarks.compressive_gst.gst_analysis.dataframe_to_figure.rst", "api/iqm.benchmarks.compressive_gst.gst_analysis.dataset_counts_to_mgst_format.rst", "api/iqm.benchmarks.compressive_gst.gst_analysis.generate_basis_labels.rst", "api/iqm.benchmarks.compressive_gst.gst_analysis.generate_gate_results.rst", "api/iqm.benchmarks.compressive_gst.gst_analysis.generate_non_gate_results.rst", "api/iqm.benchmarks.compressive_gst.gst_analysis.generate_unit_rank_gate_results.rst", "api/iqm.benchmarks.compressive_gst.gst_analysis.mgst_analysis.rst", "api/iqm.benchmarks.compressive_gst.gst_analysis.pandas_results_to_observations.rst", "api/iqm.benchmarks.compressive_gst.gst_analysis.result_str_to_floats.rst", "api/iqm.benchmarks.compressive_gst.gst_analysis.run_mGST_wrapper.rst", "api/iqm.benchmarks.entanglement.rst", "api/iqm.benchmarks.entanglement.ghz.rst", "api/iqm.benchmarks.entanglement.ghz.GHZBenchmark.rst", "api/iqm.benchmarks.entanglement.ghz.GHZConfiguration.rst", "api/iqm.benchmarks.entanglement.ghz.fidelity_analysis.rst", "api/iqm.benchmarks.entanglement.ghz.fidelity_ghz_coherences.rst", "api/iqm.benchmarks.entanglement.ghz.fidelity_ghz_randomized_measurements.rst", "api/iqm.benchmarks.entanglement.ghz.generate_ghz_linear.rst", "api/iqm.benchmarks.entanglement.ghz.generate_ghz_log_cruz.rst", "api/iqm.benchmarks.entanglement.ghz.generate_ghz_log_mooney.rst", "api/iqm.benchmarks.entanglement.ghz.generate_ghz_spanning_tree.rst", "api/iqm.benchmarks.entanglement.ghz.generate_ghz_star.rst", "api/iqm.benchmarks.entanglement.ghz.get_cx_map.rst", "api/iqm.benchmarks.entanglement.ghz.get_edges.rst", "api/iqm.benchmarks.entanglement.ghz.plot_fidelities.rst", "api/iqm.benchmarks.entanglement.graph_states.rst", "api/iqm.benchmarks.entanglement.graph_states.GraphStateBenchmark.rst", "api/iqm.benchmarks.entanglement.graph_states.GraphStateConfiguration.rst", "api/iqm.benchmarks.entanglement.graph_states.find_edges_with_disjoint_neighbors.rst", "api/iqm.benchmarks.entanglement.graph_states.generate_graph_state.rst", "api/iqm.benchmarks.entanglement.graph_states.generate_minimal_edge_layers.rst", "api/iqm.benchmarks.entanglement.graph_states.negativity_analysis.rst", "api/iqm.benchmarks.entanglement.graph_states.plot_density_matrix.rst", "api/iqm.benchmarks.entanglement.graph_states.plot_max_negativities.rst", "api/iqm.benchmarks.entanglement.graph_states.plot_max_negativities_graph.rst", "api/iqm.benchmarks.entanglement.graph_states.shadow_tomography_analysis.rst", "api/iqm.benchmarks.entanglement.graph_states.state_tomography_analysis.rst", "api/iqm.benchmarks.entanglement.graph_states.update_pauli_expectations.rst", "api/iqm.benchmarks.logging_config.rst", "api/iqm.benchmarks.optimization.rst", "api/iqm.benchmarks.optimization.qscore.rst", "api/iqm.benchmarks.optimization.qscore.QScoreBenchmark.rst", "api/iqm.benchmarks.optimization.qscore.QScoreConfiguration.rst", "api/iqm.benchmarks.optimization.qscore.calculate_optimal_angles_for_QAOA_p1.rst", "api/iqm.benchmarks.optimization.qscore.compute_expectation_value.rst", "api/iqm.benchmarks.optimization.qscore.create_objective_function.rst", "api/iqm.benchmarks.optimization.qscore.cut_cost_function.rst", "api/iqm.benchmarks.optimization.qscore.get_optimal_angles.rst", "api/iqm.benchmarks.optimization.qscore.is_successful.rst", "api/iqm.benchmarks.optimization.qscore.plot_approximation_ratios.rst", "api/iqm.benchmarks.optimization.qscore.qscore_analysis.rst", "api/iqm.benchmarks.optimization.qscore.run_QAOA.rst", "api/iqm.benchmarks.quantum_volume.rst", "api/iqm.benchmarks.quantum_volume.clops.rst", "api/iqm.benchmarks.quantum_volume.clops.CLOPSBenchmark.rst", "api/iqm.benchmarks.quantum_volume.clops.CLOPSConfiguration.rst", "api/iqm.benchmarks.quantum_volume.clops.clops_analysis.rst", "api/iqm.benchmarks.quantum_volume.clops.plot_times.rst", "api/iqm.benchmarks.quantum_volume.clops.retrieve_clops_elapsed_times.rst", "api/iqm.benchmarks.quantum_volume.quantum_volume.rst", "api/iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeBenchmark.rst", "api/iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeConfiguration.rst", "api/iqm.benchmarks.quantum_volume.quantum_volume.compute_heavy_output_probabilities.rst", "api/iqm.benchmarks.quantum_volume.quantum_volume.cumulative_hop.rst", "api/iqm.benchmarks.quantum_volume.quantum_volume.cumulative_std.rst", "api/iqm.benchmarks.quantum_volume.quantum_volume.get_ideal_heavy_outputs.rst", "api/iqm.benchmarks.quantum_volume.quantum_volume.get_rem_hops.rst", "api/iqm.benchmarks.quantum_volume.quantum_volume.heavy_projector.rst", "api/iqm.benchmarks.quantum_volume.quantum_volume.is_successful.rst", "api/iqm.benchmarks.quantum_volume.quantum_volume.plot_hop_threshold.rst", "api/iqm.benchmarks.quantum_volume.quantum_volume.qv_analysis.rst", "api/iqm.benchmarks.randomized_benchmarking.rst", "api/iqm.benchmarks.randomized_benchmarking.clifford_rb.rst", "api/iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.rst", "api/iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.CliffordRBConfiguration.rst", "api/iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.CliffordRandomizedBenchmarking.rst", "api/iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.clifford_rb_analysis.rst", "api/iqm.benchmarks.randomized_benchmarking.direct_rb.rst", "api/iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.rst", "api/iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.DirectRBConfiguration.rst", "api/iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.DirectRandomizedBenchmarking.rst", "api/iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.direct_rb_analysis.rst", "api/iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.generate_drb_circuits.rst", "api/iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.generate_fixed_depth_parallel_drb_circuits.rst", "api/iqm.benchmarks.randomized_benchmarking.eplg.rst", "api/iqm.benchmarks.randomized_benchmarking.eplg.eplg.rst", "api/iqm.benchmarks.randomized_benchmarking.eplg.eplg.EPLGBenchmark.rst", "api/iqm.benchmarks.randomized_benchmarking.eplg.eplg.EPLGConfiguration.rst", "api/iqm.benchmarks.randomized_benchmarking.eplg.eplg.eplg_analysis.rst", "api/iqm.benchmarks.randomized_benchmarking.eplg.eplg.plot_layered_fidelities_graph.rst", "api/iqm.benchmarks.randomized_benchmarking.interleaved_rb.rst", "api/iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.rst", "api/iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.InterleavedRBConfiguration.rst", "api/iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.InterleavedRandomizedBenchmarking.rst", "api/iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.interleaved_rb_analysis.rst", "api/iqm.benchmarks.randomized_benchmarking.mirror_rb.rst", "api/iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.rst", "api/iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRBConfiguration.rst", "api/iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRandomizedBenchmarking.rst", "api/iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.compute_polarizations.rst", "api/iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.generate_fixed_depth_mrb_circuits.rst", "api/iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.generate_pauli_dressed_mrb_circuits.rst", "api/iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.list_to_numcircuit_times_numpauli_matrix.rst", "api/iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.mrb_analysis.rst", "api/iqm.benchmarks.randomized_benchmarking.multi_lmfit.rst", "api/iqm.benchmarks.randomized_benchmarking.multi_lmfit.create_multi_dataset_params.rst", "api/iqm.benchmarks.randomized_benchmarking.multi_lmfit.eval_func_single_dataset.rst", "api/iqm.benchmarks.randomized_benchmarking.multi_lmfit.get_param_names_from_func_signature.rst", "api/iqm.benchmarks.randomized_benchmarking.multi_lmfit.multi_dataset_residual.rst", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.rst", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.compute_inverse_clifford.rst", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.edge_grab.rst", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.estimate_survival_probabilities.rst", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.exponential_rb.rst", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.fit_decay_lmfit.rst", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.generate_all_rb_circuits.rst", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.generate_fixed_depth_parallel_rb_circuits.rst", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.generate_random_clifford_seq_circuits.rst", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.get_survival_probabilities.rst", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.import_native_gate_cliffords.rst", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.lmfit_minimizer.rst", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.plot_rb_decay.rst", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.relabel_qubits_array_from_zero.rst", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.submit_parallel_rb_job.rst", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.submit_sequential_rb_jobs.rst", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.survival_probabilities_parallel.rst", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.validate_irb_gate.rst", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.validate_rb_qubits.rst", "api/iqm.benchmarks.readout_mitigation.rst", "api/iqm.benchmarks.readout_mitigation.M3IQM.rst", "api/iqm.benchmarks.readout_mitigation.apply_readout_error_mitigation.rst", "api/iqm.benchmarks.readout_mitigation.readout_error_m3.rst", "api/iqm.benchmarks.utils.rst", "api/iqm.benchmarks.utils.bootstrap_counts.rst", "api/iqm.benchmarks.utils.count_2q_layers.rst", "api/iqm.benchmarks.utils.count_native_gates.rst", "api/iqm.benchmarks.utils.extract_fidelities.rst", "api/iqm.benchmarks.utils.generate_state_tomography_circuits.rst", "api/iqm.benchmarks.utils.get_Pauli_expectation.rst", "api/iqm.benchmarks.utils.get_active_qubits.rst", "api/iqm.benchmarks.utils.get_iqm_backend.rst", "api/iqm.benchmarks.utils.get_measurement_mapping.rst", "api/iqm.benchmarks.utils.get_neighbors_of_edges.rst", "api/iqm.benchmarks.utils.get_tomography_matrix.rst", "api/iqm.benchmarks.utils.marginal_distribution.rst", "api/iqm.benchmarks.utils.median_with_uncertainty.rst", "api/iqm.benchmarks.utils.perform_backend_transpilation.rst", "api/iqm.benchmarks.utils.random_hamiltonian_path.rst", "api/iqm.benchmarks.utils.reduce_to_active_qubits.rst", "api/iqm.benchmarks.utils.remove_directed_duplicates_to_list.rst", "api/iqm.benchmarks.utils.retrieve_all_counts.rst", "api/iqm.benchmarks.utils.retrieve_all_job_metadata.rst", "api/iqm.benchmarks.utils.set_coupling_map.rst", "api/iqm.benchmarks.utils.sort_batches_by_final_layout.rst", "api/iqm.benchmarks.utils.split_into_disjoint_pairs.rst", "api/iqm.benchmarks.utils.split_sequence_in_chunks.rst", "api/iqm.benchmarks.utils.submit_execute.rst", "api/iqm.benchmarks.utils.timeit.rst", "api/iqm.benchmarks.utils.xrvariable_to_counts.rst", "api/iqm.benchmarks.utils_plots.rst", "api/iqm.benchmarks.utils_plots.GraphPositions.rst", "api/iqm.benchmarks.utils_plots.draw_graph_edges.rst", "api/iqm.benchmarks.utils_plots.evaluate_hamiltonian_paths.rst", "api/iqm.benchmarks.utils_plots.plot_layout_fidelity_graph.rst", "api/iqm.benchmarks.utils_plots.rx_to_nx_graph.rst", "api/iqm.benchmarks.utils_shadows.rst", "api/iqm.benchmarks.utils_shadows.CUE.rst", "api/iqm.benchmarks.utils_shadows.get_local_shadow.rst", "api/iqm.benchmarks.utils_shadows.get_negativity.rst", "api/iqm.benchmarks.utils_shadows.local_shadow_tomography.rst", "changelog.rst", "development/development.rst", "development/generate_2qubit_cliffords.ipynb", "development/how_to_make_your_own_benchmark.ipynb", "devices/devices.rst", "devices/spark.ipynb", "devices/star.ipynb", "examples/example_clifford_rb.ipynb", "examples/example_clops.ipynb", "examples/example_coherence.ipynb", "examples/example_eplg.ipynb", "examples/example_experiment_all.ipynb", "examples/example_ghz.ipynb", "examples/example_graphstate.ipynb", "examples/example_gst.ipynb", "examples/example_interleaved_rb.ipynb", "examples/example_mirror_rb.ipynb", "examples/example_qscore.ipynb", "examples/example_quantum_volume.ipynb", "examples/examples.rst", "index.rst", "license.rst", "readme.md"], "titles": ["API Reference", "iqm.benchmarks", "iqm.benchmarks.benchmark", "iqm.benchmarks.benchmark.BenchmarkBase", "iqm.benchmarks.benchmark.BenchmarkConfigurationBase", "iqm.benchmarks.benchmark_definition", "iqm.benchmarks.benchmark_definition.Benchmark", "iqm.benchmarks.benchmark_definition.BenchmarkAnalysisResult", "iqm.benchmarks.benchmark_definition.BenchmarkObservation", "iqm.benchmarks.benchmark_definition.BenchmarkObservationIdentifier", "iqm.benchmarks.benchmark_definition.BenchmarkRunResult", "iqm.benchmarks.benchmark_definition.add_counts_to_dataset", "iqm.benchmarks.benchmark_definition.default_analysis_function", "iqm.benchmarks.benchmark_definition.merge_datasets_dac", "iqm.benchmarks.benchmark_definition.show_figure", "iqm.benchmarks.circuit_containers", "iqm.benchmarks.circuit_containers.BenchmarkCircuit", "iqm.benchmarks.circuit_containers.CircuitGroup", "iqm.benchmarks.circuit_containers.Circuits", "iqm.benchmarks.coherence", "iqm.benchmarks.coherence.coherence", "iqm.benchmarks.coherence.coherence.CoherenceBenchmark", "iqm.benchmarks.coherence.coherence.CoherenceConfiguration", "iqm.benchmarks.coherence.coherence.calculate_probabilities", "iqm.benchmarks.coherence.coherence.coherence_analysis", "iqm.benchmarks.coherence.coherence.exp_decay", "iqm.benchmarks.coherence.coherence.fit_coherence_model", "iqm.benchmarks.coherence.coherence.plot_coherence", "iqm.benchmarks.compressive_gst", "iqm.benchmarks.compressive_gst.compressive_gst", "iqm.benchmarks.compressive_gst.compressive_gst.CompressiveGST", "iqm.benchmarks.compressive_gst.compressive_gst.GSTConfiguration", "iqm.benchmarks.compressive_gst.compressive_gst.create_predefined_gate_set", "iqm.benchmarks.compressive_gst.compressive_gst.parse_gate_set", "iqm.benchmarks.compressive_gst.compressive_gst.parse_layouts", "iqm.benchmarks.compressive_gst.gst_analysis", "iqm.benchmarks.compressive_gst.gst_analysis.bootstrap_errors", "iqm.benchmarks.compressive_gst.gst_analysis.dataframe_to_figure", "iqm.benchmarks.compressive_gst.gst_analysis.dataset_counts_to_mgst_format", "iqm.benchmarks.compressive_gst.gst_analysis.generate_basis_labels", "iqm.benchmarks.compressive_gst.gst_analysis.generate_gate_results", "iqm.benchmarks.compressive_gst.gst_analysis.generate_non_gate_results", "iqm.benchmarks.compressive_gst.gst_analysis.generate_unit_rank_gate_results", "iqm.benchmarks.compressive_gst.gst_analysis.mgst_analysis", "iqm.benchmarks.compressive_gst.gst_analysis.pandas_results_to_observations", "iqm.benchmarks.compressive_gst.gst_analysis.result_str_to_floats", "iqm.benchmarks.compressive_gst.gst_analysis.run_mGST_wrapper", "iqm.benchmarks.entanglement", "iqm.benchmarks.entanglement.ghz", "iqm.benchmarks.entanglement.ghz.GHZBenchmark", "iqm.benchmarks.entanglement.ghz.GHZConfiguration", "iqm.benchmarks.entanglement.ghz.fidelity_analysis", "iqm.benchmarks.entanglement.ghz.fidelity_ghz_coherences", "iqm.benchmarks.entanglement.ghz.fidelity_ghz_randomized_measurements", "iqm.benchmarks.entanglement.ghz.generate_ghz_linear", "iqm.benchmarks.entanglement.ghz.generate_ghz_log_cruz", "iqm.benchmarks.entanglement.ghz.generate_ghz_log_mooney", "iqm.benchmarks.entanglement.ghz.generate_ghz_spanning_tree", "iqm.benchmarks.entanglement.ghz.generate_ghz_star", "iqm.benchmarks.entanglement.ghz.get_cx_map", "iqm.benchmarks.entanglement.ghz.get_edges", "iqm.benchmarks.entanglement.ghz.plot_fidelities", "iqm.benchmarks.entanglement.graph_states", "iqm.benchmarks.entanglement.graph_states.GraphStateBenchmark", "iqm.benchmarks.entanglement.graph_states.GraphStateConfiguration", "iqm.benchmarks.entanglement.graph_states.find_edges_with_disjoint_neighbors", "iqm.benchmarks.entanglement.graph_states.generate_graph_state", "iqm.benchmarks.entanglement.graph_states.generate_minimal_edge_layers", "iqm.benchmarks.entanglement.graph_states.negativity_analysis", "iqm.benchmarks.entanglement.graph_states.plot_density_matrix", "iqm.benchmarks.entanglement.graph_states.plot_max_negativities", "iqm.benchmarks.entanglement.graph_states.plot_max_negativities_graph", "iqm.benchmarks.entanglement.graph_states.shadow_tomography_analysis", "iqm.benchmarks.entanglement.graph_states.state_tomography_analysis", "iqm.benchmarks.entanglement.graph_states.update_pauli_expectations", "iqm.benchmarks.logging_config", "iqm.benchmarks.optimization", "iqm.benchmarks.optimization.qscore", "iqm.benchmarks.optimization.qscore.QScoreBenchmark", "iqm.benchmarks.optimization.qscore.QScoreConfiguration", "iqm.benchmarks.optimization.qscore.calculate_optimal_angles_for_QAOA_p1", "iqm.benchmarks.optimization.qscore.compute_expectation_value", "iqm.benchmarks.optimization.qscore.create_objective_function", "iqm.benchmarks.optimization.qscore.cut_cost_function", "iqm.benchmarks.optimization.qscore.get_optimal_angles", "iqm.benchmarks.optimization.qscore.is_successful", "iqm.benchmarks.optimization.qscore.plot_approximation_ratios", "iqm.benchmarks.optimization.qscore.qscore_analysis", "iqm.benchmarks.optimization.qscore.run_QAOA", "iqm.benchmarks.quantum_volume", "iqm.benchmarks.quantum_volume.clops", "iqm.benchmarks.quantum_volume.clops.CLOPSBenchmark", "iqm.benchmarks.quantum_volume.clops.CLOPSConfiguration", "iqm.benchmarks.quantum_volume.clops.clops_analysis", "iqm.benchmarks.quantum_volume.clops.plot_times", "iqm.benchmarks.quantum_volume.clops.retrieve_clops_elapsed_times", "iqm.benchmarks.quantum_volume.quantum_volume", "iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeBenchmark", "iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeConfiguration", "iqm.benchmarks.quantum_volume.quantum_volume.compute_heavy_output_probabilities", "iqm.benchmarks.quantum_volume.quantum_volume.cumulative_hop", "iqm.benchmarks.quantum_volume.quantum_volume.cumulative_std", "iqm.benchmarks.quantum_volume.quantum_volume.get_ideal_heavy_outputs", "iqm.benchmarks.quantum_volume.quantum_volume.get_rem_hops", "iqm.benchmarks.quantum_volume.quantum_volume.heavy_projector", "iqm.benchmarks.quantum_volume.quantum_volume.is_successful", "iqm.benchmarks.quantum_volume.quantum_volume.plot_hop_threshold", "iqm.benchmarks.quantum_volume.quantum_volume.qv_analysis", "iqm.benchmarks.randomized_benchmarking", "iqm.benchmarks.randomized_benchmarking.clifford_rb", "iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb", "iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.CliffordRBConfiguration", "iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.CliffordRandomizedBenchmarking", "iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.clifford_rb_analysis", "iqm.benchmarks.randomized_benchmarking.direct_rb", "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb", "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.DirectRBConfiguration", "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.DirectRandomizedBenchmarking", "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.direct_rb_analysis", "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.generate_drb_circuits", "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.generate_fixed_depth_parallel_drb_circuits", "iqm.benchmarks.randomized_benchmarking.eplg", "iqm.benchmarks.randomized_benchmarking.eplg.eplg", "iqm.benchmarks.randomized_benchmarking.eplg.eplg.EPLGBenchmark", "iqm.benchmarks.randomized_benchmarking.eplg.eplg.EPLGConfiguration", "iqm.benchmarks.randomized_benchmarking.eplg.eplg.eplg_analysis", "iqm.benchmarks.randomized_benchmarking.eplg.eplg.plot_layered_fidelities_graph", "iqm.benchmarks.randomized_benchmarking.interleaved_rb", "iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb", "iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.InterleavedRBConfiguration", "iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.InterleavedRandomizedBenchmarking", "iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.interleaved_rb_analysis", "iqm.benchmarks.randomized_benchmarking.mirror_rb", "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb", "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRBConfiguration", "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRandomizedBenchmarking", "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.compute_polarizations", "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.generate_fixed_depth_mrb_circuits", "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.generate_pauli_dressed_mrb_circuits", "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.list_to_numcircuit_times_numpauli_matrix", "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.mrb_analysis", "iqm.benchmarks.randomized_benchmarking.multi_lmfit", "iqm.benchmarks.randomized_benchmarking.multi_lmfit.create_multi_dataset_params", "iqm.benchmarks.randomized_benchmarking.multi_lmfit.eval_func_single_dataset", "iqm.benchmarks.randomized_benchmarking.multi_lmfit.get_param_names_from_func_signature", "iqm.benchmarks.randomized_benchmarking.multi_lmfit.multi_dataset_residual", "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common", "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.compute_inverse_clifford", "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.edge_grab", "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.estimate_survival_probabilities", "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.exponential_rb", "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.fit_decay_lmfit", "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.generate_all_rb_circuits", "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.generate_fixed_depth_parallel_rb_circuits", "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.generate_random_clifford_seq_circuits", "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.get_survival_probabilities", "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.import_native_gate_cliffords", "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.lmfit_minimizer", "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.plot_rb_decay", "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.relabel_qubits_array_from_zero", "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.submit_parallel_rb_job", "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.submit_sequential_rb_jobs", "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.survival_probabilities_parallel", "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.validate_irb_gate", "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.validate_rb_qubits", "iqm.benchmarks.readout_mitigation", "iqm.benchmarks.readout_mitigation.M3IQM", "iqm.benchmarks.readout_mitigation.apply_readout_error_mitigation", "iqm.benchmarks.readout_mitigation.readout_error_m3", "iqm.benchmarks.utils", "iqm.benchmarks.utils.bootstrap_counts", "iqm.benchmarks.utils.count_2q_layers", "iqm.benchmarks.utils.count_native_gates", "iqm.benchmarks.utils.extract_fidelities", "iqm.benchmarks.utils.generate_state_tomography_circuits", "iqm.benchmarks.utils.get_Pauli_expectation", "iqm.benchmarks.utils.get_active_qubits", "iqm.benchmarks.utils.get_iqm_backend", "iqm.benchmarks.utils.get_measurement_mapping", "iqm.benchmarks.utils.get_neighbors_of_edges", "iqm.benchmarks.utils.get_tomography_matrix", "iqm.benchmarks.utils.marginal_distribution", "iqm.benchmarks.utils.median_with_uncertainty", "iqm.benchmarks.utils.perform_backend_transpilation", "iqm.benchmarks.utils.random_hamiltonian_path", "iqm.benchmarks.utils.reduce_to_active_qubits", "iqm.benchmarks.utils.remove_directed_duplicates_to_list", "iqm.benchmarks.utils.retrieve_all_counts", "iqm.benchmarks.utils.retrieve_all_job_metadata", "iqm.benchmarks.utils.set_coupling_map", "iqm.benchmarks.utils.sort_batches_by_final_layout", "iqm.benchmarks.utils.split_into_disjoint_pairs", "iqm.benchmarks.utils.split_sequence_in_chunks", "iqm.benchmarks.utils.submit_execute", "iqm.benchmarks.utils.timeit", "iqm.benchmarks.utils.xrvariable_to_counts", "iqm.benchmarks.utils_plots", "iqm.benchmarks.utils_plots.GraphPositions", "iqm.benchmarks.utils_plots.draw_graph_edges", "iqm.benchmarks.utils_plots.evaluate_hamiltonian_paths", "iqm.benchmarks.utils_plots.plot_layout_fidelity_graph", "iqm.benchmarks.utils_plots.rx_to_nx_graph", "iqm.benchmarks.utils_shadows", "iqm.benchmarks.utils_shadows.CUE", "iqm.benchmarks.utils_shadows.get_local_shadow", "iqm.benchmarks.utils_shadows.get_negativity", "iqm.benchmarks.utils_shadows.local_shadow_tomography", "Changelog", "Development", "2-Qubit Clifford Group Decomposition", "How to make your own benchmark?", "Devices", "Benchmarking IQM Spark", "Benchmarking IQM Star", "Clifford Randomized Benchmarking (CRB)", "Circuit Layer Operations Per Second (CLOPS)", "Coherence experiments", "Error Per Layered Gate (EPLG)", "IQM Benchmarks: Summary Notebook", "Greenberger\u2013Horne\u2013Zeilinger (GHZ) State Fidelity", "Graph State Bipartite Entanglement", "Compressive Gate Set Tomography (GST)", "Interleaved Randomized Benchmarking (IRB)", "Mirror Randomized Benchmarking (MRB)", "Q-Score", "Quantum Volume (QV)", "Examples", "IQM Benchmarks", "License", "IQM Benchmarks"], "terms": {"": [1, 25, 26, 29, 91, 134, 137, 138, 149, 155, 163, 165, 170, 183, 212, 213, 215, 216, 217, 220, 228, 229], "python": 1, "librari": [1, 116, 129, 134, 163, 207, 209, 221], "suit": [1, 229], "qcvv": [1, 37, 210, 227, 229], "subpackag": [1, 19, 28, 47, 76, 89, 108, 109, 114, 121, 127, 132], "modul": [1, 5, 15, 19, 28, 47, 75, 76, 89, 108, 109, 114, 121, 127, 132, 227], "gener": [2, 3, 18, 21, 29, 30, 31, 39, 42, 47, 49, 50, 54, 55, 56, 57, 58, 59, 63, 64, 66, 78, 86, 91, 94, 97, 106, 112, 116, 119, 120, 123, 124, 129, 130, 134, 137, 138, 141, 142, 148, 152, 153, 154, 159, 162, 169, 170, 174, 184, 197, 199, 200, 203, 207, 212, 213, 214, 217, 218, 219, 220, 221, 222, 228], "class": [2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 16, 17, 18, 20, 21, 22, 29, 30, 31, 33, 48, 49, 50, 62, 63, 64, 77, 78, 79, 90, 91, 92, 96, 97, 98, 110, 111, 112, 115, 116, 117, 122, 123, 124, 128, 129, 130, 133, 134, 135, 152, 165, 166, 196, 197, 207, 209, 210, 228, 229], "inherit": [2, 3, 5, 15, 20, 29, 48, 62, 77, 90, 96, 110, 115, 122, 128, 133, 165, 196], "benchmarkbas": [2, 4, 229], "abc": [2, 3, 5, 6, 20, 29, 48, 62, 77, 90, 96, 110, 115, 122, 128, 133], "benchmarkconfigurationbas": [2, 3, 6, 20, 22, 29, 31, 33, 48, 50, 62, 64, 77, 79, 90, 92, 96, 98, 110, 111, 115, 116, 122, 124, 128, 129, 133, 134, 229], "pydant": [2, 4, 20, 22, 29, 31, 48, 50, 62, 64, 77, 79, 90, 92, 96, 98, 110, 111, 115, 116, 122, 124, 128, 129, 133, 134], "main": [2, 7, 8, 20, 29, 30, 48, 62, 77, 90, 96, 110, 115, 122, 128, 133, 212], "basemodel": [2, 4, 20, 29, 48, 62, 77, 90, 96, 110, 115, 122, 128, 133], "backend": [3, 6, 21, 27, 29, 30, 31, 32, 34, 38, 49, 50, 57, 63, 66, 69, 70, 71, 72, 73, 78, 86, 91, 92, 97, 98, 106, 112, 117, 119, 120, 123, 124, 126, 130, 135, 137, 138, 148, 152, 153, 160, 161, 163, 164, 166, 167, 168, 172, 173, 177, 183, 185, 189, 190, 193, 198, 199, 201, 207, 210, 219, 229], "iqmbackendbas": [3, 6, 21, 30, 49, 63, 66, 78, 91, 97, 112, 117, 119, 120, 123, 130, 135, 137, 138, 148, 152, 153, 154, 160, 161, 163, 164, 167, 172, 177, 183, 189, 193, 199], "configur": [3, 4, 6, 21, 22, 30, 31, 33, 34, 36, 38, 41, 42, 44, 46, 49, 50, 63, 64, 78, 79, 91, 92, 97, 98, 105, 111, 112, 116, 117, 123, 124, 129, 130, 134, 135, 207, 228, 229], "base": [3, 4, 5, 6, 7, 8, 9, 10, 16, 17, 18, 21, 22, 23, 30, 31, 49, 50, 52, 59, 63, 64, 78, 79, 81, 91, 92, 97, 98, 111, 112, 116, 117, 123, 124, 129, 130, 134, 135, 146, 166, 197, 207, 208, 212, 213, 228], "The": [3, 6, 7, 12, 16, 17, 18, 21, 22, 23, 25, 26, 29, 30, 31, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45, 46, 49, 50, 51, 52, 53, 54, 57, 59, 60, 61, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 78, 79, 82, 88, 91, 92, 94, 97, 98, 100, 101, 103, 104, 111, 112, 116, 117, 118, 120, 123, 124, 125, 126, 129, 130, 134, 135, 136, 137, 147, 148, 158, 162, 168, 170, 172, 173, 174, 175, 176, 177, 178, 179, 183, 184, 185, 187, 188, 191, 192, 193, 194, 197, 198, 200, 201, 206, 212, 213, 214, 219, 220, 221, 225, 226, 228, 229], "implement": [3, 5, 6, 49, 50, 53, 219], "all": [3, 4, 6, 7, 16, 17, 18, 21, 27, 31, 36, 39, 40, 42, 49, 50, 59, 61, 63, 78, 85, 91, 95, 97, 99, 100, 101, 104, 105, 111, 112, 116, 117, 123, 129, 130, 135, 152, 158, 160, 161, 166, 174, 179, 180, 187, 188, 207, 210, 212, 213, 214, 216, 218, 219, 222, 224, 225, 226, 228, 229], "from": [3, 6, 7, 11, 21, 30, 31, 36, 38, 41, 42, 44, 45, 46, 49, 50, 57, 59, 60, 65, 74, 82, 88, 94, 95, 97, 99, 104, 106, 124, 134, 136, 144, 158, 159, 162, 166, 168, 170, 173, 175, 176, 177, 178, 180, 184, 186, 187, 188, 189, 195, 198, 199, 200, 203, 207, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 228, 229], "which": [3, 6, 7, 8, 21, 24, 25, 26, 28, 31, 33, 38, 39, 40, 46, 49, 50, 57, 60, 64, 67, 78, 79, 87, 89, 91, 92, 93, 97, 107, 111, 112, 113, 116, 119, 120, 129, 130, 131, 134, 135, 137, 138, 140, 148, 152, 158, 162, 166, 173, 206, 212, 213, 215, 219, 220, 221, 228, 229], "thei": [3, 17, 41, 221], "method": [3, 4, 6, 7, 8, 9, 10, 16, 17, 18, 21, 22, 28, 30, 31, 49, 50, 52, 63, 64, 78, 79, 91, 92, 97, 98, 111, 112, 116, 117, 119, 120, 123, 124, 129, 130, 134, 135, 137, 138, 166, 183, 197, 207, 212, 213, 218, 219, 221, 225], "paramet": [3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 112, 113, 116, 117, 118, 119, 120, 123, 124, 125, 126, 129, 130, 131, 134, 135, 136, 137, 138, 139, 140, 142, 144, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 212, 213, 215, 217, 218, 219, 221], "abstract": [3, 6, 221], "classmethod": [3, 6, 7], "name": [3, 6, 7, 8, 16, 17, 18, 27, 31, 32, 33, 61, 69, 70, 71, 72, 73, 86, 94, 106, 116, 126, 129, 134, 144, 151, 152, 168, 173, 174, 177, 197, 198, 200, 206, 207, 209, 210, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 225, 228], "return": [3, 6, 9, 11, 12, 13, 16, 17, 18, 21, 23, 24, 25, 26, 27, 30, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 93, 94, 95, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 112, 113, 117, 118, 119, 120, 123, 125, 126, 130, 131, 135, 136, 137, 138, 139, 140, 143, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 203, 204, 205, 206, 209, 210], "execute_full_benchmark": 3, "execut": [3, 4, 6, 9, 16, 17, 18, 21, 29, 30, 46, 49, 59, 63, 64, 72, 73, 76, 78, 86, 89, 91, 92, 97, 98, 99, 106, 111, 112, 116, 117, 123, 129, 130, 134, 135, 136, 149, 155, 160, 161, 162, 183, 185, 193, 194, 195, 207, 210, 212, 213, 214, 215, 217, 218, 220, 222, 223, 225, 228, 229], "full": [3, 28, 29, 31, 92, 98, 221, 229], "given": [3, 6, 7, 11, 21, 31, 39, 49, 50, 54, 55, 56, 57, 58, 59, 60, 61, 66, 71, 72, 73, 76, 78, 79, 84, 89, 91, 97, 104, 105, 126, 127, 136, 153, 154, 175, 179, 180, 184, 190, 192, 197, 198, 204, 205, 212, 213, 219, 221, 229], "static": [3, 6, 21, 30, 49, 63, 78, 91, 97, 112, 117, 123, 130, 135, 197], "check_requir": 3, "all_benchmark": 3, "ordereddict": 3, "str": [3, 4, 6, 7, 8, 9, 11, 16, 17, 18, 22, 23, 26, 27, 31, 32, 33, 36, 37, 39, 45, 49, 50, 52, 53, 63, 64, 66, 69, 70, 71, 72, 73, 74, 79, 81, 82, 83, 86, 88, 91, 92, 94, 95, 97, 98, 99, 102, 103, 104, 106, 111, 112, 116, 117, 119, 120, 123, 124, 126, 129, 130, 134, 135, 136, 137, 138, 148, 149, 151, 152, 153, 154, 155, 156, 158, 160, 161, 162, 163, 164, 166, 167, 168, 170, 172, 173, 174, 175, 177, 180, 181, 182, 183, 185, 187, 188, 193, 195, 197, 198, 199, 200, 204, 206, 209, 210, 212, 218, 219, 221, 223, 225], "check": [3, 34, 85, 105, 209, 212, 213, 219], "whether": [3, 4, 22, 31, 50, 64, 79, 85, 86, 88, 91, 92, 97, 98, 105, 106, 111, 116, 120, 129, 153, 158, 159, 162, 170, 174, 183, 204, 206, 219, 222, 228], "requir": [3, 79, 174, 209, 219, 221, 228, 229], "ar": [3, 4, 7, 11, 16, 17, 18, 23, 27, 30, 31, 32, 34, 36, 40, 41, 46, 49, 50, 59, 60, 74, 97, 98, 123, 138, 158, 164, 174, 175, 178, 180, 181, 200, 206, 207, 209, 212, 213, 215, 216, 219, 221, 226, 228, 229], "met": 3, "valid": [3, 33, 123, 163, 164, 227, 229], "dictionari": [3, 4, 7, 11, 22, 23, 31, 38, 44, 50, 63, 64, 67, 69, 70, 71, 72, 73, 74, 79, 82, 91, 92, 95, 97, 98, 99, 102, 103, 104, 111, 116, 117, 119, 120, 124, 126, 129, 134, 135, 137, 138, 147, 148, 152, 153, 154, 156, 160, 161, 167, 168, 170, 172, 174, 175, 178, 180, 181, 182, 190, 193, 195, 197, 198, 199, 204, 206, 214, 217, 218, 221, 222], "type": [3, 4, 6, 8, 9, 11, 12, 13, 16, 17, 18, 21, 22, 23, 24, 26, 27, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 112, 113, 116, 117, 118, 119, 120, 123, 124, 125, 126, 129, 130, 131, 134, 135, 136, 137, 138, 139, 140, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 212, 221, 228], "generate_requir": 3, "none": [3, 4, 6, 7, 8, 16, 17, 18, 22, 27, 31, 37, 39, 50, 57, 60, 64, 69, 70, 71, 79, 86, 91, 92, 97, 98, 111, 116, 119, 120, 124, 126, 129, 134, 137, 138, 142, 147, 148, 151, 152, 153, 154, 156, 158, 160, 161, 163, 166, 170, 174, 183, 185, 187, 193, 197, 198, 200, 204, 206, 212, 213, 214, 215, 216, 217, 218, 220, 222, 223, 224, 225, 229], "attribut": [3, 4, 6, 7, 8, 9, 10, 16, 17, 18, 21, 22, 30, 31, 49, 50, 63, 64, 78, 79, 91, 92, 97, 98, 111, 112, 116, 117, 123, 124, 129, 130, 134, 135, 194, 197, 217, 221, 225, 228], "shot": [4, 22, 23, 31, 50, 64, 70, 71, 79, 92, 97, 98, 111, 116, 124, 129, 134, 160, 161, 166, 167, 193, 210, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 229], "int": [4, 9, 11, 16, 17, 21, 22, 23, 26, 27, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 78, 79, 81, 82, 83, 84, 86, 88, 91, 92, 94, 97, 98, 99, 102, 105, 106, 111, 116, 117, 119, 120, 124, 126, 129, 134, 135, 136, 137, 138, 139, 148, 149, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 164, 166, 167, 170, 171, 173, 174, 175, 176, 178, 179, 181, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 203, 204, 205, 206, 217, 219, 221], "256": [4, 64, 79, 92, 98, 111, 116, 124, 129, 134, 214, 218, 223], "max_gates_per_batch": [4, 22, 31, 50, 64, 79, 92, 98, 111, 116, 124, 129, 134, 160, 161, 193, 212, 213, 214, 217, 218, 220, 223, 225, 229], "max_circuits_per_batch": [4, 22, 31, 50, 64, 79, 92, 98, 111, 116, 124, 129, 134, 160, 161, 193, 207, 217, 220, 229], "calset_id": [4, 22, 31, 50, 64, 79, 92, 98, 111, 116, 124, 129, 134, 160, 161, 193, 212, 213, 214, 215, 217, 218, 220, 222, 223, 224, 225, 229], "routing_method": [4, 22, 31, 50, 64, 79, 92, 98, 111, 116, 119, 120, 124, 129, 134, 137, 138, 183, 212, 213, 214, 217, 218, 220, 223, 225, 229], "liter": [4, 22, 31, 50, 64, 69, 70, 71, 79, 92, 98, 111, 116, 119, 120, 124, 129, 134, 137, 138, 175, 189, 197, 204, 206], "basic": [4, 22, 31, 50, 64, 79, 92, 98, 111, 116, 119, 120, 124, 129, 134, 137, 138], "lookahead": [4, 22, 31, 50, 64, 79, 92, 98, 111, 116, 119, 120, 124, 129, 134], "stochast": [4, 22, 31, 50, 64, 79, 92, 98, 111, 116, 119, 120, 124, 129, 134], "sabr": [4, 22, 31, 50, 64, 79, 92, 98, 111, 116, 119, 120, 124, 129, 134, 183, 212, 213, 214, 218, 219, 221, 225, 229], "physical_layout": [4, 22, 31, 50, 64, 79, 92, 98, 111, 116, 124, 129, 134, 189, 212, 213, 214, 217, 218, 220, 223, 225, 229], "fix": [4, 22, 31, 38, 50, 64, 79, 92, 98, 111, 116, 117, 124, 129, 134, 135, 137, 153, 160, 162, 189, 207, 212, 213, 214, 218, 221, 225, 229], "batch": [4, 17, 22, 31, 50, 64, 79, 92, 98, 111, 116, 124, 129, 134, 160, 161, 189, 190, 193, 207, 214, 217, 218, 219, 220, 221, 222, 223, 225, 229], "use_dd": [4, 22, 31, 50, 64, 79, 92, 98, 111, 116, 124, 129, 134, 217, 220], "bool": [4, 22, 31, 36, 50, 64, 79, 85, 86, 88, 91, 92, 97, 98, 105, 106, 111, 116, 120, 124, 129, 134, 158, 159, 162, 166, 170, 174, 183, 198], "fals": [4, 22, 31, 36, 50, 64, 79, 92, 98, 106, 111, 116, 120, 124, 129, 134, 158, 159, 162, 166, 170, 183, 198, 212, 214, 217, 218, 225], "dd_strategi": [4, 22, 31, 50, 64, 79, 92, 98, 111, 116, 124, 129, 134, 217, 220], "ddstrategi": [4, 22, 31, 50, 64, 79, 92, 98, 111, 116, 124, 129, 134], "number": [4, 21, 23, 31, 32, 33, 36, 37, 40, 49, 50, 53, 54, 55, 56, 57, 58, 59, 61, 64, 69, 70, 71, 76, 78, 79, 81, 83, 84, 86, 88, 89, 92, 97, 98, 105, 106, 108, 111, 116, 117, 119, 120, 124, 129, 134, 135, 136, 137, 138, 139, 148, 149, 152, 153, 154, 155, 160, 161, 166, 167, 170, 171, 172, 182, 184, 185, 191, 193, 198, 199, 205, 206, 212, 213, 218, 219, 221], "us": [4, 6, 9, 16, 22, 27, 28, 29, 30, 31, 36, 37, 38, 41, 42, 49, 50, 52, 53, 57, 59, 60, 61, 64, 66, 69, 70, 71, 72, 73, 75, 79, 86, 88, 91, 92, 98, 116, 120, 126, 134, 136, 151, 158, 166, 168, 174, 193, 200, 204, 206, 207, 209, 210, 212, 213, 216, 219, 221, 222, 226, 228], "circuit": [4, 7, 10, 15, 16, 17, 21, 29, 30, 31, 32, 33, 36, 46, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 63, 66, 78, 79, 82, 89, 91, 92, 97, 98, 99, 102, 105, 106, 111, 112, 116, 117, 119, 120, 123, 124, 129, 130, 134, 135, 136, 137, 138, 139, 147, 148, 149, 152, 153, 154, 155, 160, 161, 163, 166, 167, 171, 172, 174, 176, 178, 183, 185, 190, 193, 195, 206, 207, 209, 210, 214, 218, 219, 220, 221, 222, 223, 225, 226, 227], "default": [4, 6, 12, 22, 31, 36, 39, 50, 64, 69, 70, 71, 79, 92, 97, 98, 106, 111, 116, 119, 120, 124, 129, 134, 137, 138, 148, 154, 158, 159, 162, 166, 170, 174, 189, 193, 198, 204, 206, 212, 214, 218, 221, 222, 224], "i": [4, 6, 7, 21, 22, 24, 28, 30, 31, 32, 33, 36, 37, 38, 39, 42, 50, 54, 57, 59, 61, 64, 69, 70, 71, 74, 78, 79, 85, 87, 88, 91, 92, 93, 97, 98, 105, 106, 107, 111, 112, 113, 116, 119, 120, 124, 129, 130, 131, 134, 135, 136, 137, 138, 139, 140, 143, 148, 156, 158, 159, 162, 163, 166, 170, 173, 174, 175, 183, 189, 193, 198, 200, 204, 205, 206, 207, 209, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 228, 229], "2": [4, 21, 31, 32, 33, 37, 60, 79, 85, 98, 105, 116, 120, 124, 134, 153, 159, 171, 191, 208, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229], "8": [4, 31, 159, 191, 209, 212, 213, 214, 216, 217, 218, 219, 220, 222, 223, 225, 228, 229], "maximum": [4, 40, 70, 71, 72, 73, 88, 124, 160, 161, 193, 199, 207, 212, 213, 221], "gate": [4, 22, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 44, 46, 49, 50, 54, 58, 59, 60, 67, 79, 89, 91, 92, 98, 108, 109, 112, 114, 116, 117, 119, 120, 121, 122, 123, 124, 127, 129, 130, 132, 134, 137, 138, 147, 148, 151, 152, 153, 154, 156, 158, 160, 161, 163, 171, 172, 174, 183, 193, 199, 200, 204, 206, 207, 212, 219, 223, 226, 227, 229], "per": [4, 27, 31, 69, 70, 71, 89, 92, 98, 111, 116, 120, 121, 122, 134, 136, 137, 138, 139, 160, 161, 166, 167, 193, 205, 207, 221, 226, 227, 229], "option": [4, 29, 50, 60, 69, 70, 71, 79, 86, 97, 98, 116, 117, 119, 124, 126, 129, 134, 137, 138, 147, 148, 151, 153, 154, 156, 158, 160, 161, 163, 170, 174, 183, 185, 187, 193, 197, 198, 204, 206, 207, 210, 216, 217, 218, 220, 221, 227], "calibr": [4, 6, 50, 60, 97, 98, 124, 160, 161, 166, 167, 173, 193, 199, 200, 207, 217, 218, 219, 222, 224], "id": [4, 193, 215, 218, 222, 224], "last": [4, 31], "avail": [4, 42, 228, 229], "qiskit": [4, 6, 22, 31, 38, 79, 92, 98, 116, 119, 120, 129, 134, 137, 138, 163, 183, 193, 207, 209, 210, 212, 221], "rout": [4, 92, 98, 116, 119, 120, 134, 137, 138, 183, 218, 219, 221, 225], "transpil": [4, 16, 22, 30, 49, 50, 52, 53, 79, 91, 92, 98, 116, 119, 120, 134, 137, 138, 152, 153, 163, 167, 172, 183, 190, 207, 210, 212, 215, 218, 219, 221, 225], "physic": [4, 31, 33, 39, 50, 64, 79, 91, 92, 97, 98, 102, 116, 120, 129, 134, 137, 189, 218, 221, 225, 227], "layout": [4, 8, 11, 16, 17, 31, 33, 50, 61, 64, 71, 79, 91, 92, 97, 98, 116, 117, 120, 126, 134, 135, 160, 161, 168, 173, 183, 189, 197, 200, 207, 212, 213, 218, 219, 221, 223, 225], "constrain": [4, 189, 229], "dure": [4, 13, 22, 32, 63, 97, 112, 130, 220], "select": [4, 31, 50, 79, 98, 104, 124, 200, 207, 219, 221], "qubit": [4, 8, 9, 11, 16, 17, 19, 21, 22, 23, 26, 27, 30, 31, 32, 33, 36, 38, 41, 42, 44, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 66, 67, 69, 70, 71, 72, 73, 76, 78, 79, 81, 82, 88, 89, 91, 92, 97, 98, 102, 106, 108, 111, 112, 116, 117, 119, 120, 123, 124, 126, 129, 134, 135, 136, 137, 138, 148, 149, 151, 152, 153, 154, 155, 158, 159, 160, 161, 162, 164, 166, 168, 171, 173, 174, 176, 178, 183, 185, 189, 190, 193, 198, 200, 203, 204, 205, 206, 207, 208, 210, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 225, 227], "initi": [4, 6, 25, 28, 29, 31, 36, 46, 50, 75, 168, 212, 221], "allow": [4, 207, 212, 213, 219, 229], "ani": [4, 8, 31, 32, 36, 52, 53, 63, 72, 73, 95, 97, 117, 129, 135, 139, 158, 160, 161, 167, 188, 192, 209, 228, 229], "other": [4, 23, 30, 36, 50, 174, 193, 206, 207, 212, 213, 215, 228, 229], "accord": [4, 36, 49, 55, 56, 78, 116, 148, 189, 190, 199, 209, 218, 221, 225], "final": [4, 6, 41, 60, 92, 97, 98, 102, 116, 120, 134, 178, 183, 189, 190, 193, 212], "measur": [4, 23, 26, 27, 28, 29, 31, 36, 38, 42, 44, 49, 50, 52, 69, 70, 71, 78, 81, 91, 92, 97, 98, 102, 111, 116, 119, 120, 129, 134, 162, 167, 172, 174, 175, 178, 189, 190, 193, 206, 210, 212, 213, 219, 221], "boolean": [4, 50, 219], "flag": [4, 50, 198], "determin": [4, 31, 50, 228], "enabl": [4, 191, 193, 207], "dynam": [4, 193, 207], "decoupl": [4, 193, 207], "model_config": [4, 22, 31, 50, 64, 79, 92, 98, 111, 116, 124, 129, 134], "classvar": [4, 22, 31, 50, 64, 79, 92, 98, 111, 116, 124, 129, 134], "configdict": [4, 22, 31, 50, 64, 79, 92, 98, 111, 116, 124, 129, 134], "model": [4, 22, 26, 31, 36, 50, 64, 79, 92, 98, 111, 116, 124, 129, 134, 151, 157, 158, 212, 221], "should": [4, 6, 8, 10, 22, 31, 49, 50, 57, 64, 74, 75, 79, 92, 98, 111, 116, 124, 129, 134, 153, 193, 207, 218, 219, 221, 228], "conform": [4, 22, 31, 37, 50, 64, 79, 92, 98, 111, 116, 124, 129, 134], "config": [4, 22, 31, 50, 64, 79, 92, 98, 111, 116, 124, 129, 134], "thi": [5, 6, 15, 16, 21, 26, 31, 32, 37, 42, 49, 50, 57, 61, 85, 92, 105, 124, 159, 168, 197, 208, 209, 210, 211, 212, 213, 215, 217, 219, 221, 226, 228, 229], "defin": [5, 6, 7, 33, 34, 57, 59, 92, 152, 198, 210, 212, 213, 219, 228, 229], "function": [5, 6, 20, 21, 24, 26, 29, 30, 31, 35, 43, 46, 48, 62, 63, 68, 74, 77, 78, 82, 87, 90, 91, 93, 96, 97, 107, 110, 112, 113, 115, 117, 118, 122, 123, 125, 128, 130, 131, 133, 135, 140, 141, 143, 144, 146, 147, 150, 151, 157, 159, 165, 169, 193, 194, 196, 202, 207, 221], "benchmarkobservationidentifi": [5, 8, 44, 207, 214, 216, 218, 222, 225], "benchmarkobserv": [5, 7, 26, 44, 61, 72, 73, 207, 214, 216, 218, 222, 225], "benchmarkrunresult": [5, 6, 7, 12, 21, 24, 30, 43, 49, 51, 63, 68, 78, 87, 91, 93, 97, 107, 112, 113, 117, 118, 123, 125, 130, 131, 135, 140, 207], "benchmarkanalysisresult": [5, 6, 12, 21, 24, 30, 43, 49, 51, 63, 68, 78, 87, 91, 93, 97, 107, 112, 113, 117, 118, 123, 125, 130, 131, 135, 140, 207], "kwarg": 6, "A": [6, 7, 9, 10, 11, 13, 16, 17, 21, 23, 24, 25, 26, 27, 30, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 54, 55, 56, 57, 58, 59, 60, 61, 63, 65, 66, 67, 69, 70, 71, 72, 73, 78, 87, 91, 93, 95, 97, 103, 104, 107, 112, 113, 116, 117, 119, 120, 126, 134, 135, 137, 138, 140, 147, 148, 151, 153, 154, 160, 161, 170, 173, 174, 175, 176, 178, 179, 180, 181, 183, 184, 185, 186, 189, 191, 192, 193, 195, 197, 198, 199, 205, 212, 219, 221, 228, 229], "run": [6, 7, 8, 10, 21, 24, 29, 30, 31, 33, 36, 43, 44, 49, 50, 51, 63, 68, 78, 82, 87, 91, 92, 93, 97, 107, 112, 113, 117, 118, 123, 125, 130, 131, 135, 140, 207, 210, 212, 213, 218, 221, 226, 229], "cortex": [6, 11], "experi": [6, 21, 22, 23, 24, 26, 27, 36, 38, 41, 42, 44, 46, 61, 63, 68, 69, 70, 71, 72, 73, 78, 86, 87, 91, 93, 94, 97, 98, 100, 101, 107, 112, 113, 116, 120, 126, 130, 131, 135, 140, 150, 157, 158, 162, 164, 174, 198, 218, 226, 227], "In": [6, 116, 212, 213, 217, 221, 228, 229], "order": [6, 31, 36, 60, 61, 151, 159, 173, 174, 207, 217, 219, 229], "write": [6, 166, 209, 210, 228], "new": [6, 7, 11, 185, 207, 210, 212, 213, 221, 229], "recommend": [6, 221, 228, 229], "deriv": [6, 228], "baseclass": 6, "addition": [6, 219], "custom": [6, 79, 98, 123, 124, 212, 213, 218, 224, 225, 229], "analysi": [6, 7, 12, 21, 22, 24, 30, 31, 35, 43, 63, 68, 72, 73, 78, 87, 91, 93, 94, 97, 107, 112, 113, 117, 118, 123, 125, 130, 131, 135, 140, 207, 212, 221], "can": [6, 10, 16, 31, 39, 41, 50, 67, 76, 78, 89, 97, 116, 168, 173, 207, 212, 213, 215, 217, 219, 221, 225, 229], "give": [6, 30, 82, 191, 207, 212, 216, 219, 221, 228], "pointer": 6, "analysis_funct": [6, 21, 30, 49, 63, 78, 91, 97, 112, 117, 123, 130, 135, 210], "field": [6, 228], "accept": [6, 31, 86, 207, 228], "analysisresult": [6, 7, 21, 24, 49, 51, 78, 87, 91, 93, 97, 107, 112, 113, 117, 118, 123, 125, 130, 131, 135, 140, 207, 210], "its": [6, 126, 144, 185, 207, 212, 213, 228], "input": [6, 11, 33, 65, 74, 92, 98, 117, 123, 139, 159, 163, 164, 168, 179, 182, 184, 189, 191, 192, 205, 216, 218, 221], "result": [6, 7, 8, 10, 11, 12, 21, 24, 29, 30, 31, 36, 37, 40, 41, 42, 43, 44, 45, 61, 76, 78, 81, 87, 88, 89, 91, 93, 97, 98, 105, 106, 107, 112, 113, 117, 118, 123, 125, 130, 131, 135, 140, 149, 155, 157, 189, 193, 207, 210, 212, 213, 218, 225, 228, 229], "onli": [6, 12, 32, 92, 98, 116, 185, 205, 212, 213, 215, 219, 221, 223, 228], "pass": [6, 12, 139, 161, 168, 183, 193, 210, 217, 218], "through": [6, 12, 53, 228], "iqmbackend": [6, 97, 117, 135, 160, 161], "iqmfacadebackend": 6, "dataset": [6, 7, 10, 11, 13, 21, 30, 36, 38, 40, 41, 42, 43, 44, 46, 49, 51, 52, 53, 61, 63, 72, 73, 78, 91, 94, 97, 112, 117, 123, 130, 135, 141, 143, 158, 195, 207, 210, 214, 217, 218, 221, 222, 225], "overridden": 6, "an": [6, 16, 17, 26, 28, 29, 30, 31, 40, 43, 44, 46, 49, 50, 51, 52, 78, 91, 120, 124, 130, 131, 159, 163, 167, 168, 175, 184, 198, 203, 207, 209, 210, 212, 213, 219, 221, 228, 229], "xarrai": [6, 7, 11, 13, 21, 30, 36, 38, 42, 44, 46, 49, 52, 63, 78, 91, 97, 112, 117, 123, 130, 135, 195, 207, 210], "contain": [6, 7, 9, 10, 13, 15, 16, 17, 18, 23, 26, 33, 36, 37, 38, 40, 41, 42, 44, 46, 49, 51, 52, 53, 61, 63, 72, 73, 74, 117, 135, 148, 160, 161, 173, 185, 197, 200, 207, 212, 213, 221, 225, 226, 228, 229], "inform": [6, 10, 60, 63, 75, 200, 228], "necessari": [6, 205, 212, 219, 229], "analys": 6, "calibration_set_id": [6, 216, 217, 220], "uuid": 6, "calibrationsetid": 6, "latest": [6, 193, 219, 227], "set": [6, 16, 17, 21, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 42, 46, 49, 65, 79, 92, 97, 98, 137, 139, 145, 148, 158, 172, 175, 179, 189, 193, 209, 212, 213, 219, 220, 222, 226, 227, 229], "runresult": [6, 7, 10, 21, 24, 49, 51, 78, 87, 91, 93, 97, 107, 112, 113, 130, 131, 135, 140, 207, 210], "analyz": [6, 10, 26, 49, 51, 171, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 224, 225, 229], "run_index": [6, 218, 225], "1": [6, 27, 31, 42, 64, 79, 83, 104, 116, 119, 120, 134, 137, 138, 148, 150, 153, 159, 174, 183, 204, 205, 206, 209, 210, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 228, 229], "intern": [6, 17], "perform": [6, 30, 42, 72, 73, 79, 92, 98, 151, 162, 174, 183, 206, 212, 221, 226, 228, 229], "make": [6, 97, 193, 207, 208, 212, 227, 228, 229], "shallow": 6, "copi": [6, 170, 209, 221, 228], "produc": [6, 29, 33, 40, 42, 60, 98, 221, 229], "therefor": [6, 85, 105], "chang": [6, 31, 207, 227, 228], "data": [6, 7, 11, 26, 29, 30, 31, 35, 36, 42, 49, 50, 52, 60, 69, 72, 73, 94, 106, 124, 142, 145, 151, 157, 166, 173, 199, 200, 210, 218, 219, 221, 225], "just": [6, 212], "structur": [6, 119, 212, 213], "arrai": [6, 25, 26, 29, 36, 38, 40, 42, 46, 91, 111, 116, 120, 123, 124, 129, 134, 158, 159, 164, 168, 204, 221], "index": [6, 26, 49, 57, 59, 60, 91, 97, 116, 137, 225, 227], "construct": [6, 28, 50, 54, 204], "updat": [6, 30, 43, 72, 73, 74, 91, 92, 207, 212, 213, 218, 229], "core": 7, "circuit_contain": 7, "plot": [7, 27, 29, 30, 31, 43, 49, 51, 61, 69, 70, 71, 72, 73, 106, 126, 158, 196, 200, 207, 210, 212, 213, 214, 218, 219, 222, 229], "dict": [7, 11, 23, 27, 31, 32, 33, 52, 53, 63, 67, 69, 70, 71, 72, 73, 74, 81, 82, 88, 91, 94, 95, 97, 99, 102, 103, 104, 116, 117, 119, 120, 126, 134, 135, 136, 137, 138, 147, 148, 149, 152, 153, 154, 155, 156, 158, 160, 161, 162, 167, 168, 170, 172, 174, 175, 178, 180, 181, 182, 187, 188, 190, 193, 195, 197, 198, 199, 204, 206, 210], "matplotlib": [7, 27, 37, 200, 210, 212, 213, 220, 221], "figur": [7, 14, 27, 37, 40, 41, 42, 61, 69, 70, 71, 86, 94, 106, 126, 158, 198, 200, 210, 217, 218, 220, 221], "factori": [7, 16, 17, 18], "observ": [7, 8, 9, 26, 30, 43, 44, 49, 51, 61, 72, 73, 94, 158, 182, 207, 212, 213, 214, 216, 217, 218, 219, 220, 222, 224, 225], "list": [7, 9, 11, 13, 16, 17, 18, 21, 22, 23, 26, 27, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 49, 50, 52, 53, 57, 59, 60, 61, 65, 66, 67, 72, 73, 78, 80, 81, 82, 84, 86, 88, 91, 92, 97, 99, 100, 101, 102, 103, 105, 106, 116, 117, 119, 120, 134, 135, 136, 137, 138, 139, 148, 149, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 167, 168, 170, 171, 172, 173, 176, 179, 181, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 195, 198, 199, 200, 206, 207, 209, 213, 216, 217, 219, 220, 221, 225, 228, 229], "object": [7, 8, 9, 10, 16, 17, 18, 26, 27, 33, 36, 37, 44, 49, 51, 61, 97, 117, 135, 142, 160, 161, 177, 187, 188, 193, 197, 198, 200, 221, 225, 228], "dataclass": [7, 8, 10], "store": [7, 8, 10, 30, 43, 61, 197, 207, 215, 229], "consist": [7, 28, 207, 219, 228], "map": [7, 30, 50, 57, 60, 67, 72, 73, 81, 82, 92, 98, 178, 183, 186, 189, 190, 197, 198, 201, 207, 219], "kei": [7, 23, 69, 70, 71, 74, 81, 88, 91, 97, 102, 116, 119, 120, 126, 134, 137, 138, 148, 172, 174, 175, 178, 180, 181, 182, 190, 193, 199, 206, 209, 217, 220, 221, 225], "valu": [7, 8, 23, 25, 26, 31, 45, 49, 50, 53, 57, 67, 69, 70, 71, 74, 81, 82, 88, 91, 92, 116, 119, 120, 126, 134, 137, 138, 148, 150, 159, 172, 174, 175, 178, 181, 182, 183, 190, 193, 199, 207, 209, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225], "pair": [7, 45, 58, 60, 63, 67, 69, 70, 71, 72, 73, 91, 124, 126, 164, 173, 179, 186, 191, 212, 217], "plot_nam": 7, "plot_al": [7, 210, 212, 213, 215, 216, 217, 218, 219, 221, 224, 225], "from_run_result": 7, "creat": [7, 21, 24, 30, 32, 36, 41, 49, 50, 57, 58, 78, 82, 87, 91, 93, 97, 107, 112, 113, 130, 131, 135, 140, 200, 208, 210, 229], "identifi": [8, 9, 11, 36, 44, 63, 97, 117, 135, 151, 158, 160, 161, 163, 187, 193, 195, 207, 212, 214, 216, 217, 218, 219, 220, 221, 222, 225, 228], "uncertainti": [8, 26, 31, 45, 53, 69, 70, 71, 126, 182, 214, 216, 217, 218, 219, 220, 221, 222, 223, 225], "singl": [8, 10, 13, 16, 18, 22, 31, 45, 50, 61, 64, 79, 80, 91, 92, 97, 98, 120, 143, 148, 175, 193, 203, 207, 212, 213, 221, 229], "string": [8, 9, 11, 17, 18, 23, 26, 36, 39, 45, 74, 162, 174, 175, 180, 187, 204, 217, 229], "qubit_indic": [9, 16, 214, 216, 217, 218, 220, 222, 225], "eas": 9, "indic": [9, 21, 22, 23, 26, 27, 70, 71, 72, 73, 97, 102, 126, 181, 190, 197, 198, 200, 204, 219, 228], "wa": [9, 23, 34, 41, 70, 71, 85, 105, 162, 212, 213, 216, 228], "properti": [9, 16, 17, 19, 21], "string_identifi": [9, 212, 218, 219, 221], "version": [9, 141, 209, 212, 213, 216, 228, 229], "enough": [10, 219], "those": [10, 23, 97, 102, 189, 212, 213, 221, 228], "count": [11, 23, 31, 36, 38, 41, 42, 44, 46, 49, 50, 51, 74, 81, 82, 88, 97, 99, 136, 149, 155, 162, 167, 168, 170, 172, 175, 181, 187, 188, 195, 204, 207, 212, 214, 216, 217, 218, 219, 220, 221, 222, 223, 225], "add": [11, 17, 21, 30, 49, 59, 63, 78, 91, 97, 112, 117, 123, 130, 135, 148, 194, 207, 209, 228, 229], "job": [11, 91, 95, 97, 117, 135, 160, 161, 187, 210, 214, 215, 217, 218, 222, 223, 225], "If": [11, 27, 31, 36, 42, 50, 79, 116, 120, 123, 124, 134, 156, 162, 175, 180, 200, 206, 212, 213, 217, 219, 221, 223, 228], "same": [11, 17, 60, 134, 173, 212, 213, 218, 219, 221, 228], "alreadi": [11, 214], "present": 11, "old": 11, "both": [11, 30, 98, 156, 212, 215, 217, 222, 229], "ad": [11, 25, 207, 214, 215, 217, 218, 220, 222, 223, 225], "togeth": [11, 229], "bitstr": [11, 23, 74, 81, 82, 83, 88, 104, 162, 175, 181], "current": [11, 36, 38, 39, 41, 42, 44, 46, 50, 91, 166, 173, 219, 221, 229], "instanc": [11, 16, 17, 30, 43, 52, 53, 71, 86, 126, 207, 221], "xr": [11, 13, 21, 41, 49, 52, 53, 61, 63, 72, 73, 78, 91, 94, 97, 112, 117, 123, 130, 135, 158, 195, 210], "merg": [11, 13], "where": [11, 16, 17, 23, 31, 33, 34, 36, 46, 50, 138, 178, 200, 207, 212, 213, 219, 221, 228], "dataset_merg": 11, "recurs": 13, "minim": [13, 31, 50, 57, 59, 66, 157, 191, 219], "size": [13, 31, 37, 50, 57, 76, 78, 86, 88, 156, 191, 192, 203, 210, 212, 218, 224, 229], "dateset": 13, "fig": [14, 61, 210, 219], "show": [14, 200, 210, 212, 213, 215, 218, 219], "close": [14, 31, 210], "easili": [15, 207, 229], "interact": [15, 207], "quantum": [15, 30, 31, 32, 33, 49, 50, 52, 54, 55, 56, 57, 58, 78, 89, 91, 92, 96, 97, 98, 99, 102, 105, 107, 137, 148, 149, 153, 154, 155, 166, 167, 171, 172, 174, 176, 178, 183, 185, 193, 197, 200, 206, 207, 217, 219, 221, 226, 227, 229], "circuitgroup": [15, 16, 49, 207], "benchmarkcircuit": [15, 18, 30, 207], "circuit_group": [16, 217, 220], "group": [16, 17, 21, 72, 73, 112, 208, 212, 217, 220, 227], "purpos": [16, 17, 228], "typic": [16, 17, 212, 213], "repres": [16, 17, 23, 32, 37, 66, 67, 94, 106, 179, 181, 184, 186, 200, 228], "exampl": [16, 141, 191, 207, 208, 210, 211, 216, 219, 221, 227, 228, 229], "insid": [16, 207], "get_circuit_group_by_nam": 16, "get": [16, 29, 31, 144, 175, 177, 218, 221, 223], "desir": [16, 17, 30, 184], "doe": [16, 50, 228], "exist": [16, 18, 207, 212, 213, 229], "group_nam": [16, 217], "integ": [16, 17, 31, 33, 50, 66, 67, 97, 102, 137, 179, 186, 191], "qubit_layouts_by_index": [16, 17], "tupl": [16, 17, 21, 23, 26, 27, 30, 31, 32, 33, 36, 40, 41, 42, 45, 46, 50, 53, 57, 65, 69, 70, 71, 72, 73, 81, 82, 86, 88, 91, 92, 94, 97, 102, 106, 116, 117, 124, 126, 135, 151, 152, 153, 154, 156, 158, 160, 167, 173, 183, 184, 190, 191, 193, 197, 198, 199, 206], "qubit_layout": [16, 17, 31, 32, 33, 34, 36, 38, 40, 41, 42, 44, 49, 52, 53, 57, 59, 60, 61, 200, 212, 218, 219, 221], "qiskit_iqm": [17, 50, 207, 210, 212, 213, 216, 217, 218, 220], "iqm_circuit": 17, "iqmcircuit": [17, 32, 33, 49, 54, 55, 56, 57, 58, 91, 97, 102, 135, 137, 138, 147, 148, 152, 153, 154, 156, 160, 161, 163, 167, 171, 172, 174, 176, 178, 183, 185, 190, 193, 207], "It": [17, 116, 124, 209, 212, 213, 229], "common": [17, 146, 228], "activ": [17, 176, 185, 206, 229], "add_circuit": 17, "circuit_nam": 17, "get_circuits_by_nam": 17, "share": [17, 228, 229], "found": [17, 173, 212, 213, 219, 220, 229], "benchmark_circuit": [18, 217, 220], "get_benchmark_circuits_by_nam": [18, 217], "request": 18, "otherwis": [18, 228], "estim": [19, 21, 29, 31, 36, 40, 42, 46, 47, 49, 50, 52, 53, 63, 64, 76, 78, 92, 97, 112, 114, 117, 121, 123, 126, 130, 132, 135, 136, 162, 175, 207, 212, 213, 218, 219, 222], "comput": [19, 21, 36, 42, 49, 51, 57, 81, 82, 97, 99, 100, 101, 103, 147, 149, 155, 181, 182, 200, 205, 209, 212, 213, 217, 219, 221, 227, 228, 229], "reson": [19, 21, 207, 216, 219, 220, 222, 229], "coherencebenchmark": [20, 22, 216], "benchmark_definit": [20, 22, 29, 31, 48, 50, 62, 64, 77, 79, 90, 92, 96, 98, 110, 111, 115, 116, 122, 124, 128, 129, 133, 134, 210], "coherenceconfigur": [20, 21, 216], "backend_arg": [21, 63, 78, 91, 97, 112, 117, 119, 120, 123, 130, 135, 137, 138, 148, 152, 153, 154, 160, 161, 163, 164, 167, 172, 199], "correspond": [21, 24, 26, 32, 39, 67, 69, 70, 71, 74, 78, 87, 89, 91, 92, 93, 97, 102, 106, 107, 112, 113, 116, 117, 118, 119, 120, 123, 124, 125, 126, 130, 131, 134, 135, 136, 137, 138, 140, 148, 158, 162, 167, 174, 190, 193, 199, 201, 206, 207, 212, 213, 214, 217, 218, 219, 220, 222, 223, 225], "generate_coherence_circuit": 21, "nqubit": [21, 23], "quantumcircuit": [21, 31, 32, 33, 49, 54, 55, 56, 57, 58, 66, 78, 91, 97, 102, 117, 119, 120, 135, 138, 147, 148, 152, 153, 154, 160, 161, 167, 171, 174, 176, 178, 183, 185, 190, 193, 204, 206, 207, 209, 210, 221], "delai": [21, 22, 26, 27, 166, 216], "time": [21, 22, 23, 25, 26, 27, 30, 31, 36, 91, 94, 95, 97, 117, 135, 160, 161, 194, 207, 212, 213, 215, 218, 219, 221], "appli": [21, 22, 50, 54, 59, 67, 91, 98, 207, 218, 219, 223, 228], "add_all_meta_to_dataset": [21, 63, 78, 91, 97, 117, 123, 130, 135], "metadata": [21, 30, 49, 61, 63, 78, 91, 95, 97, 112, 117, 123, 130, 135, 188], "variabl": [21, 25, 33, 63, 78, 91, 97, 112, 117, 123, 130, 135, 151, 210, 219, 221, 229], "checkerboard_groups_from_coupl": 21, "coupling_map": [21, 60, 183, 212, 213, 217, 220], "assign": [21, 32, 91, 92, 116, 117, 124, 134, 170, 174, 206, 207, 212, 213, 215, 218], "b": [21, 151, 205, 209, 212, 228], "checkerboard": 21, "pattern": [21, 120], "infer": [21, 74, 212], "connect": [21, 50, 59, 164, 200, 207, 219], "graph": [21, 47, 57, 59, 60, 62, 63, 64, 65, 66, 68, 71, 78, 79, 80, 81, 82, 83, 85, 86, 88, 126, 179, 184, 197, 198, 199, 200, 201, 207, 212, 213, 219, 226, 227, 229], "assum": [21, 50, 61, 159, 175, 228], "grid": [21, 219], "like": [21, 25, 39, 44, 168, 209, 212, 213, 215, 229], "edg": [21, 59, 60, 65, 67, 81, 82, 83, 148, 179, 184, 186, 198, 199, 200, 207, 212, 213, 217, 219], "group_b": 21, "group_a": 21, "1000": [22, 50, 79, 98, 167, 210, 212, 213, 216, 218, 219, 221, 224, 225], "iqm_client": [22, 31, 50, 64, 79, 92, 98, 111, 116, 124, 129, 134, 216], "float": [22, 23, 25, 26, 27, 30, 31, 37, 45, 60, 69, 70, 71, 72, 73, 74, 78, 80, 81, 83, 84, 85, 86, 88, 91, 94, 95, 99, 100, 101, 102, 103, 104, 105, 106, 116, 119, 120, 126, 129, 134, 136, 137, 138, 148, 149, 150, 151, 155, 158, 162, 163, 166, 168, 172, 173, 175, 180, 181, 182, 197, 205], "optimize_sqg": [22, 50, 79, 91, 92, 98, 183, 212, 213, 216, 218, 225, 229], "true": [22, 31, 36, 50, 52, 79, 92, 97, 98, 116, 120, 158, 162, 174, 183, 209, 212, 213, 216, 217, 218, 219, 221, 222, 224, 225, 229], "qiskit_optim_level": [22, 50, 79, 92, 98, 116, 119, 120, 134, 137, 138, 183, 212, 213, 216, 217, 218, 223, 225, 229], "3": [22, 31, 50, 79, 92, 98, 105, 116, 159, 191, 209, 210, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 228, 229], "coherence_exp": [22, 23, 26, 27, 216], "t1": [22, 23, 26, 27, 207, 216], "qubits_to_plot": [22, 216], "optim": [22, 29, 31, 40, 42, 50, 91, 92, 98, 116, 119, 120, 134, 137, 138, 183, 207, 212, 213, 218, 219, 221, 224, 225, 229], "level": [22, 44, 50, 79, 92, 98, 116, 119, 120, 134, 137, 138, 207, 212, 213, 218, 219, 225], "specifi": [22, 31, 32, 33, 36, 46, 50, 65, 92, 97, 98, 116, 117, 119, 120, 124, 129, 134, 135, 137, 138, 148, 156, 160, 161, 164, 172, 175, 179, 180, 181, 189, 191, 193, 204, 207, 212, 213, 216, 217, 223, 229], "either": [22, 31, 116, 151, 156, 168, 172, 173, 181, 197, 204, 206, 209, 219, 221, 228, 229], "echo": 22, "calcul": [23, 25, 59, 80, 86, 102, 145, 171, 194, 207, 212, 213], "0": [23, 31, 49, 57, 59, 60, 78, 85, 98, 116, 119, 134, 137, 138, 148, 159, 183, 189, 191, 205, 209, 210, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 228, 229], "each": [23, 27, 36, 38, 46, 59, 61, 67, 70, 71, 86, 100, 101, 102, 106, 116, 126, 129, 134, 136, 138, 142, 159, 162, 167, 172, 173, 200, 204, 206, 214, 217, 218, 219, 221, 222, 223, 228, 229], "provid": [23, 26, 50, 84, 197, 208, 210, 211, 212, 213, 216, 217, 218, 219, 220, 228], "outcom": [23, 36, 38, 46, 167, 212, 213, 221], "being": [23, 26, 67, 69, 85, 91, 97, 102, 105, 106, 116, 119, 120, 134, 136, 137, 138, 148, 149, 155, 172, 174, 180, 181, 193, 199, 206, 212, 213], "occurr": 23, "total": [23, 50, 64, 124, 145, 209, 212, 213, 215, 219], "t": [25, 27, 71, 207, 220, 228], "c": [25, 26, 27, 209, 212, 217, 220, 228], "exponenti": [25, 31, 150, 212], "decai": [25, 26, 27, 150, 158, 207, 212], "evalu": [25, 143, 199, 212, 213], "amplitud": [25, 26, 27, 129, 150, 212, 218, 222, 229], "constant": [25, 212], "dictat": 25, "rate": [25, 212], "offset": [25, 26, 27, 129, 150, 212, 218, 222, 229], "prob": 26, "ndarrai": [26, 36, 38, 40, 42, 46, 69, 91, 150, 151, 157, 180, 203, 204, 205, 206], "fit": [26, 27, 41, 44, 129, 141, 142, 143, 145, 150, 151, 157, 158, 207, 221, 228], "probabl": [26, 27, 36, 38, 46, 100, 101, 103, 104, 116, 119, 120, 134, 137, 138, 148, 149, 155, 162, 181, 212, 213, 223, 229], "along": [26, 36, 46, 228], "were": [26, 159, 162, 195, 207], "t2_echo": [26, 27, 216], "t_fit": [26, 27], "t_fit_err": [26, 27], "backend_nam": [27, 69, 70, 72, 73, 86, 106, 214, 217, 220, 223, 225], "qubit_set": [27, 148, 151], "qubit_prob": 27, "timestamp": [27, 69, 70, 71, 72, 73, 86, 106, 126, 198, 214, 223], "qubit_to_plot": 27, "subplot": 27, "amplitude_list": 27, "involv": [27, 91, 212, 213], "p": [27, 150, 212], "differ": [27, 30, 33, 36, 49, 94, 134, 197, 212, 215, 216, 219, 221, 225, 226, 228, 229], "label": [27, 31, 32, 33, 37, 39, 50, 69, 70, 71, 74, 92, 106, 126, 129, 137, 147, 154, 158, 174, 175, 183, 189, 204, 206, 207, 209, 210, 212, 215, 219], "error": [27, 29, 31, 34, 36, 40, 41, 42, 44, 45, 50, 52, 79, 97, 98, 103, 121, 122, 124, 158, 168, 200, 207, 212, 218, 219, 221, 226, 227, 229], "specif": [27, 130, 183, 209, 211, 212, 213, 218, 221, 225, 226, 228], "logic": 27, "filenam": 27, "save": [27, 36, 37, 41, 221], "compress": [28, 29, 30, 31, 35, 43, 207, 226, 227, 229], "gst": [28, 30, 31, 36, 37, 38, 41, 42, 43, 44, 207, 226, 227], "self": [28, 30, 154, 210], "character": [28, 30, 212, 227], "process": [28, 29, 36, 98, 212, 213, 214, 217, 218, 222, 223, 225], "matric": [28, 40, 220, 221], "well": [28, 30, 42, 43], "parametr": [28, 36, 82, 89, 91, 92, 212, 213, 218, 221], "state": [28, 31, 36, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 62, 63, 64, 66, 68, 70, 71, 73, 149, 155, 174, 207, 210, 221, 226, 227, 228, 229], "povm": [28, 36, 40, 46, 221], "low": [28, 221], "rank": [28, 31, 40, 42, 207, 221], "matrix": [28, 29, 40, 69, 139, 180, 203, 205, 209, 212, 213], "reduc": [28, 31, 50, 185], "post": [28, 98, 214, 217, 218, 222, 223, 225], "overhead": 28, "tomographi": [29, 35, 64, 69, 70, 71, 72, 73, 174, 202, 206, 226, 227, 229], "follow": [29, 120, 212, 213, 217, 219, 221, 228, 229], "step": 29, "said": 29, "convers": [29, 228], "ideal": [29, 99, 136, 212, 213, 220], "numpi": [29, 38, 40, 42, 170, 204, 206, 209, 212, 213, 216, 217, 218, 221, 222], "mgst": [29, 31, 38, 45, 46, 207, 221, 228, 229], "first": [29, 31, 36, 46, 59, 78, 91, 116, 134, 219, 221, 223, 225, 226], "gaug": [29, 40, 42, 221], "target": [29, 31, 36, 42, 46, 66, 183, 221], "pygsti": [29, 36], "rerun": [29, 219], "bootstrap": [29, 31, 36, 41, 42, 64, 70, 71, 170, 207, 221], "bar": [29, 36, 41, 42, 158, 210, 215, 221], "tabl": [29, 31, 37, 40, 41, 42, 212, 221], "reconstruct": [29, 31, 36, 46, 180, 220, 221], "compressivegst": [29, 31, 221], "gstconfigur": [29, 30, 33, 221], "spam": [30, 36, 41, 44, 212], "robust": [30, 212], "generate_meas_circuit": 30, "random": [30, 31, 49, 50, 64, 69, 70, 71, 79, 91, 108, 110, 115, 116, 117, 120, 124, 128, 129, 133, 134, 138, 146, 148, 153, 154, 170, 184, 203, 204, 206, 207, 209, 213, 219, 221, 224, 226, 227, 229], "distribut": [30, 103, 104, 181, 209, 212, 213, 228], "among": [30, 120, 193, 212, 229], "depth": [30, 31, 50, 54, 55, 56, 57, 66, 79, 97, 106, 116, 117, 119, 120, 124, 134, 135, 137, 138, 150, 153, 157, 160, 162, 212, 213, 214, 217, 218, 219, 222, 223], "rang": [30, 195, 207, 209, 210, 212, 213, 214, 216, 218, 220, 221, 222, 223, 229], "l_min": 30, "l_max": 30, "seq_len_list": [30, 31], "No": 30, "than": [30, 50, 212, 213, 219, 223, 229], "need": [30, 31, 37, 49, 91, 168, 212, 213, 217, 219, 221, 229], "axactli": 30, "describ": [30, 228], "meaning": [30, 76, 78, 89, 97, 98], "untranspiled_circuit": 30, "untranspil": [30, 97, 102, 119, 120, 152, 183, 207], "circuit_gen_transp_tim": 30, "took": 30, "transpiled_circuit": [30, 161, 167, 217], "add_configuration_to_dataset": [30, 49], "sourc": [30, 221, 227, 228], "further": [30, 49, 207], "storag": [30, 49, 207], "routin": [30, 37, 49, 50, 79, 98, 151], "1024": [31, 50], "gate_set": [31, 32, 33, 221], "num_circuit": [31, 36, 46, 92, 98, 212, 213, 215, 218, 221, 225, 229], "gate_label": [31, 221], "14": [31, 209, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 229], "from_init": 31, "max_init": 31, "20": [31, 124, 209, 210, 214, 217, 218, 222], "opt_method": 31, "auto": 31, "max_iter": 31, "convergence_criteria": 31, "4": [31, 91, 159, 174, 180, 209, 210, 212, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 228, 229], "0001": [31, 210], "batch_siz": 31, "bootstrap_sampl": [31, 221], "test": [31, 207, 212, 213, 229], "parallel_execut": [31, 111, 116, 129, 212, 214, 217, 218, 222, 229], "ghzbenchmark": [31, 48, 50, 212, 213, 218, 219], "sequenc": [31, 38, 50, 64, 65, 66, 69, 79, 92, 97, 98, 111, 116, 117, 119, 120, 124, 129, 134, 135, 136, 148, 149, 152, 153, 154, 155, 160, 174, 179, 182, 183, 189, 191, 192, 198, 204, 206, 212, 214, 218, 221, 222], "e": [31, 32, 33, 36, 46, 50, 116, 129, 134, 159, 162, 174, 175, 195, 207, 212, 213, 215, 218, 219, 221, 225], "g": [31, 50, 116, 129, 134, 159, 162, 174, 184, 195, 207, 209, 212, 213, 218, 219, 221, 225], "meant": [31, 33, 50], "cirucuit": 31, "one": [31, 92, 124, 159, 162, 210, 212, 213, 219, 221, 223, 228, 229], "predefin": [31, 32, 197, 200, 219, 221], "1qxyi": [31, 221], "2qxycz": [31, 221], "2qxycz_extend": [31, 221], "3qxycz": [31, 221], "tomograph": [31, 180], "complet": 31, "mean": [31, 64, 69, 70, 71, 85, 162, 172, 200, 209, 212, 213, 221, 228], "vacuum": 31, "abl": [31, 217], "prepar": [31, 46, 49, 66, 119, 174, 203, 206, 210, 212, 219, 221, 228], "form": [31, 148, 217, 228], "frame": [31, 221], "space": [31, 162], "practic": [31, 229], "suffici": [31, 205, 219], "condit": [31, 85, 105, 205, 219, 228], "combin": [31, 39, 212, 213, 228], "local": [31, 64, 204, 206, 219], "pauli": [31, 39, 42, 74, 134, 136, 137, 138, 139, 174, 175, 180, 209, 221], "eigenst": 31, "union": [31, 168, 221, 228], "how": [31, 49, 208, 211, 221, 226, 227, 228, 229], "mani": [31, 49, 91, 207, 219], "guidelin": [31, 207], "choos": [31, 39, 50, 78, 213, 219, 228], "At": 31, "least": [31, 98, 212, 213, 221, 228], "50": [31, 64, 210, 212, 213, 217, 218, 220, 221, 222, 223, 228], "400": [31, 209, 214, 218, 220], "two": [31, 116, 120, 134, 148, 209, 210, 212, 219, 221], "6": [31, 40, 159, 209, 214, 216, 217, 218, 219, 220, 222, 223, 228, 229], "2000": [31, 213, 221], "three": [31, 212, 213], "9": [31, 209, 210, 212, 214, 215, 216, 217, 218, 219, 220, 222, 223, 228, 229], "expect": [31, 74, 81, 82, 88, 116, 119, 120, 134, 137, 138, 148, 175, 180, 207, 212], "grow": 31, "linearli": [31, 50], "krau": [31, 36, 40, 42, 46, 221], "coher": [31, 49, 50, 52, 207, 212, 213, 218, 219, 226, 227], "dim": 31, "control": [31, 37, 207, 219, 228], "maxim": [31, 58, 212, 213], "middl": 31, "cutoff": 31, "below": [31, 116, 212, 213, 219, 221, 228, 229], "possibl": [31, 50, 184, 219, 225, 228], "algorithm": [31, 46, 50, 59, 148, 200, 212, 213, 219], "point": [31, 158, 182, 219], "tri": [31, 124, 199], "limit": [31, 209, 228], "amount": [31, 47, 64, 194, 195, 207], "retri": 31, "gd": 31, "sfn": 31, "gradient": 31, "descent": 31, "saddl": 31, "free": [31, 228], "newton": 31, "respect": [31, 50, 69, 116, 119, 134, 136, 174, 199, 207, 212], "automat": [31, 41, 134, 137, 138, 217, 219, 229], "iter": [31, 168, 181], "while": [31, 166, 219, 221, 228], "second": [31, 36, 46, 89, 91, 116, 216, 226, 227], "when": [31, 98, 207, 212, 215, 219, 229], "termin": [31, 228, 229], "multipli": [31, 83], "cost": [31, 212, 213], "threshold": [31, 85, 86, 98, 105, 106, 212, 213], "nois": [31, 212], "consid": [31, 92, 98, 124, 189, 204, 216], "success": [31, 85, 105, 212, 213], "10": [31, 92, 124, 162, 199, 209, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 229], "usual": [31, 42], "sensibl": 31, "rel": 31, "between": [31, 58, 59, 138, 159, 166, 200, 212, 213, 215, 219], "consecut": [31, 50], "1e": [31, 221], "hyperparamt": 31, "converg": [31, 221], "behaviour": 31, "smaller": [31, 49, 50, 57, 212, 229], "runtim": [31, 207], "lead": [31, 207, 219, 221], "errat": 31, "jump": 31, "lack": 31, "repeat": [31, 212, 213], "fake": [31, 207], "via": [31, 49, 50, 212, 213, 219, 221], "parallel": [31, 50, 59, 67, 89, 111, 116, 120, 124, 129, 153, 160, 162, 171, 207, 212, 213, 218, 219, 222], "num_qubit": [32, 33, 53, 54, 55, 56, 58, 78, 79, 97, 136, 149, 155, 213, 216, 217, 220], "transipil": 32, "so": [32, 41, 207, 212, 213, 221], "stage": [32, 207], "mai": [32, 209, 212, 213, 215, 228], "actual": [32, 212, 213, 216], "gate_labels_dict": [32, 33], "rx_pi_2": [32, 33], "pi": [32, 33, 209, 218, 222], "rotat": [32, 33, 42, 209, 210], "around": [32, 33, 212, 213], "x": [32, 33, 36, 46, 64, 83, 143, 145, 158, 174, 175, 197, 203, 207, 209, 210, 217, 220, 221, 223, 225], "axi": [32, 33, 36, 46, 158, 207], "num_gat": [32, 33], "handl": [33, 229], "correct": [34, 106, 136, 166, 167, 207, 212, 213, 221], "properli": [34, 40, 42, 44, 212, 213], "rais": [34, 123, 124, 139, 148, 156, 164, 166, 175, 180, 183, 189, 206], "code": [35, 212, 213, 221, 227, 228, 229], "y": [36, 38, 46, 174, 175, 197, 209], "k": [36, 46, 209, 212, 213, 215, 223, 225], "rho": [36, 46, 205, 221], "target_mdl": 36, "resampl": [36, 170], "repetit": 36, "newli": 36, "sampl": [36, 49, 64, 69, 70, 71, 82, 88, 98, 104, 116, 119, 120, 123, 124, 129, 134, 136, 137, 138, 139, 148, 152, 153, 154, 170, 221], "non": [36, 41, 44, 65, 150, 212, 213, 228], "corresp": 36, "num_povm": [36, 46], "subarrai": [36, 46], "oper": [36, 42, 46, 89, 108, 163, 172, 207, 209, 219, 221, 226, 227], "enumer": [36, 46, 219, 220, 221], "3d": [36, 40, 42, 221], "cpt": [36, 46], "superoper": [36, 46, 221], "standard": [36, 37, 39, 40, 42, 46, 86, 98, 101, 110, 158, 172, 207, 221, 229], "basi": [36, 39, 42, 46, 163, 183, 209, 212, 213, 221, 228], "stack": [36, 46], "els": [36, 209, 217], "x_arrai": 36, "tensor": [36, 207], "e_arrai": 36, "rho_arrai": 36, "df_g_arrai": 36, "qualiti": [36, 41, 44, 49, 212, 213], "df_o_arrai": 36, "df": 37, "datafram": [37, 40, 41, 42, 44], "row_label": 37, "col_width": 37, "fontsiz": 37, "12": [37, 209, 214, 216, 217, 218, 220, 221, 222, 223, 225], "turn": [37, 38, 40, 41, 42, 212], "panda": [37, 40, 41, 42, 44], "file": [37, 207, 228, 229], "row": 37, "cell": [37, 212, 213], "width": [37, 207, 212, 213, 219], "font": [37, 220], "text": [37, 212, 213, 221, 228], "obtain": [38, 209, 212, 213, 228, 229], "format": [38, 40, 41, 42, 44, 45, 212, 228], "2d": [38, 40], "j": [38, 209, 212, 213, 219, 221], "column": 38, "pdim": 39, "dimens": [39, 210, 221], "ii": [39, 209, 210, 228], "ix": 39, "xx": 39, "df_g": [40, 42, 44], "x_opt": [40, 42], "e_opt": 40, "rho_opt": 40, "max_ev": 40, "arbitrari": [40, 124], "them": [40, 42, 59, 67, 210, 229], "after": [40, 42, 153, 229], "conta": 40, "element": [40, 78], "densiti": [40, 69, 116, 119, 120, 134, 137, 138, 148, 158, 180, 205, 212, 213, 220], "optmiz": 40, "eigenvalu": 40, "choi": 40, "df_g_evals_fin": 40, "fig_g": [40, 42], "fidel": [40, 42, 49, 50, 51, 52, 53, 59, 60, 61, 92, 108, 109, 112, 114, 117, 121, 123, 124, 126, 127, 130, 132, 135, 136, 151, 158, 173, 199, 200, 207, 221, 226, 227, 229], "etc": [40, 42, 215], "fig_choi": 40, "df_g_final": [40, 42], "df_o": [41, 44], "also": [41, 42, 168, 207, 217, 219, 221, 225, 228, 229], "metric": [41, 42, 92, 212, 213, 221, 222], "df_o_fin": 41, "k_target": [42, 46], "includ": [42, 86, 94, 170, 198, 207, 212, 213, 215, 218, 219, 228], "hamiltonian": [42, 124, 184, 199, 207, 221], "diamond": [42, 221], "distanc": [42, 50, 59, 221], "4d": 42, "df_g_rotat": 42, "fig_rot": 42, "convert": [44, 45, 139, 201, 209], "high": [44, 50, 212, 213, 219], "simpl": [44, 210, 212, 229], "observation_list": 44, "result_str": 45, "err": 45, "interv": 45, "floar": 45, "wrapper": [46, 49], "alg": 46, "x_target": 46, "e_target": 46, "rho_target": 46, "ghz": [47, 207, 226, 227, 229], "verifi": [47, 163, 209], "greenberg": [47, 49, 212, 213, 226, 227], "horn": [47, 49, 212, 213, 226, 227], "zeiling": [47, 49, 212, 213, 226, 227], "bipartit": [47, 63, 207, 226, 227, 229], "nativ": [47, 49, 60, 63, 66, 120, 123, 153, 154, 156, 163, 172, 174, 204, 206, 207, 212], "ghzconfigur": [48, 49, 212, 213, 218, 219], "generate_native_ghz": 49, "qubit_count": [49, 50], "topologi": [49, 173, 183, 185, 189, 197, 200, 207, 212], "subset": [49, 52, 53, 57, 59, 60, 67], "system": [49, 50, 52, 53, 57, 59, 60, 156, 166, 212, 213, 221, 228, 229], "protocol": [49, 52, 53, 57, 59, 60, 212, 213, 226], "equal": [49, 57, 97, 207, 212, 213], "generate_coherence_meas_circuit": 49, "take": [49, 50, 183, 194, 207, 212, 213, 221, 229], "output": [49, 75, 99, 100, 101, 102, 103, 104, 105, 159, 166, 191, 207, 209, 212, 213, 217, 221, 225, 229], "mult": 49, "q": [49, 76, 78, 79, 85, 116, 218, 221, 226, 227, 229], "qc_list_transpil": 49, "append_rm": 49, "num_rm": [49, 50, 219], "append": [49, 91, 206, 209, 210, 221], "1q": [49, 116, 119, 120, 134, 137, 138, 148, 156, 204, 206, 207, 212], "clifford": [49, 109, 110, 111, 112, 113, 116, 119, 120, 128, 129, 130, 134, 137, 138, 147, 148, 152, 153, 154, 156, 163, 164, 204, 206, 207, 208, 217, 222, 226, 227, 229], "uniformli": [49, 116, 119, 120, 134, 137, 138, 148, 212], "param": [49, 54, 55, 56, 58, 91, 100, 112, 130, 139, 143, 145, 147, 149, 160, 161, 164, 181, 187, 188, 205], "origin": [49, 65, 97, 102, 170, 183, 185, 228], "generate_readout_circuit": 49, "creation": [49, 219], "all_circuits_list": 49, "state_generation_routin": [50, 212, 213, 218, 219], "tree": [50, 57, 59, 212, 218, 219], "custom_qubits_arrai": [50, 78, 79, 98, 124, 207, 212, 213, 217, 218, 219, 224, 225, 229], "fidelity_routin": [50, 212, 213, 218, 219], "100": [50, 64, 92, 98, 170, 212, 213, 215, 216, 217, 218, 220, 221, 224, 229], "rem": [50, 52, 79, 98, 106, 167, 207, 212, 213, 218, 219, 224, 225, 229], "mit_shot": [50, 79, 97, 98, 167, 212, 213, 218, 219, 224, 225, 229], "cal_url": [50, 173, 200, 217, 219], "log": [50, 55, 56, 57, 59, 219], "coupl": [50, 57, 60, 67, 92, 98, 173, 183, 186, 189, 198, 201, 212, 219], "cz": [50, 58, 59, 60, 120, 153, 172, 173, 183, 204, 206, 209, 212, 219], "account": [50, 79, 183, 221, 229], "span": [50, 57, 59], "largest": [50, 212, 213, 219], "weight": [50, 59, 60, 104], "applic": [50, 59, 148, 209, 219, 228], "cx": [50, 54, 59, 91], "scale": [50, 212, 213], "logarithm": [50, 219], "naiv": [50, 79, 219], "textbook": [50, 219], "NOT": 50, "support": [50, 60, 228], "denot": 50, "here": [50, 136, 210, 212, 213, 221], "ha": [50, 79, 159, 212, 213, 214, 221, 223, 228, 229], "small": [50, 207], "architectur": 50, "iqm_transpil": 50, "optimize_single_qubit_g": 50, "multipl": [50, 52, 64, 120, 141, 207, 212, 213, 219], "moonei": [50, 52, 212, 213, 219], "2021": [50, 52, 212, 213, 219, 229], "randomized_measur": [50, 219], "outlin": 50, "http": [50, 53, 55, 56, 141, 182, 209, 210, 216, 217, 218, 219, 220, 221, 228, 229], "arxiv": [50, 53, 55, 56, 92, 120, 148, 209, 219, 229], "org": [50, 53, 55, 56, 209, 219, 221, 228], "ab": [50, 53, 55, 56, 209, 219, 220], "1812": [50, 53], "02624": [50, 53], "chosen": [50, 79, 212, 213, 219, 221], "readout": [50, 52, 79, 97, 98, 103, 165, 166, 168, 207, 218, 219], "mitig": [50, 52, 79, 97, 98, 103, 165, 166, 167, 168, 207, 218, 219], "url": [50, 124, 173, 199, 200, 212, 213, 217, 229], "retriev": [50, 91, 95, 124, 187, 188, 195, 199, 200, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225], "priorit": 50, "ideal_prob": 53, "cross": [53, 212, 213, 228], "correl": [53, 219], "rm": [53, 206], "eq": [53, 209], "34": [53, 210, 214, 217, 218, 220, 225], "hadamard": [54, 209], "seri": 54, "linear": [54, 124, 198, 217], "fashion": 54, "symmetr": 54, "halv": 54, "1807": [55, 219], "05572": [55, 219], "2101": [56, 219], "08946": [56, 219], "n_state": [57, 212], "networkx": [57, 59, 60, 78, 80, 81, 82, 83, 184, 201, 212, 213], "n": [57, 79, 112, 135, 180, 184, 199, 203, 209, 212, 213, 217, 219, 220], "participating_qubit": 57, "qc": [57, 91, 174, 176, 206, 209, 210, 229], "move": [58, 207], "cx_map": 59, "particip": 59, "2qb": 59, "subgraph": 59, "Then": [59, 229], "find": [59, 65, 124, 212, 213, 219], "most": [59, 221], "central": 59, "posit": [59, 197, 200], "next": 59, "start": [59, 78, 159, 212, 218, 219, 221, 229], "smallest": 59, "layer": [59, 67, 80, 84, 88, 89, 91, 92, 97, 114, 116, 117, 119, 120, 121, 122, 123, 124, 126, 132, 134, 135, 137, 138, 148, 160, 171, 198, 207, 218, 226, 227, 229], "couplingmap": [60, 67, 71, 126, 186, 189, 198, 201], "edges_c": 60, "fidelities_c": 60, "have": [60, 153, 175, 212, 213, 228, 229], "wai": [60, 173, 207, 212, 213], "v": [61, 86, 91, 93, 212, 213, 218, 222], "user": [61, 215, 217, 220, 229], "identif": [61, 228], "graphstatebenchmark": [62, 64, 220], "graphstateconfigur": [62, 63, 220], "entangel": 63, "neg": [63, 69, 70, 71, 72, 73, 205, 207], "add_all_circuits_to_dataset": [63, 97, 112, 130], "generate_all_circuit_info_for_graph_state_benchmark": 63, "associ": [63, 104, 218, 228], "disjoint": [63, 124, 191, 198, 217], "neighbor": [63, 65, 69, 72, 73, 179, 220], "project": [63, 69, 74, 104, 229], "node": [63, 65, 67, 79, 81, 82, 86, 88, 179, 184, 197, 200, 212, 213, 219, 224], "cover": 63, "state_tomographi": [64, 69, 70, 71, 220], "shadow_tomographi": [64, 69, 70, 71], "num_bootstrap": [64, 70, 71, 220], "n_random_unitari": [64, 220], "n_median_of_mean": [64, 220], "shadow": [64, 70, 71, 72, 202, 204, 206], "haar": [64, 203, 204, 206], "unitari": [64, 203, 204, 206, 212, 213, 221], "over": [64, 105, 166, 181, 212], "median": [64, 69, 70, 71, 182, 212, 213], "nb": [64, 175, 205, 212, 214, 215, 218], "call": [64, 166, 207], "factor": [64, 215], "overlap": [65, 67, 207], "cp_map": [67, 186], "sort": [67, 159, 190, 217, 223, 225], "arrang": 67, "item": [67, 212, 220], "2q": [67, 116, 119, 120, 121, 123, 124, 137, 138, 148, 156, 158, 199, 212, 218], "qubit_pair": 69, "num_rm_sampl": [69, 70, 71], "num_moms_sampl": [69, 70, 71], "np": [69, 91, 150, 157, 180, 203, 204, 205, 206, 209, 212, 213, 216, 217, 218, 219, 220, 221, 222], "gather": 69, "qubit_nam": [70, 71, 126, 198, 217, 220], "num_shot": [70, 71, 92, 212, 213, 215, 218], "max": [70, 71, 79, 191, 212, 213, 220, 229], "backend_coupling_map": [71, 126, 198, 201, 217], "station": [71, 124, 126, 198, 200, 207, 210, 217, 219, 229], "won": 71, "displai": [71, 207, 209, 212, 213, 214, 217, 218, 221, 222, 228], "titl": [71, 158, 228], "all_qubit_pairs_per_group": [72, 73], "all_qubit_neighbors_per_group": [72, 73], "all_unprojected_qubit": [72, 73, 220], "execution_timestamp": [72, 73, 214, 217, 220, 223, 225], "experiment": [72, 73], "unproject": [72, 73], "pauli_expect": [74, 180], "projected_count": 74, "nonid_pauli_label": 74, "helper": [74, 159], "outermost": [74, 172], "innermost": 74, "ident": [74, 209], "z": [74, 175, 183], "instead": [74, 207, 229], "logger": [75, 194], "everi": 75, "warn": [75, 209, 212, 213, 216, 217, 220], "score": [76, 78, 79, 85, 218, 226, 227, 229], "combinatori": [76, 78, 212, 213], "problem": [76, 78, 80, 81, 82, 83, 85, 86, 212, 213, 229], "qscorebenchmark": [77, 79, 212, 213, 218, 224], "qscoreconfigur": [77, 78, 212, 213, 218, 224], "generate_maxcut_ansatz": 78, "theta": 78, "ansatz": [78, 80, 82, 84, 88], "qaoa": [78, 79, 80, 84, 88], "maxcut": [78, 80, 81, 82, 83, 84, 88, 212, 213, 218], "end": [78, 91, 97, 209, 228], "variat": [78, 212, 213], "gamma": [78, 80], "beta": [78, 80, 85, 86, 212, 213, 218], "choose_qubits_na": 78, "sequenti": [78, 116, 161, 214, 218], "choose_qubits_custom": 78, "match": [78, 219], "num_inst": [79, 86, 212, 213, 218, 224], "num_qaoa_lay": [79, 212, 213, 218, 224], "min_num_nod": [79, 212, 213, 218, 224], "max_num_nod": [79, 212, 213, 218, 224], "use_virtual_nod": [79, 86, 212, 213, 218, 224], "use_classically_optimized_angl": [79, 86, 212, 213, 218, 224], "choose_qubits_routin": [79, 98, 212, 213, 218, 224, 225, 229], "min_num_qubit": 79, "seed": [79, 212, 213, 218, 224], "min": [79, 166, 212, 213], "taken": [79, 212, 213], "increas": [79, 159, 174, 221], "potenti": 79, "pre": 79, "optimis": 79, "tune": 79, "minumum": 79, "virtual_nod": [79, 81, 82, 88], "upon": [79, 92, 98], "angl": [80, 84, 86, 88], "qubit_to_nod": [81, 82], "val": 81, "virtual": [81, 82, 86, 88, 183], "cut": [81, 82, 83, 88, 212, 213], "avg": [81, 218, 221], "callabl": [82, 151, 157], "minu": [83, 124], "sign": 83, "solut": [83, 212, 213], "obj": 83, "num_lay": 84, "approximation_ratio": 85, "approxim": [85, 86, 212, 213, 218], "ratio": [85, 86, 212, 213, 218], "abov": [85, 105, 212, 213, 221, 228], "beta_ratio": 86, "beta_std": 86, "deviat": [86, 98, 101, 158, 172], "classic": [86, 88, 97, 174, 175, 178, 206], "graph_phys": 88, "qubit_nod": 88, "use_classical_angl": 88, "qaoa_lay": 88, "solv": [88, 212, 213], "averag": [88, 100, 105, 106, 112, 130, 132, 136, 151, 207, 212, 213, 221], "presenc": 88, "volum": [89, 96, 97, 98, 107, 207, 226, 227, 229], "reflect": [89, 91, 97, 108, 109, 127], "deepest": [89, 97], "clop": [89, 207, 226, 227, 229], "speed": [89, 91, 212, 213], "clops_v": [89, 218], "qv": [89, 91, 92, 97, 98, 100, 101, 105, 106, 207, 212, 213, 218, 226, 227], "clops_h": [89, 92, 218], "squar": [89, 212, 213, 221], "clopsbenchmark": [90, 92, 212, 213, 215, 218], "clopsconfigur": [90, 91, 212, 213, 215, 218], "h": [91, 93], "append_parameterized_unitari": 91, "q0": 91, "q1": 91, "decompos": [91, 212], "su": 91, "belong": [91, 120, 162], "generate_single_circuit": [91, 97], "generate_circuit_list": [91, 97], "generate_random_paramet": 91, "templat": [91, 212, 213, 215, 218], "float64": 91, "assign_random_parameters_to_al": 91, "dict_parametrized_circ": 91, "clops_cycl": 91, "sorted_transpiled_qc_list": [91, 97, 193], "cycl": 91, "elaps": [91, 94, 95, 194, 215, 218], "submiss": [91, 97, 117, 135, 160, 161, 212, 213, 215, 228], "generate_transpiled_clops_templ": 91, "num_upd": [92, 212, 213, 215, 218], "clops_h_bool": [92, 218], "establish": [92, 218], "By": [92, 215, 218], "definit": [92, 212, 213, 215, 218, 228], "2110": [92, 229], "14108": [92, 229], "quant": [92, 148, 229], "ph": [92, 148, 229], "rigor": [92, 221], "loos": 92, "www": [92, 209, 228], "ibm": [92, 166], "com": [92, 182, 216, 217, 219, 220], "blog": 92, "restrict": [92, 98, 189, 218, 225], "clops_data": 94, "job_meta": 95, "quantumvolumebenchmark": [96, 98, 212, 213, 218, 225], "quantumvolumeconfigur": [96, 97, 212, 213, 218, 225, 229], "classical_permut": 97, "permut": 97, "avoid": 97, "swap": [97, 209], "get_rem_quasidistro": 97, "sorted_qc_list_indic": [97, 102], "execution_result": [97, 99], "quasicollect": [97, 103, 167], "quasiprob": [97, 103, 167, 168], "qubii": 97, "submit_single_qv_job": 97, "submit": [97, 117, 135, 160, 161, 193, 214, 215, 217, 218, 219, 220, 221, 222, 223, 225, 228], "organ": [97, 193], "vanilla": [97, 106, 135, 160, 161], "dd": [97, 106, 135, 160, 161], "num_sigma": [98, 105, 106, 212, 213, 218, 225, 229], "criteria": [98, 123], "consensu": 98, "unmitig": 98, "1_000": [98, 212, 213, 218, 225, 229], "ideal_heavy_output": [99, 103], "hop": [99, 100, 101, 105, 106, 207], "heavi": [99, 100, 101, 102, 103, 104, 105, 212, 213], "cumul": [100, 101], "individu": [100, 101, 158, 204, 207, 212, 219, 221, 228, 229], "trial": [100, 101], "qc_list": [102, 183], "bitrstr": 102, "all_rem_quasidistro": 103, "noiseless": [103, 218, 220, 225], "onto": 104, "heavy_output_prob": [105, 225], "within": [105, 198, 228, 229], "sigma": [105, 106], "qv_result": [106, 212, 213, 225], "qv_results_typ": [106, 225], "in_volumetr": 106, "plot_rem": 106, "come": [106, 136, 168, 175], "context": 106, "volumetr": 106, "rb": [109, 111, 112, 113, 114, 116, 117, 118, 119, 127, 129, 130, 131, 132, 134, 135, 149, 150, 151, 153, 155, 157, 158, 161, 162, 164, 207, 209, 212, 214, 217, 218, 222], "cliffordrandomizedbenchmark": [110, 111, 212, 214, 218], "cliffordrbconfigur": [110, 112, 212, 214, 218], "qubits_arrai": [111, 116, 120, 129, 134, 153, 158, 160, 162, 164, 212, 214, 217, 218, 222, 223, 229], "sequence_length": [111, 129, 152, 153, 212, 214, 218, 222, 229], "num_circuit_sampl": [111, 116, 120, 129, 134, 152, 212, 214, 217, 218, 222, 223, 229], "length": [111, 124, 129, 136, 139, 152, 153, 154, 209, 212, 214, 218, 222], "add_all_metadata_to_dataset": 112, "direct": [114, 115, 116, 117, 118, 119, 217, 228], "canon": [114, 117, 119, 120, 135, 137, 138, 160], "directrandomizedbenchmark": [115, 116], "directrbconfigur": [115, 117], "is_eplg": [116, 120, 158, 198, 217], "two_qubit_gate_ensembl": [116, 119, 134, 137, 138, 148, 217, 218, 223, 229], "densities_2q_g": [116, 217], "clifford_sqg_prob": [116, 119, 134, 137, 138, 148, 217], "sqg_gate_ensembl": [116, 119, 134, 137, 138, 148, 217], "drb": [116, 117, 118, 119, 120, 123, 124, 125], "regist": [116, 159, 162, 174, 175, 206], "case": [116, 212, 213], "done": [116, 207, 209, 215], "eplg": [116, 120, 158, 198, 207, 226, 227], "subroutin": 116, "overrid": 116, "czgate": [116, 129, 134, 209, 212, 218, 221, 222, 223, 229], "5": [116, 159, 209, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 228, 229], "igat": 116, "mrb": [116, 117, 134, 135, 137, 140, 151, 158, 160, 161, 207, 218, 226, 227], "ensembl": [116, 120, 132, 134, 135, 148, 158, 203], "cxgate": [116, 134], "len": [116, 134, 209, 212, 213, 221], "25": [116, 119, 134, 137, 138, 148, 212, 214, 217, 218, 220, 222, 223, 225, 229], "leav": 116, "uniform": 116, "assign_inputs_to_qubit": 117, "submit_single_drb_job": 117, "sorted_transpiled_circuit_dict": [117, 135, 160], "circ_sampl": [119, 137, 217], "density_2q_g": [119, 134, 137, 138, 148, 218, 223, 229], "stabil": [119, 134, 137, 138, 147, 154, 207], "randomli": 119, "assigned_density_2q_g": 120, "assigned_two_qubit_gate_ensembl": 120, "assigned_clifford_sqg_prob": 120, "assigned_sqg_gate_ensembl": 120, "cliffords_1q": [120, 153, 204, 206], "cliffords_2q": [120, 153], "barrier": [120, 172, 209, 210], "taylor": 120, "2311": [120, 229], "05933": [120, 229], "interleav": [120, 127, 128, 129, 130, 131, 134, 138, 150, 151, 152, 153, 154, 158, 207, 214, 226, 227, 229], "invers": [120, 147, 212], "term": [120, 153, 175, 204, 206, 209, 221, 228], "r": [120, 153, 172, 183, 204, 206, 209, 220, 221], "simultan": [120, 129, 151], "eplgbenchmark": [122, 124, 217], "eplgconfigur": [122, 123, 217], "validate_custom_qubits_arrai": 123, "validate_random_chain_input": 123, "chain": [123, 124, 198, 217], "valueerror": [123, 139, 148, 156, 164, 175, 180, 183, 189, 206], "beyond": 123, "drb_depth": [124, 217], "drb_circuit_sampl": [124, 217], "chain_length": [124, 217], "chain_path_sampl": [124, 217], "num_disjoint_lay": [124, 217], "max_hamiltonian_path_tri": [124, 217], "calibration_url": [124, 217], "proce": 124, "highest": [124, 220], "path": [124, 166, 184, 199], "must": [124, 197, 212, 213, 228, 229], "eplg_estim": 126, "interleavedrandomizedbenchmark": [128, 129, 212, 218, 222], "interleavedrbconfigur": [128, 130, 212, 218, 222, 229], "interleaved_g": [129, 152, 153, 154, 158, 212, 218, 222, 229], "interleaved_gate_param": [129, 212, 218, 222, 229], "simultaneous_fit": [129, 212, 218, 222, 229], "irb": [129, 151, 207, 226, 227], "ygate": 129, "enter": [129, 151, 153], "mirror": [132, 133, 134, 135, 138, 207, 226, 227, 229], "mirrorrandomizedbenchmark": [133, 134, 218, 223, 229], "mirrorrbconfigur": [133, 135, 218, 223, 229], "depths_arrai": [134, 218, 223, 229], "num_pauli_sampl": [134, 136, 139, 218, 223, 229], "simulation_method": [134, 137, 138], "statevector": [134, 137, 138], "extended_stabil": [134, 137, 138], "matrix_product_st": [134, 137, 138], "aer": [134, 137, 138], "simul": [134, 136, 137, 138, 166, 207, 218, 223, 225], "submit_single_mrb_job": 135, "noisy_count": 136, "ideal_count": 136, "num_circ_sampl": [136, 139, 154], "polar": [136, 151], "noisi": 136, "rescal": 136, "few": [136, 212, 213, 219], "effect": [136, 159, 212, 213], "real": [136, 229], "pauli_samples_per_circ": [137, 138], "dress": [137, 138, 139], "input_list": 139, "flat": 139, "shape": 139, "lmfit": [141, 142, 151], "extend": [141, 207], "shown": [141, 212, 213, 219, 220, 221], "document": [141, 193, 212, 213, 228, 229], "github": [141, 229], "io": 141, "py": [141, 216, 217, 220, 229], "example_fit_multi_dataset": 141, "html": [141, 182, 229], "sphx": 141, "glr": 141, "multi": [141, 212, 213], "func": [142, 143, 144, 145, 151, 157], "initial_guess": 142, "constraint": [142, 229], "simultaneously_fit_var": 142, "line": 142, "signatur": 144, "residu": 145, "sever": [145, 207, 212, 213, 215], "techniqu": 146, "qc_inv": 147, "clifford_dictionari": 147, "invert": 147, "de": [147, 154], "n_layer": 148, "grab": [148, 166], "see": [148, 193, 207, 209, 212, 219, 221, 228], "2204": 148, "07568": 148, "subsequ": [148, 228], "do": [148, 166, 222, 228], "up": [148, 212, 229], "uniti": 148, "ground": [149, 155, 210], "depolarization_prob": 150, "depolar": 150, "rb_identifi": 151, "simultaneous_fit_var": 151, "interleaved_gate_str": 151, "0th": 151, "ap": [151, 221], "m": [151, 212, 213, 214, 218, 220, 222, 223, 229], "stdrb": 151, "clifford_dict": [152, 154], "fir": 152, "num_sampl": [153, 154], "befor": [153, 212], "seq_length": 154, "system_s": 156, "import": [156, 207, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 228, 229], "load": [156, 214, 215], "1q_dict": 156, "2q_dict": 156, "fit_paramet": 157, "fit_data": 157, "minimizerresult": 157, "violin": 158, "scatter": 158, "shade_stdev": 158, "shade_meanerror": 158, "logscal": 158, "mrb_2q_densiti": 158, "mrb_2q_ensembl": 158, "shade": 158, "arr": 159, "separate_regist": [159, 162], "reversed_arr": 159, "relabel": 159, "increasingli": 159, "zero": [159, 207, 212, 213], "7": [159, 209, 212, 214, 216, 217, 218, 219, 220, 222, 223, 228, 229], "note": [159, 168, 205, 207, 219, 221, 229], "clbit": [159, 162], "separ": [159, 162, 166, 207, 225, 228], "skip": 159, "sublist": 159, "revers": [159, 217], "circuit_compilation_opt": [161, 193], "circuitcompilationopt": [161, 193], "compil": [161, 193, 207, 212, 215, 221, 228], "submit_execut": 161, "margin": [162, 166, 181], "surviv": [162, 212], "bit": [162, 178, 181, 204], "00": [162, 212, 213, 217, 218, 219, 220, 221, 223, 225], "anoth": [162, 210], "gate_id": 163, "gate_param": 163, "m3": [165, 166, 167], "modif": [165, 228], "qpu": [165, 207, 212, 216], "m3iqm": [165, 168], "mthree": [165, 168], "m3mitig": [165, 166], "iter_threshold": 166, "4096": 166, "modifi": [166, 207, 212, 213, 228], "work": [166, 168, 207, 212, 213, 228, 229], "devic": [166, 207, 212, 213, 227, 229], "cals_from_system": 166, "initial_reset": 166, "rep_delai": 166, "cals_fil": 166, "async_c": 166, "cal_id": 166, "array_lik": 166, "1e4": 166, "max_shot": 166, "balanc": 166, "hardwar": [166, 215, 227], "independ": [166, 212], "reset": 166, "begin": [166, 209], "json": [166, 221], "async": 166, "thread": 166, "m3error": 166, "progress": 166, "against": [167, 228], "mit": [168, 228], "processor": [168, 207, 212, 213], "argument": [168, 207, 219, 229], "util": [168, 196, 202, 207, 219, 220], "final_measurement_map": 168, "qubit_name_to_index": 168, "quasiprobabilti": 168, "we": [168, 210, 212, 213, 217, 221, 228], "could": 168, "would": [168, 220], "out": [168, 228], "box": 168, "u": 168, "sinc": [168, 212, 213, 215, 221], "annot": [168, 228], "original_count": 170, "num_bootstrap_sampl": 170, "rgen": 170, "include_original_count": 170, "default_rng": 170, "circuit_list": 171, "transpiled_qc_list": 172, "under": [173, 207, 209, 212, 221, 228], "list_fid": 173, "list_coupl": 173, "chip": [173, 197, 200], "star": [173, 183, 189, 197, 207, 211, 212, 219, 227], "crystal": [173, 197, 207], "active_qubit": [174, 206], "measure_oth": [174, 206], "measure_other_nam": [174, 206], "tomograhi": 174, "xy": 174, "pauli_label": 175, "charact": [175, 228], "extract": [176, 178, 195, 212, 229], "backend_label": 177, "prob_dist_or_count": 181, "prob_dist": 181, "propag": 182, "refer": [182, 198, 212, 213, 215, 221, 227, 229], "mathworld": 182, "wolfram": 182, "statisticalmedian": 182, "basis_g": 183, "drop_final_rz": 183, "optimization_level": [183, 210, 212], "sqg": [183, 218, 219, 225], "drop": 183, "rz": 183, "emploi": 183, "vertic": [184, 186, 199], "empti": 184, "backend_topologi": 185, "backend_num_qubit": [185, 198, 217], "remov": [186, 207], "duplic": 186, "iqm_job": [187, 188], "iqmjob": [187, 188, 193], "relev": 188, "transpiled_circuit_list": 190, "sorted_indic": [190, 220], "sorted_circuit": 190, "split": [191, 192, 217, 229], "13": [191, 209, 214, 216, 217, 218, 219, 220, 222, 223, 229], "17": [191, 209, 214, 215, 217, 218, 219, 220, 222, 223, 225, 229], "18": [191, 209, 214, 215, 217, 218, 219, 220, 222, 223, 229], "todo": 191, "pylint": 191, "disabl": 191, "fixm": 191, "sequence_in": 192, "split_siz": 192, "chunk": 192, "normal": [193, 228], "sent": [193, 228], "manag": [193, 228, 229], "abil": 193, "f": [194, 209, 210, 212, 213, 216, 217, 218, 219, 220, 221], "decor": 194, "statement": [194, 228], "counts_rang": 195, "visual": [196, 200, 207, 212, 219], "graphposit": 196, "variou": [197, 226], "garnet_posit": 197, "garnet": [197, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 229], "deneb_posit": 197, "deneb": [197, 207, 214, 215, 218, 222, 223, 224, 225], "predefined_st": 197, "create_posit": 197, "pygraph": 197, "coordin": [197, 210], "edge_list": 198, "disjoint_lay": [198, 217], "draw": [198, 209, 212, 213, 217, 220], "respectv": 198, "path_sampl": 199, "max_tri": 199, "product": [199, 209, 228], "address": 199, "thick": [200, 207], "thinner": [200, 219], "better": [200, 219], "highlight": 200, "orang": [200, 219], "rustworkx": [201, 207], "random_gen": 203, "randomst": 203, "drawn": 203, "circuilar": 203, "unitary_arg": 204, "subsystem_bit_indic": 204, "clifford_or_haar": [204, 206], "initialis": [204, 206], "subsystem": [204, 205], "na": 205, "entangl": [205, 207, 212, 213, 218, 219, 226, 227, 229], "For": [205, 216, 219, 221, 228, 229], "more": [205, 207, 212, 213, 228, 229], "mere": [205, 228], "nu": 206, "compos": [206, 209], "benchmark": [207, 208, 209, 211, 216, 220, 221, 224, 225, 226], "t2": 207, "improv": [207, 228], "qscore": [207, 212, 213], "deprec": 207, "colormap": 207, "usag": 207, "optimise_single_qubit_g": 207, "relax": 207, "numba": 207, "depend": [207, 215, 219, 221, 227], "easier": [207, 228], "interoper": 207, "client": [207, 216], "iqm": [207, 208, 209, 210, 211, 216, 219, 220, 221, 222, 226, 228], "ensur": [207, 212], "bug": 207, "incorrect": 207, "jupyt": 207, "tutori": 207, "report": [207, 212, 215], "explicit": 207, "offlin": [207, 215], "spent": [207, 215], "header": 207, "example_graphst": [207, 220], "notebook": [207, 210, 212, 213, 221, 226, 227], "page": [207, 227, 228], "render": [207, 229], "wrong": 207, "aid": 207, "don": [207, 228], "bottom": 207, "top": 207, "instal": [207, 212, 221, 227], "command": [207, 229], "develop": [207, 209, 227], "mode": [207, 209, 229], "folder": [207, 228, 229], "doc": [207, 229], "spark": [207, 211, 227], "compat": 207, "adapt": [207, 229], "behavior": 207, "publish": 207, "ci": 207, "secur": [207, 229], "scan": [207, 229], "lockfil": [207, 229], "relat": [207, 212, 215], "modulenotfounderror": 207, "pyrit": [207, 224], "about": [207, 219], "revert": 207, "ones": [207, 212, 213, 229], "now": [207, 214, 218, 219, 220, 221, 222], "port": 207, "subclass": 207, "place": [207, 228], "miscellan": 207, "api": [207, 217, 219, 227, 229], "build": [207, 229], "overwrit": 207, "minor": 207, "longer": [207, 212], "renam": 207, "rebas": 207, "randomizedbenchmark": 207, "quantumvolum": 207, "serial": 207, "some": [207, 212, 213, 219], "available_benchmark": 207, "__init__": 207, "public": 207, "hint": 207, "docstr": 207, "messag": 207, "prevent": 207, "exclus": [207, 228], "section": [208, 211, 226, 228], "guidanc": [208, 211], "packag": [208, 212, 216, 217, 220, 226, 229], "your": [208, 212, 213, 215, 216, 227, 228, 229], "own": [208, 227, 228, 229], "decomposit": [208, 227], "1402": 209, "4848": 209, "copyright": [209, 228], "2024": [209, 214, 228], "licens": [209, 227], "apach": [209, 228], "you": [209, 212, 213, 216, 217, 222, 228, 229], "except": [209, 210, 228], "complianc": [209, 228], "unless": [209, 228], "law": [209, 228], "agre": [209, 228], "softwar": [209, 228], "AS": [209, 228], "without": [209, 212, 213, 215, 219, 228], "warranti": [209, 228], "OR": [209, 228], "OF": [209, 228], "kind": [209, 228], "express": [209, 228], "impli": [209, 228], "languag": [209, 228], "govern": [209, 228], "permiss": [209, 228], "quantum_info": 209, "qi": 209, "c0": 209, "_": [209, 212, 219, 221], "24": [209, 214, 217, 218, 221, 222], "half": 209, "x2": 209, "to_gat": 209, "y2": 209, "x2m": 209, "y2m": 209, "inplac": 209, "2pi": 209, "11": [209, 210, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 229], "15": [209, 212, 214, 215, 216, 217, 218, 220, 222, 223], "16": [209, 214, 217, 218, 219, 220, 221, 222, 223, 225], "19": [209, 215, 216, 217, 218, 219, 220, 221, 222, 223], "21": [209, 217, 218, 219, 220, 222], "22": [209, 217, 218, 220, 221, 222, 223], "23": [209, 214, 217, 218, 219, 222, 223, 225], "clifford_sqg": 209, "s1": 209, "s1x2": 209, "s1y2": 209, "displaystyl": 209, "sum_": [209, 221], "prime": 209, "left": 209, "mathrm": [209, 212, 213, 219], "tr": [209, 221], "u_": 209, "dagger": [209, 212, 221], "u_k": 209, "right": [209, 228], "s2": 209, "satisfi": [209, 216, 221], "c_kei": 209, "aux": 209, "total_triangl": 209, "c1": 209, "adjoint": 209, "c2": 209, "c3": 209, "to_matrix": 209, "trace": [209, 221], "print": [209, 212, 215, 217, 218, 219, 220, 221, 223, 225, 228], "0f": 209, "diagon": [209, 212, 213], "nsum": 209, "sum": 209, "clifford_2qg": 209, "c2q_0": 209, "c2q": 209, "counter": 209, "to_label": 209, "sqg_class_": 209, "cnot": [209, 219], "sy2": 209, "cnot_class_": 209, "iswap": 209, "sy1": 209, "sx2": 209, "i_swap_class_": 209, "swap_class_": 209, "clifford_1qg": 209, "open": 209, "clifford_1q": 209, "pkl": 209, "wb": 209, "clifford_2q": 209, "loaded_dict": 209, "def": [209, 210], "count_rcz": 209, "c_list": 209, "no_cz": 209, "no_r": 209, "count_op": 209, "num_2qcz": 209, "num_2qr": 209, "num_1qcz": 209, "num_1qr": 209, "875": [209, 212, 222, 225], "200": [209, 217, 220], "randint": [209, 212, 213, 218, 224], "11520": 209, "mpl": [209, 217, 220], "style": [209, 220], "iqp": [209, 220], "fold": [209, 217, 220], "ninvers": 209, "qc_aux": 209, "qcinv": 209, "op_seq": 209, "ncomposit": 209, "modulo": 209, "phase": 209, "equiv": 209, "latex": 209, "composit": 209, "bmatrix": 209, "520": [209, 218], "132": [209, 218, 222], "710": [209, 218], "suffic": 209, "triangular": 209, "part": [209, 228], "howev": [209, 228, 229], "still": [209, 221], "op": 209, "adj": 209, "prod": 209, "100000": 209, "ndone": 209, "defit": 210, "excit": 210, "add_counts_to_dataset": 210, "pyplot": [210, 212, 213, 221], "plt": [210, 212, 213, 217, 221], "generate_readout_test_circuit": 210, "n_qubit": [210, 217], "qb_to_measur": 210, "qc_transpil": 210, "plot_histogram": [210, 212], "try": 210, "state_": 210, "counts_": 210, "break": 210, "xtick": 210, "90": [210, 217, 220], "legend": 210, "readout_analysi": 210, "histogram": [210, 212], "readouttest": 210, "default_opt": 210, "n_shot": 210, "2048": 210, "staticmethod": 210, "readout_test": 210, "iqmprovid": [210, 212, 213, 216, 217, 218, 220, 229], "iqm_server_url": [210, 216], "fi": [210, 229], "coco": [210, 216, 217, 220, 229], "get_backend": [210, 212, 213, 216, 217, 218, 220, 229], "480b": 210, "state_0": 210, "state_1": 210, "u4": 210, "144b": 210, "0000": 210, "0010": 210, "1010": 210, "1100": 210, "176b": 210, "0011": 210, "0101": 210, "0110": 210, "1101": 210, "1110": 210, "1111": 210, "counts_0": 210, "int64": 210, "72b": 210, "1924": 210, "26": [210, 217, 218, 220, 221, 222, 227], "39": [210, 217, 218, 220, 221, 222], "counts_1": 210, "88b": 210, "72": [210, 220], "48": [210, 217, 218, 221, 222], "78": [210, 217, 220], "36": [210, 217, 218, 220, 221], "1801": 210, "sure": [212, 229], "pip": [212, 229], "ipykernel": 212, "o": [212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 229], "environ": [212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 229], "iqm_tokens_fil": [212, 213], "token": [212, 213, 216, 219, 220, 222, 229], "iqm_url": [212, 213, 217, 218, 220], "access": [212, 213, 229], "everyth": [212, 213], "nx": [212, 213], "add_edges_from": [212, 213], "po": [212, 213], "spring_layout": [212, 213], "42": [212, 213, 217, 218, 220, 221, 222], "with_label": [212, 213], "node_color": [212, 213], "lightblu": [212, 213], "edge_color": [212, 213], "grai": [212, 213], "node_s": [212, 213], "font_siz": [212, 213], "linewidth": [212, 213], "ignor": [212, 213], "critic": [212, 213], "filterwarn": [212, 213], "action": [212, 213], "superposit": [212, 213], "rangl": [212, 213], "frac": [212, 213, 221], "sqrt": [212, 213], "otim": [212, 213], "act": [212, 213, 228], "wit": [212, 213], "genuin": [212, 213, 219], "cannot": [212, 213, 228], "explain": [212, 213], "great": [212, 213], "rho_": [212, 213], "langl": [212, 213], "pure": [212, 213], "entri": [212, 213, 221], "written": [212, 213, 228], "corner": [212, 213], "simplifi": [212, 213], "four": [212, 213], "compon": [212, 213, 215], "formula": [212, 213], "nullifi": [212, 213], "To": [212, 213, 214, 217, 219, 221, 228, 229], "off": [212, 213], "want": [212, 213, 216, 229], "pleas": [212, 213], "generate_ghz_spanning_tre": 212, "get_edg": 212, "ghz_circuit": 212, "qc_transp": 212, "re": [212, 222], "10000": [212, 224], "get_count": 212, "benchmark_ghz": [212, 213, 218, 219], "run_ghz": [212, 213, 218, 219], "result_ghz": [212, 213], "introduc": [212, 213], "2019": [212, 213, 219, 229], "successfulli": [212, 213, 214, 217, 218, 222, 223, 225], "occcur": [212, 213], "greater": [212, 213], "ask": [212, 213], "confid": [212, 213], "higher": [212, 213], "97": [212, 213, 217], "85": [212, 213, 220, 229], "asymptot": [212, 213], "log_2": [212, 213], "v_q": [212, 213], "underset": [212, 213], "argmax": [212, 213], "d": [212, 213, 219, 228], "leq": [212, 213], "achiev": [212, 213, 220], "quantum_volum": [212, 213, 215, 218, 225, 229], "due": [212, 215], "topmost": 212, "500": [212, 213, 218, 223, 225, 229], "40_000": [212, 220], "minut": [212, 213, 221], "benchmark_qv": [212, 213, 218, 225], "run_qv": [212, 213], "result_qv": [212, 213], "That": [212, 213], "wack": [212, 213], "constitut": [212, 213, 228], "_time": [212, 213], "notic": [212, 213, 228], "plot_tim": [212, 213], "benchmark_clop": [212, 213, 215, 218], "run_clop": [212, 213, 215, 218], "result_clop": [212, 213, 215, 218], "idea": 212, "behind": 212, "crb": [212, 226, 227], "certain": [212, 213], "langle0": 212, "c_": 212, "inv": 212, "c_m": 212, "cdot": 212, "_2c_1": 212, "sim": 212, "c_1": 212, "c_2": 212, "ldot": 212, "c_1c_2": 212, "_m": 212, "leq1": 212, "isol": 212, "magesan": 212, "2012": [212, 229], "assumpt": 212, "markovian": 212, "stationari": 212, "theori": [212, 228], "fact": 212, "design": [212, 228, 229], "fulli": [212, 221], "our": 212, "overlin": 212, "intend": 212, "becaus": 212, "eventu": 212, "mention": 212, "barend": 212, "2014": 212, "approx": 212, "alwai": [212, 219], "slightli": 212, "care": 212, "compar": 212, "spec": 212, "randomized_benchmark": [212, 214, 217, 218, 222, 223, 229], "clifford_rb": [212, 214, 218], "benchmark_clifford_rb": [212, 214, 218], "run_clifford_rb": [212, 214, 218], "result_clifford_rb": [212, 214, 218], "previou": 212, "aim": [212, 219], "interest": 212, "sole": [212, 228], "made": [212, 228], "wish": 212, "interleaved_rb": [212, 218, 222, 229], "irb_cz": 212, "benchmark_irb_cz": 212, "run_irb_cz": 212, "result_irb_cz": 212, "martiel": [212, 213], "erd\u0151": [212, 213], "r\u00e9nyi": [212, 213], "geq": [212, 213, 221], "60": [212, 213, 220], "999999": [212, 213, 218, 224], "benchmark_qscor": [212, 213, 218, 224], "run_qscor": [212, 213, 218], "result_qscor": [212, 213, 218], "summar": 212, "obs_ghz": [212, 213], "round": [212, 213], "obs_qv": [212, 213], "obs_clop": [212, 213], "obs_crb": 212, "f_crb": 212, "obs_irb": 212, "f_irb": 212, "average_gate_fidelity_czg": 212, "obs_q": [212, 213], "argmin": [212, 213], "mean_approximation_ratio": [212, 213, 218], "3000": 212, "999": [212, 214, 218, 221], "98": [212, 217], "30": [212, 214, 216, 217, 218, 220, 222, 229], "num": [212, 217], "chosen_layout": 213, "60_000": [213, 218, 225, 229], "load_ext": [214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225], "autoreload": [214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225], "extens": 214, "reload": 214, "reload_ext": 214, "fakeadoni": [214, 215, 218, 220, 222, 223, 224, 225], "fakeapollo": [214, 215, 217, 218, 219, 220, 222, 223, 224, 225], "iqm_token": [214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 229], "example_crb": [214, 218], "56": [214, 217, 218, 220, 221], "750": [214, 217, 218, 220], "logging_config": [214, 216, 217, 218, 219, 220, 221, 222, 223, 225], "info": [214, 216, 217, 218, 219, 220, 221, 222, 223, 225], "Will": [214, 217, 218, 221, 222, 223, 225, 229], "31": [214, 217, 218, 220, 222, 223], "63": [214, 217, 218, 220, 222], "831": [214, 218, 222], "992": [214, 218], "341": [214, 218], "040": [214, 218, 222], "469": [214, 218], "291": [214, 218], "292": [214, 218, 222], "349": 214, "541": [214, 218, 223], "600": [214, 218], "756": [214, 218, 220], "837": [214, 218, 222, 225], "025": 214, "171": [214, 216, 218], "905": [214, 218], "544": [214, 218], "899": [214, 217, 218], "32": [214, 217, 218, 220, 223], "624": [214, 218], "004": [214, 222], "43": [214, 217, 218, 221, 222, 227], "319": [214, 218], "569": [214, 217, 218, 223], "777": [214, 218], "840": [214, 218], "44": [214, 217, 218, 221, 222], "048": [214, 217, 218, 222], "098": [214, 218], "qubits_": [214, 217, 218, 223], "_depth_1": [214, 217, 218, 222], "323": [214, 218], "45": [214, 217, 218, 220, 222, 223], "186": [214, 222], "_depth_3": [214, 217, 218, 222], "225": [214, 218], "_depth_7": [214, 218, 222], "267": [214, 217, 218], "_depth_15": [214, 218, 222], "314": [214, 218], "_depth_31": [214, 218, 222], "315": [214, 218], "364": [214, 218, 223], "_depth_63": [214, 218, 222], "416": [214, 218], "417": [214, 218], "476": [214, 217], "542": [214, 217, 218, 223], "615": [214, 217, 218], "616": 214, "697": [214, 218], "789": [214, 218, 222], "890": [214, 218, 222], "conclud": [214, 217, 218, 220, 222, 223, 225], "931": [214, 218], "938": [214, 218], "945": [214, 217, 218, 223], "952": [214, 218, 222], "959": [214, 218], "966": [214, 218], "972": [214, 218], "979": [214, 217], "986": [214, 217, 218], "993": [214, 223], "46": [214, 217, 218, 220, 221], "006": 214, "013": [214, 218], "946844466999168": 214, "9429197366921651": 214, "attr": [214, 215, 217, 220, 221, 223, 225], "session_timestamp": [214, 217, 220, 223, 225], "20241217": 214, "115553": 214, "backend_configuration_nam": [214, 217, 220, 223, 225], "iqmfakeapollobackend": [214, 218, 219, 221, 225], "depth_1": 214, "time_circuit_gener": [214, 220, 223, 225], "541001081466675": 214, "time_submit": [214, 223, 225], "0006990432739257812": 214, "time_retriev": [214, 223, 225], "22491073608398438": 214, "all_job_metadata": [214, 223, 225], "batch_job_1": [214, 223], "job_id": [214, 223], "8f305755": 214, "e038": 214, "4596": 214, "8617": 214, "d96ba3f42ca9": 214, "aer_simul": [214, 223], "statu": [214, 223], "circuits_in_batch": [214, 223], "depth_3": 214, "05647683143615723": 214, "0005230903625488281": 214, "2fe0b406": 214, "8977": 214, "4567": 214, "bba0": 214, "d4168f0883ed": 214, "depth_7": 214, "19257187843322754": 214, "0004839897155761719": 214, "8299918c": 214, "be26": 214, "40d5": 214, "8778": 214, "9ea4468a1df2": 214, "depth_15": 214, "05831408500671387": 214, "0004811286926269531": 214, "174640c4": 214, "9ff3": 214, "4ca3": 214, "9ffc": 214, "d6aa5be304f3": 214, "depth_31": 214, "1564040184020996": 214, "0006189346313476562": 214, "7bb739f2": 214, "31bc": 214, "40af": 214, "8dbf": 214, "1d60a9310391": 214, "depth_63": 214, "08135986328125": 214, "0004200935363769531": 214, "f414a2c1": 214, "75c8": 214, "4d5a": 214, "9e4b": 214, "ccce29903f5f": 214, "147684812545776": 214, "0005502700805664062": 214, "00039887428283691406": 214, "8832576a": 214, "6d6e": 214, "4abe": 214, "8cfa": 214, "5001e6bb98e": 214, "08015298843383789": 214, "00039315223693847656": 214, "ecc1bcea": 214, "ef4c": 214, "4f35": 214, "9284": 214, "ab49af0c5b9f": 214, "16936397552490234": 214, "0003960132598876953": 214, "5582c842": 214, "0f07": 214, "46b6": 214, "96be": 214, "2fb3925b19d9": 214, "20774221420288086": 214, "0004191398620605469": 214, "6423b02b": 214, "8417": 214, "4300": 214, "b7ac": 214, "84d59f87a51f": 214, "0635080337524414": 214, "0004169940948486328": 214, "0b324804": 214, "44fe": 214, "4c16": 214, "83eb": 214, "08e5cd67aa79": 214, "20784401893615723": 214, "0004961490631103516": 214, "6c633640": 214, "d4b4": 214, "47de": 214, "a46d": 214, "d3ae4c84d212": 214, "avg_gate_fidel": [214, 223], "0012220693932290373": 214, "001545469960991071": 214, "xxxxxxxxxxxxxxx": 215, "example_clop": [215, 218], "operation_count": [215, 225], "breakdown": 215, "unit": 215, "remot": 215, "aspect": 215, "wall": 215, "experienc": 215, "encompass": 215, "compris": 215, "latenc": 215, "vari": 215, "significantli": 215, "extern": 215, "circumst": 215, "aggreg": 215, "finish": 215, "receiv": [215, 228], "xxxxx": 216, "xxxxxxx": 216, "xxxxxxxx": 216, "replac": [216, 228], "siriu": 216, "emerald": 216, "meetiqm": [216, 217, 219, 220], "opt": 216, "anaconda3": [216, 217, 220], "env": [216, 217, 220], "lib": [216, 217, 220], "python3": 216, "site": [216, 217, 220], "142": [216, 218], "userwarn": [216, 217, 220], "27": [216, 217, 218, 219, 220, 221, 222], "built": 216, "server": 216, "might": [216, 219], "encount": 216, "issu": [216, 228], "best": [216, 219], "29": [216, 217, 218, 220, 222, 225], "version_incompatibility_msg": 216, "linspac": 216, "100e": 216, "iqm_provid": [216, 217, 218, 220], "unknown": [216, 217, 220], "unknown_opt": [216, 217, 220], "2025": [216, 217, 218, 219, 220, 221, 222, 223, 225, 227], "07": [216, 217, 218, 219, 220, 221, 222, 223, 227], "202": [216, 218, 220], "7679157313590913e": 216, "05": [216, 217, 218, 221, 222, 223], "332763060487301e": 216, "2792580706714276e": 216, "1769872662543327e": 216, "06": [216, 217, 218, 220, 221, 223], "1690066792698488e": 216, "835859627497227e": 216, "9581411901572643e": 216, "5349341834275828e": 216, "7667960136510046e": 216, "650295798103166e": 216, "6166287001435286e": 216, "030620409848378e": 216, "902668232550718e": 216, "5752540482660701e": 216, "4079502861210074e": 216, "147131957835361e": 216, "4348794798121514e": 216, "839674906118737e": 216, "2879434275022574e": 216, "1510692110946111e": 216, "093928084952773e": 216, "5406298673381294e": 216, "8343162723982355e": 216, "4633111527445746e": 216, "4235245531448773e": 216, "914289199220578e": 216, "136033724339335e": 216, "110324524018475e": 216, "354338443470585e": 216, "7889199123019837e": 216, "9013724266285726e": 216, "6803076530869265e": 216, "xxxxxxxxxxxxxxxxxxxxxx": 217, "proxi": 217, "manual": 217, "necessarili": [217, 228], "simpli": 217, "resonance_st": 217, "v1": [217, 219], "example_eplg": 217, "geomspac": 217, "endpoint": 217, "dtype": 217, "tolist": 217, "benchmark_eplg": 217, "run_eplg": 217, "04": [217, 218, 220, 221, 222, 223], "358": [217, 218], "28": [217, 218, 220, 222, 225], "742": [217, 218], "745": [217, 218, 222], "111": [217, 218, 225], "61": [217, 220, 221], "748": [217, 220], "pedrofigueroaromero": [217, 220], "bench": [217, 220], "177": [217, 218, 220, 223], "571": [217, 218], "227": [217, 218], "523": [217, 218, 223], "539": [217, 218], "40": [217, 218, 220], "580": [217, 218], "333": [217, 218, 222], "52": [217, 218, 220, 221, 222, 223], "692": [217, 218, 222], "57": [217, 218, 220, 222], "059": [217, 218], "816": [217, 218, 220], "03": [217, 218, 220, 222, 223], "812": [217, 218], "057": [217, 218], "672": [217, 218], "08": [217, 218, 220, 221, 222, 223], "826": [217, 218], "097": [217, 218, 223], "112": 217, "454": [217, 218], "888": [217, 218], "556": 217, "537": [217, 220], "547": [217, 218], "054": [217, 218], "805": [217, 218], "51": [217, 218, 220, 221, 222], "921": [217, 218], "066": [217, 218], "649": [217, 218], "33": [217, 218, 220, 223], "101": [217, 218], "37": [217, 218, 220], "712": [217, 218], "41": [217, 218, 222, 223], "280": [217, 218], "252": [217, 218, 225], "704": [217, 218, 220, 222], "536": 217, "49": [217, 218, 220, 221, 222], "689": [217, 218], "204": [217, 218, 222, 225], "53": [217, 218, 220, 222], "802": [217, 218], "54": [217, 218, 220, 222], "303": [217, 218, 220], "55": [217, 218, 220, 221, 223], "205": [217, 218, 220, 222], "813": [217, 218], "511": 217, "224": [217, 218], "136": [217, 218], "164": [217, 218], "236": 217, "920": [217, 218], "59": [217, 218, 219, 220, 222, 223], "124": 217, "126": [217, 218], "02": [217, 218, 219, 220, 221, 223], "019": [217, 218], "833": [217, 218], "724": [217, 218], "631": [217, 218, 222], "09": [217, 218, 219, 220, 222, 225], "861": [217, 218, 222], "955": [217, 218], "658": [217, 218], "819": [217, 218, 220, 222, 223], "161": [217, 218], "033": [217, 218, 222, 225], "050": [217, 218, 223, 225], "357": [217, 218, 223], "785": [217, 218, 222], "147": [217, 218, 221, 223], "289": [217, 218, 222], "253": [217, 218], "567": [217, 218], "914": [217, 218], "694": [217, 218], "282": [217, 218, 222], "408": [217, 221], "38": [217, 218, 220, 222], "721": [217, 218, 220], "738": [217, 218], "298": [217, 218], "395": [217, 218, 220, 222], "913": [217, 218], "828": [217, 218, 222], "830": [217, 218], "129": [217, 218, 229], "852": [217, 218, 220], "_depth_200": 217, "307": [217, 223], "_depth_111": 217, "58": [217, 218, 219, 220, 222], "471": [217, 218], "900": [217, 218], "_depth_61": 217, "525": [217, 218, 220], "067": [217, 218, 222], "_depth_34": 217, "832": [217, 218], "255": [217, 218, 222], "_depth_18": 217, "851": 217, "246": [217, 218], "_depth_10": 217, "460": [217, 218], "843": [217, 218], "_depth_5": 217, "279": [217, 218], "154": [217, 218], "641": [217, 218], "455": [217, 218], "950": [217, 219, 222], "568": [217, 218], "163": [217, 218, 222], "798": [217, 218, 220], "382": [217, 218], "636": [217, 218, 222], "322": [217, 218], "35": [217, 218, 220], "273": [217, 218], "036": [217, 218], "769": [217, 218], "681": [217, 218, 222], "751": [217, 218, 222], "774": 217, "788": [217, 218, 222], "632": [217, 218], "546": [217, 219, 222, 223], "487": [217, 218, 220], "094": [217, 218, 222], "528": [217, 218], "594": [217, 218], "437": [217, 218], "01": [217, 218, 219, 220, 221, 222, 223, 225], "817": [217, 218], "873": [217, 218], "598": [217, 218, 223], "917": [217, 218], "901": [217, 218], "363": [217, 218], "895": [217, 218], "806": [217, 221, 225], "329": [217, 218], "585": [217, 218, 220], "412": [217, 218, 220], "593": [217, 218, 222], "499": [217, 218, 220], "904": [217, 218], "814": 217, "401": [217, 218], "178": [217, 218], "863": [217, 218], "516": [217, 218, 220], "708": [217, 218, 220], "321": [217, 218], "656": [217, 218], "47": [217, 218, 221, 222], "576": [217, 218, 219], "rcparam": [217, 220], "dpi": [217, 220], "175": [217, 218], "result_eplg": 217, "030": 217, "082": [217, 218, 225], "302": [217, 218], "893": [217, 218], "014": [217, 218], "108": [217, 218], "176": [217, 218, 223], "497": [217, 218], "683": [217, 218, 220], "935": 217, "173": [217, 218, 222], "290": [217, 218, 222, 225], "367": [217, 218], "442": [217, 218, 222], "827": [217, 218], "069": 217, "194": 217, "308": [217, 218], "405": [217, 218, 220], "526": [217, 218], "575": [217, 218], "820": [217, 218, 222], "857": [217, 218], "946": [217, 218], "031": [217, 218], "116": [217, 218, 223], "185": [217, 218], "241": [217, 218], "334": [217, 218, 220], "375": [217, 218, 223], "dict_kei": [217, 220, 221], "parallel_all_0": 217, "parallel_all_1": 217, "parallel_all_2": 217, "parallel_all_3": 217, "2f": [217, 220], "2e": [217, 220], "average_gate_fidel": 217, "77": [217, 220], "96": 217, "95": [217, 220], "71": [217, 220], "81": [217, 220], "87": [217, 220], "75": [217, 220, 225], "70": [217, 220], "62": 217, "68": [217, 220], "80": [217, 220], "layer_fidel": 217, "88": 217, "eplg_circ_nam": 217, "circ_group_idx": 217, "circuit_to_draw": 217, "idle_wir": 217, "877": [218, 222], "127": [218, 222], "091": 218, "517": 218, "508": [218, 220], "507": [218, 220], "168": [218, 222], "188": [218, 222], "754": 218, "807": 218, "932": [218, 222], "052": 218, "447": 218, "448": [218, 223], "707": 218, "967": 218, "284": 218, "578": 218, "_depth_127": [218, 222], "324": [218, 220, 222], "557": [218, 223], "590": [218, 220], "602": [218, 219], "611": 218, "626": [218, 220, 223], "example_irb_1q": [218, 222], "rgate": [218, 221, 222], "benchmark_irb_1q": [218, 222], "run_irb_1q": [218, 222], "021": [218, 225], "599": 218, "wxecut": 218, "047": 218, "588": 218, "423": 218, "348": [218, 222], "427": 218, "491": [218, 222], "445": 218, "219": 218, "479": 218, "482": [218, 220], "550": 218, "589": [218, 223], "623": [218, 222], "558": [218, 220], "218": 218, "328": 218, "810": [218, 219], "871": 218, "340": 218, "411": 218, "453": [218, 225], "876": [218, 222], "249": 218, "909": 218, "430": [218, 221], "233": 218, "519": 218, "530": [218, 222], "790": [218, 222, 223], "187": 218, "635": [218, 222], "783": [218, 225], "793": 218, "829": [218, 222], "933": [218, 222], "049": [218, 222], "778": 218, "008": [218, 222], "095": [218, 222], "260": 218, "881": [218, 222], "028": 218, "153": 218, "883": [218, 222, 223], "330": [218, 220, 223], "579": 218, "620": 218, "133": [218, 222, 223], "210": [218, 225], "709": 218, "310": 218, "549": 218, "326": [218, 220], "529": [218, 223], "679": [218, 222, 223], "515": 218, "169": 218, "083": 218, "779": [218, 222], "009": 218, "732": 218, "560": 218, "943": 218, "071": 218, "182": 218, "976": 218, "553": [218, 222], "781": [218, 222, 225], "703": [218, 222], "554": 218, "639": [218, 219], "823": [218, 220], "179": 218, "859": 218, "114": 218, "338": [218, 221, 222], "425": 218, "480": 218, "821": [218, 220, 222], "070": 218, "475": [218, 222], "000": [218, 222], "120": [218, 222], "250": [218, 221], "775": 218, "259": [218, 219, 221], "352": 218, "648": 218, "044": 218, "874": [218, 222], "991": [218, 222], "229": 218, "690": 218, "149": [218, 223], "011": [218, 220, 221], "770": 218, "782": 218, "565": 218, "739": [218, 222], "199": [218, 220], "346": [218, 222], "024": 218, "850": 218, "clifford_qubits_": [218, 222], "299": 218, "570": 218, "088": [218, 225], "377": 218, "379": 218, "698": 218, "700": 218, "150": [218, 220, 223], "_depth_255": [218, 222], "388": 218, "389": 218, "659": [218, 220], "110": 218, "118": [218, 222], "369": 218, "371": 218, "058": [218, 222], "650": [218, 222], "490": [218, 222], "834": 218, "682": [218, 222], "450": [218, 223], "240": 218, "189": 218, "231": 218, "660": 218, "018": 218, "939": [218, 222], "755": [218, 220], "759": 218, "484": 218, "970": [218, 223], "760": 218, "interleaved_qubits_": [218, 222], "109": [218, 229], "720": 218, "726": 218, "498": 218, "504": 218, "937": 218, "320": 218, "270": 218, "702": [218, 223], "181": [218, 223], "687": 218, "761": [218, 220], "148": [218, 221, 222], "010": 218, "468": 218, "919": 218, "562": [218, 220], "370": 218, "884": [218, 219, 223], "172": 218, "075": [218, 221], "609": [218, 223], "053": 218, "983": [218, 223], "076": 218, "342": [218, 223], "849": [218, 223], "297": 218, "result_irb_1q": [218, 222], "894": 218, "452": 218, "677": 218, "772": 218, "996": [218, 223], "203": 218, "538": [218, 222], "762": 218, "969": 218, "080": 218, "208": [218, 220, 222], "627": 218, "734": [218, 222], "942": 218, "165": 218, "272": [218, 219, 223], "675": [218, 222], "882": [218, 222], "977": 218, "106": 218, "201": [218, 223], "431": 218, "666": 218, "776": 218, "887": [218, 223], "985": [218, 219], "206": [218, 222], "318": [218, 219], "545": [218, 223], "653": [218, 223], "766": [218, 223], "989": [218, 221, 222], "221": 218, "335": 218, "691": [218, 222], "809": 218, "936": 218, "286": [218, 222], "398": [218, 220], "780": [218, 222, 223, 225], "892": [218, 223], "612": 218, "avg_gate_fidelity_interleav": [218, 222], "9979183032433894": 218, "144505494191281e": 218, "avg_gate_fidelity_clifford": [218, 222], "9958115103388792": 218, "17823609003449e": 218, "avg_gate_fidelity_n": 218, "9977661388474022": 218, "361722520237145e": 218, "997958281196824": 218, "00010535448906517988": 218, "996185705320257": 218, "354178172452585e": 218, "9979657095041371": 218, "9888883256457185e": 218, "9976806659229207": 218, "00010662386983132284": 218, "9958525686447902": 218, "031666798234228e": 218, "9977880366105548": 218, "816884091625878e": 218, "9977658880315101": 218, "00013395088590563366": 218, "996010014510697": 218, "00011462572813413851": 218, "9978720077390384": 218, "113374307582606e": 218, "9978184054322468": 218, "00011216064141600791": 218, "9957406711482065": 218, "837832701601442e": 218, "9977283579457101": 218, "246845828393341e": 218, "example_irb_2q": [218, 222], "benchmark_irb_2q": [218, 222], "run_irb_2q": [218, 222], "304": 218, "543": [218, 219], "034": [218, 221, 222], "729": 218, "930": [218, 220], "974": 218, "243": 218, "081": 218, "139": 218, "160": 218, "277": 218, "514": [218, 220], "728": 218, "665": 218, "824": [218, 220], "951": [218, 222], "131": [218, 222], "633": 218, "392": 218, "835": 218, "138": 218, "572": [218, 219, 220], "897": 218, "039": [218, 222], "407": 218, "439": [218, 219, 220], "555": 218, "003": [218, 221, 222], "668": 218, "752": [218, 222], "180": [218, 223], "608": 218, "743": 218, "564": 218, "730": 218, "403": 218, "337": 218, "134": [218, 223], "676": [218, 223], "093": 218, "800": [218, 221, 229], "926": 218, "394": [218, 222], "860": [218, 222], "269": 218, "368": 218, "846": 218, "995": [218, 221], "477": [218, 220], "016": 218, "078": [218, 219], "158": [218, 222], "614": 218, "866": 218, "035": 218, "213": 218, "419": 218, "815": 218, "838": 218, "478": 218, "574": 218, "144": 218, "744": [218, 222], "803": [218, 221], "261": 218, "796": 218, "713": 218, "844": 218, "073": 218, "271": [218, 223], "736": 218, "196": [218, 222, 225], "198": 218, "652": [218, 222, 223], "384": 218, "032": [218, 225], "912": 218, "896": 218, "007": [218, 222], "152": [218, 223], "306": 218, "060": 218, "062": 218, "610": 218, "084": 218, "456": [218, 223], "026": 218, "117": [218, 223], "141": 218, "501": [218, 220], "278": 218, "714": [218, 220], "079": [218, 223], "617": 218, "190": 218, "678": [218, 223], "432": [218, 222], "285": [218, 222], "228": 218, "result_irb_2q": [218, 222], "481": 218, "655": 218, "971": 218, "130": 218, "209": 218, "288": 218, "510": 218, "629": 218, "685": [218, 222], "764": [218, 222], "907": 218, "987": [218, 220], "353": 218, "512": [218, 220, 223], "591": 218, "686": 218, "797": 218, "927": 218, "162": 218, "606": [218, 223], "928": 218, "492": [218, 219, 220, 222], "example_irb_iswap": [218, 222], "iswapg": [218, 222, 223, 229], "benchmark_irb_iswap": [218, 222], "run_irb_iswap": [218, 222], "166": [218, 219, 222], "156": 218, "077": 218, "923": 218, "735": 218, "068": 218, "918": 218, "325": 218, "234": 218, "531": 218, "688": [218, 222, 225], "811": 218, "226": 218, "074": [218, 222], "263": [218, 219], "669": 218, "673": 218, "002": [218, 221, 222], "327": 218, "577": [218, 222], "015": 218, "099": 218, "965": 218, "029": 218, "045": 218, "296": [218, 223], "607": [218, 222], "911": 218, "313": 218, "664": [218, 222], "113": 218, "988": 218, "532": [218, 219], "451": 218, "262": 218, "982": [218, 222, 223], "595": [218, 222], "336": 218, "result_irb_iswap": [218, 222], "953": 218, "140": 218, "191": 218, "223": [218, 222], "287": [218, 222], "355": [218, 222], "462": [218, 221], "621": 218, "667": 218, "701": 218, "747": [218, 220], "795": 218, "041": 218, "mirror_rb": [218, 223, 229], "example_mrb": [218, 223, 229], "benchmark_mrb": [218, 223], "run_mrb": [218, 223], "10x5": [218, 223], "64": [218, 220, 221, 223], "128": [218, 223], "622": 218, "865": 218, "305": 218, "671": [218, 222], "055": 218, "485": [218, 222], "391": [218, 221], "584": [218, 220], "230": 218, "449": [218, 223], "242": 218, "472": 218, "509": [218, 219, 220, 222], "022": [218, 222], "436": [218, 222], "628": 218, "980": 218, "418": 218, "603": 218, "808": 218, "051": 218, "293": 218, "157": [218, 222], "268": 218, "858": 218, "527": [218, 220], "486": 218, "898": 218, "107": [218, 222], "540": 218, "244": [218, 223], "661": 218, "885": [218, 219, 222], "765": [218, 222], "193": 218, "465": [218, 219], "910": 218, "643": 218, "104": [218, 219, 220], "438": [218, 219], "613": 218, "470": 218, "581": 218, "693": 218, "266": 218, "488": 218, "662": 218, "870": 218, "506": 218, "207": [218, 222], "638": 218, "245": 218, "872": 218, "046": 218, "963": 218, "426": 218, "975": 218, "878": 218, "275": 218, "251": 218, "440": [218, 222], "964": [218, 220, 222], "922": 218, "309": 218, "981": [218, 222], "583": [218, 222], "413": [218, 223], "998": [218, 221], "906": [218, 222], "444": [218, 219], "891": 218, "217": [218, 225], "409": 218, "457": 218, "311": 218, "446": 218, "695": 218, "924": 218, "941": 218, "625": [218, 220, 225], "727": 218, "184": [218, 223], "012": [218, 220], "090": [218, 222], "372": 218, "642": [218, 219], "489": 218, "696": 218, "949": 218, "238": 218, "839": 218, "596": [218, 222, 223], "684": 218, "753": [218, 220], "535": 218, "415": 218, "354": 218, "345": 218, "604": 218, "968": [218, 222], "502": 218, "768": 218, "380": [218, 222], "220": 218, "283": [218, 225], "773": [218, 222], "867": [218, 223], "123": 218, "381": [218, 222], "767": [218, 223], "072": 218, "551": 218, "741": 218, "958": 218, "845": [218, 220, 222], "222": 218, "239": 218, "065": [218, 222], "903": 218, "869": 218, "552": 218, "757": [218, 225], "915": [218, 222], "043": 218, "125": [218, 220, 223], "429": 218, "984": 218, "618": 218, "344": 218, "663": 218, "216": [218, 222], "717": [218, 222], "258": 218, "421": 218, "647": 218, "420": 218, "410": 218, "390": 218, "566": [218, 220, 222], "718": 218, "645": 218, "587": [218, 220], "281": 218, "397": 218, "017": [218, 220], "592": [218, 220], "192": 218, "122": 218, "362": 218, "862": 218, "784": [218, 222], "483": 218, "350": [218, 220], "339": [218, 222], "257": [218, 220], "383": [218, 222], "619": 218, "822": 218, "886": 218, "063": 218, "404": 218, "836": [218, 222], "573": 218, "424": [218, 220], "855": 218, "085": 218, "644": [218, 221], "902": 218, "461": [218, 220], "563": 218, "522": [218, 222, 223], "723": 218, "957": 218, "791": [218, 223], "908": 218, "195": [218, 220], "170": 218, "505": [218, 220], "294": [218, 222], "458": 218, "317": 218, "089": 218, "360": 218, "559": [218, 220], "399": 218, "159": [218, 220], "247": 218, "103": [218, 222], "119": [218, 223], "994": [218, 221], "496": [218, 220, 222], "001": [218, 221], "848": 218, "435": 218, "725": 218, "197": [218, 220, 222], "023": 218, "818": [218, 222], "151": [218, 220], "473": [218, 220], "854": 218, "680": 218, "841": 218, "374": 218, "533": 218, "605": [218, 223], "086": 218, "211": 218, "758": [218, 220, 221, 222, 223], "792": 218, "719": [218, 220], "548": 218, "235": 218, "997": 218, "534": 218, "916": [218, 222], "137": 218, "654": 218, "_depth_2": [218, 223], "_depth_4": [218, 223], "763": 218, "_depth_8": [218, 223], "_depth_16": [218, 223], "_depth_32": [218, 223], "_depth_64": [218, 223], "_depth_128": [218, 223], "_depth_256": [218, 223], "_depth_512": [218, 223], "295": 218, "674": 218, "result_mrb": [218, 223], "061": 218, "597": [218, 223], "145": 218, "1600x1200": 218, "ax": 218, "all_qubit_layout": [218, 223], "key_mrb_plot": [218, 223], "example_qv": [218, 225, 229], "run0_qv": [218, 225], "637": 218, "subbatch": [218, 225], "264": [218, 223], "387": [218, 222, 223], "result0_qv": [218, 225], "722": 218, "run1_qv": [218, 225], "result1_qv": [218, 225], "466": 218, "422": [218, 223], "948": [218, 223], "733": 218, "630": 218, "493": 218, "There": 218, "6353": 218, "19060": 218, "minimal_ghz": [218, 219], "237": 218, "183": 218, "example_qscor": [218, 224], "10_000": 218, "880": 218, "4721": 218, "1866": 218, "301": [218, 223], "5760": 218, "3202": 218, "5666": 218, "6277": 218, "5362": 218, "1528": 218, "4720649335834727": 218, "264883828589849": 218, "is_succes": [218, 225], "qscore_result": 218, "5759620786516855": 218, "13942395641806907": 218, "5666397249858852": 218, "09938021346738757": 218, "536231071484655": 218, "13823427614487907": 218, "multipartit": 219, "One": [219, 225], "larger": [219, 221], "leibfri": 219, "et": 219, "al": 219, "six": 219, "atom": 219, "schr\u00f6dinger": 219, "cat": 219, "natur": 219, "2005": 219, "offer": [219, 228], "verif": [219, 227, 229], "superconduct": 219, "phy": [219, 229], "commun": [219, 228], "095004": 219, "elben": 219, "statist": 219, "toolbox": 219, "probe": 219, "bodi": 219, "rev": [219, 229], "99": 219, "052323": 219, "ciruit": 219, "hadamrd": 219, "addit": [219, 221, 228, 229], "log_depth": 219, "cruz": 219, "yield": 219, "lower": [219, 221], "hous": 219, "reli": 219, "dai": 219, "thu": 219, "comparison": 219, "gme": 219, "prefer": [219, 228], "whenev": 219, "mitgat": 219, "arang": 219, "think": 219, "help": 219, "your_token": [219, 229], "mark": [219, 228], "w_": 219, "ij": [219, 221], "mathcal": 219, "until": 219, "nice": 219, "utils_plot": 219, "plot_layout_fidelity_graph": 219, "711": [219, 220], "731": 219, "879": 219, "463": 219, "960": 219, "248": 219, "961": 219, "fidelitii": 219, "filter": 219, "descript": [219, 228], "l0": 219, "l1": 219, "xxxxxxxxxxxxxxxx": 220, "get_iqm_backend": 220, "300": [220, 221], "graph_stat": 220, "benchmark_graphst": 220, "run_graphst": 220, "749": 220, "396": [220, 222], "402": 220, "332": 220, "020": 220, "155": 220, "705": 220, "result_graphst": 220, "042": 220, "fetch": 220, "ok": 220, "font_manag": 220, "findfont": 220, "famili": 220, "stixgener": 220, "fall": 220, "back": 220, "dejavu": 220, "san": 220, "stixnonunicod": 220, "494": 220, "stixsizeonesym": 220, "stixsizetwosym": 220, "stixsizethreesym": 220, "stixsizefoursym": 220, "stixsizefivesym": 220, "cmsy10": 220, "cmr10": 220, "cmtt10": 220, "518": 220, "cmmi10": 220, "521": 220, "cmb10": 220, "524": 220, "cmss10": 220, "cmex10": 220, "mono": 220, "351": 220, "percentag": 220, "idx": 220, "max_neg": 220, "84": 220, "86": 220, "74": 220, "79": 220, "73": 220, "66": 220, "65": 220, "83": 220, "69": 220, "94": 220, "76": 220, "82": [220, 221], "91": 220, "max_negativities_iqm_backend_20250325": 220, "160833": 220, "max_negativities_graph_20250325": 220, "lowest": 220, "resconstruct": 220, "observation_dict": 220, "ob": 220, "argsort": 220, "lowest_negativity_pair": 220, "highest_negativity_pair": 220, "all_projected_qubit": 220, "all_pair_group": 220, "all_neighbor_group": 220, "all_tomography_st": 220, "all_neg": 220, "bootstrapped_averag": 220, "adjust": 220, "06e": 220, "3206842864916416": 220, "31010765308352356": 220, "93e": 220, "3542183495445777": 220, "3539253716950112": 220, "53e": 220, "3888948376922817": 220, "38736774049571426": 220, "40e": 220, "43361445043616353": 220, "4196633945881397": 220, "41e": 220, "43662497937638245": 220, "42249850678510703": 220, "90e": 220, "37169789059353975": 220, "36979367489991855": 220, "54e": 220, "38686144121566973": 220, "379324805728086": 220, "79e": 220, "39594160382229693": 220, "3931510385413373": 220, "97e": 220, "4092514317610637": 220, "4086540198375821": 220, "50e": 220, "36885658775672914": 220, "35382192582939426": 220, "08e": 220, "33451241682265326": 220, "32543228989306544": 220, "36671508133810615": 220, "36709383454659233": 220, "77e": 220, "32608570801001885": 220, "3213134253456277": 220, "29e": 220, "3566393931240753": 220, "3543493221398908": 220, "81e": 220, "3767486702923495": 220, "35860149933340935": 220, "3341624640356816": 220, "33262962066733953": 220, "00e": 220, "3486521211655147": 220, "3186675847362068": 220, "71e": 220, "39469814069723197": 220, "39099102345993036": 220, "13e": 220, "32804598413012276": 220, "3219124989220279": 220, "24e": 220, "3668085274286376": 220, "36257096650435117": 220, "62e": 220, "3732632016003694": 220, "35702785889177086": 220, "91e": 220, "3465755742920084": 220, "3416698385772142": 220, "17e": 220, "32654059296341725": 220, "30487999669484334": 220, "35e": 220, "39553971118808906": 220, "38203311102738585": 220, "3803202427020316": 220, "37715389665511634": 220, "76e": 220, "37343498488547655": 220, "35586222167388737": 220, "60e": 220, "41534546787652044": 220, "3993565114966017": 220, "45e": 220, "4134082416427767": 220, "398899780892523": 220, "55e": 220, "3810499300589416": 220, "3755024431288029": 220, "34e": 220, "37452627891460544": 220, "3671820250131137": 220, "q_0": 220, "\u03c0": [220, 221], "q_1": 220, "q_2": 220, "q_3": 220, "q_4": 220, "q_5": 220, "q_6": 220, "q_7": 220, "q_8": 220, "q_9": 220, "q_10": 220, "q_11": 220, "q_12": 220, "q_13": 220, "q_14": 220, "q_15": 220, "q_16": 220, "q_17": 220, "q_18": 220, "q_19": 220, "tomo_qubit": 220, "introduct": 221, "what": [221, 222], "background": 221, "journal": 221, "prxquantum": 221, "1103": 221, "010325": [221, 229], "compressive_gst": 221, "iqmfakeadoni": 221, "iqmfakeapollo": 221, "k_i": 221, "trigger": 221, "benefit": 221, "less": [221, 223], "captur": 221, "domin": 221, "trustworthi": 221, "veri": 221, "consum": 221, "minimal_1q_gst": 221, "minimal_2q_gst": 221, "Be": 221, "extra": 221, "434": 221, "20it": 221, "criterion": 221, "56e": 221, "deepcopi": 221, "benchmark_rk1": 221, "result_rk1": 221, "83it": 221, "99e": 221, "uncertaintit": 221, "restult": 221, "idl": 221, "qb1": 221, "99693": 221, "nan": 221, "00703": 221, "unitar": 221, "98781": 221, "rx": 221, "99918": 221, "0013": 221, "99674": 221, "ry": 221, "99509": 221, "01332": 221, "98074": 221, "tvd": 221, "00698": 221, "03296": 221, "dist": 221, "00601": 221, "04366": 221, "results_layout_": 221, "raw_kraus_oper": 221, "raw_gat": 221, "raw_povm": 221, "raw_stat": 221, "gauge_opt_g": 221, "gauge_opt_gates_pauli_basi": 221, "gauge_opt_povm": 221, "gauge_opt_st": 221, "main_mgst_tim": 221, "gauge_optimization_tim": 221, "choi_ev": 221, "full_metr": 221, "raw": 221, "raw_result": 221, "array_str": 221, "precis": 221, "suppress_smal": 221, "002j": 221, "005": [221, 222], "003j": 221, "004j": 221, "These": 221, "diplai": 221, "disc": 221, "represent": 221, "sinlg": 221, "g_": 221, "p_i": 221, "p_j": 221, "layout_": 221, "_gate_metr": 221, "_choi_eigenvalu": 221, "_other_metr": 221, "_process_matrix_0": 221, "_process_matrix_1": 221, "_process_matrix_2": 221, "_spam_matrices_r": 221, "_spam_matrices_imag": 221, "_hamiltonian_paramet": 221, "altern": 221, "ourselv": 221, "xyi": 221, "instruct": 221, "gate_list": 221, "indentif": 221, "custom_1q_gst": 221, "verbos": 221, "42e": 221, "008j": 221, "001j": 221, "064": 222, "121": 222, "146": 222, "954": 222, "376": 222, "9975073376613797": 222, "9957157328789242": 222, "9976959612386156": 222, "9957310522299055": 222, "752861001879659e": 222, "028839025109517e": 222, "64196778583225e": 222, "243656712565855e": 222, "know": 222, "640": 222, "842": [222, 223], "740": 222, "9798030906041997": 222, "9431232937255942": 222, "9840858225184934": 222, "945382422883015": 222, "174": 222, "038": 222, "215": [222, 223], "706": 222, "441": 222, "9344679810705316": 222, "9463377694591251": 222, "9267928870925659": 222, "943379008472002": 222, "947": 223, "646": 223, "365": 223, "428": 223, "940": 223, "944": 223, "331": 223, "096": 223, "889": 223, "651": 223, "343": 223, "214": 223, "attr_kei": [223, 225], "depth_2": 223, "14302134513855": 223, "007565975189208984": 223, "06883907318115234": 223, "f8d9d789": 223, "0e9a": 223, "4086": 223, "ab36": 223, "685064a7b66": 223, "depth_4": 223, "0004930496215820312": 223, "0007040500640869141": 223, "87e367b7": 223, "c3ae": 223, "4457": 223, "8a2d": 223, "7b169c528033": 223, "depth_8": 223, "0004889965057373047": 223, "0005979537963867188": 223, "d84330c9": 223, "101f": 223, "40ff": 223, "bea8": 223, "f5e4c0b41527": 223, "depth_16": 223, "0004627704620361328": 223, "0006148815155029297": 223, "1f58b4a0": 223, "fb16": 223, "4d12": 223, "a9e8": 223, "c9263da52418": 223, "depth_32": 223, "00047278404235839844": 223, "0005419254302978516": 223, "4e43834b": 223, "5694": 223, "4c6d": 223, "8a83": 223, "796913d67e40": 223, "depth_64": 223, "000469207763671875": 223, "0005609989166259766": 223, "036e1dd": 223, "ca95": 223, "42a1": 223, "ab68": 223, "30a243f6b4ba": 223, "depth_128": 223, "0004668235778808594": 223, "0005328655242919922": 223, "13a59ca8": 223, "2ab0": 223, "4de8": 223, "a643": 223, "5b3f318f03d4": 223, "depth_256": 223, "0004749298095703125": 223, "e673defd": 223, "039c": 223, "4c37": 223, "9ef3": 223, "d4734436f39a": 223, "depth_512": 223, "0005099773406982422": 223, "0005548000335693359": 223, "d83ac439": 223, "2929": 223, "4d78": 223, "b52b": 223, "f297873c3e44": 223, "9710221314803044": 223, "001462493086363885": 223, "9473471466489307": 223, "00285118172031131": 223, "xxxxxxxxxxxxxx": 224, "put": 224, "run0_qscor": 224, "result0_qscor": 224, "rem_quasidistribut": 225, "time_transpil": 225, "time_batch": 225, "cumulative_average_heavy_output_prob": 225, "cumulative_stddev_heavy_output_prob": 225, "rem_cumulative_average_heavy_output_prob": 225, "rem_cumulative_stddev_heavy_output_prob": 225, "rem_heavy_output_prob": 225, "60546875": 225, "71875": 225, "578125": 225, "74609375": 225, "6328125": 225, "546875": 225, "56640625": 225, "76953125": 225, "75390625": 225, "67578125": 225, "6171875": 225, "55078125": 225, "64453125": 225, "6875": 225, "7109375": 225, "82421875": 225, "76171875": 225, "6484375": 225, "6015625": 225, "73828125": 225, "63671875": 225, "69140625": 225, "61328125": 225, "734375": 225, "57421875": 225, "6953125": 225, "55859375": 225, "69921875": 225, "609375": 225, "671875": 225, "77734375": 225, "6796875": 225, "62890625": 225, "6640625": 225, "66796875": 225, "62109375": 225, "703125": 225, "68359375": 225, "58984375": 225, "71484375": 225, "59375": 225, "79296875": 225, "66015625": 225, "65234375": 225, "59765625": 225, "65625": 225, "84765625": 225, "5859375": 225, "5625": 225, "72265625": 225, "640625": 225, "58203125": 225, "54296875": 225, "8203125": 225, "78515625": 225, "7265625": 225, "53515625": 225, "5703125": 225, "5546875": 225, "5390625": 225, "828125": 225, "80859375": 225, "765625": 225, "81640625": 225, "5234375": 225, "73046875": 225, "87890625": 225, "7890625": 225, "7734375": 225, "7421875": 225, "70703125": 225, "50390625": 225, "7578125": 225, "52734375": 225, "78125": 225, "8125": 225, "average_heavy_output_prob": 225, "649203125": 225, "021341903733745705": 225, "672703125": 225, "020984452845629994": 225, "rem_average_heavy_output_prob": 225, "67954478782619": 225, "020869291754367154": 225, "rem_is_succes": 225, "rem_qv_result": 225, "710149650958595": 225, "020289757228807877": 225, "vanilla_4_qubits_": 225, "vanilla_rem_4_qubits_": 225, "Or": 225, "onc": [225, 229], "collect": 226, "demonstr": 226, "rest": 226, "summari": [226, 227], "releas": 227, "date": [227, 228], "finland": 227, "tool": [227, 229], "changelog": 227, "search": 227, "januari": 228, "2004": 228, "AND": 228, "FOR": 228, "reproduct": 228, "shall": 228, "licensor": 228, "owner": 228, "entiti": 228, "author": 228, "grant": 228, "legal": 228, "power": 228, "indirect": 228, "caus": 228, "contract": 228, "ownership": 228, "fifti": 228, "percent": 228, "outstand": 228, "iii": 228, "benefici": 228, "exercis": 228, "mechan": 228, "transform": 228, "translat": 228, "media": 228, "authorship": 228, "attach": 228, "appendix": 228, "editori": 228, "revis": 228, "elabor": 228, "whole": 228, "remain": 228, "link": 228, "bind": 228, "interfac": 228, "thereof": 228, "contribut": 228, "intention": 228, "inclus": 228, "behalf": 228, "electron": 228, "verbal": 228, "mail": 228, "track": 228, "discuss": 228, "exclud": 228, "conspicu": 228, "Not": 228, "contributor": 228, "whom": 228, "been": 228, "incorpor": 228, "subject": 228, "herebi": 228, "perpetu": 228, "worldwid": 228, "charg": 228, "royalti": 228, "irrevoc": 228, "reproduc": 228, "publicli": 228, "sublicens": 228, "patent": 228, "sell": 228, "transfer": 228, "claim": 228, "infring": 228, "alon": 228, "institut": 228, "litig": 228, "counterclaim": 228, "lawsuit": 228, "alleg": 228, "contributori": 228, "redistribut": 228, "medium": 228, "meet": 228, "recipi": 228, "carri": 228, "promin": 228, "retain": 228, "trademark": 228, "pertain": 228, "readabl": 228, "wherev": 228, "third": 228, "parti": 228, "appear": 228, "content": 228, "alongsid": 228, "addendum": 228, "constru": 228, "compli": 228, "explicitli": 228, "notwithstand": 228, "noth": 228, "herein": 228, "supersed": 228, "agreement": 228, "regard": 228, "trade": 228, "servic": [228, 229], "reason": 228, "customari": 228, "disclaim": 228, "merchant": 228, "particular": 228, "respons": 228, "appropri": 228, "risk": 228, "liabil": 228, "event": 228, "tort": 228, "neglig": 228, "deliber": [228, 229], "grossli": 228, "liabl": 228, "damag": 228, "special": 228, "incident": 228, "consequenti": 228, "aris": 228, "inabl": 228, "loss": 228, "goodwil": 228, "stoppag": 228, "failur": 228, "malfunct": 228, "commerci": 228, "even": 228, "advis": 228, "fee": 228, "indemn": 228, "oblig": 228, "indemnifi": 228, "defend": 228, "hold": 228, "harmless": 228, "incur": 228, "assert": 228, "boilerpl": 228, "enclos": 228, "bracket": 228, "comment": 228, "syntax": 228, "archiv": 228, "repositori": [228, 229], "licenc": 228, "src": 228, "raphael": 228, "brieger": 228, "ingo": 228, "roth": 228, "martin": 228, "kliesch": 228, "comprehens": 229, "modular": 229, "easi": 229, "042311": 229, "lett": 229, "080505": 229, "prx": 229, "2023": 229, "150502": 229, "2022": 229, "holist": 229, "032328": 229, "0712": 229, "0921": 229, "2007": 229, "adv": 229, "technol": 229, "2100061": 229, "ieee": 229, "tran": 229, "eng": 229, "legaci": 229, "wrap": 229, "benchmarkexperi": 229, "uv": 229, "highli": 229, "With": 229, "machin": 229, "venv": 229, "read": 229, "prompt": 229, "suppli": 229, "txt": 229, "lock": 229, "directli": 229, "repo": 229, "pypi": 229, "lint": 229, "cicd": 229, "clone": 229, "directori": 229, "edit": 229, "docbuild": 229, "pyproject": 229, "toml": 229, "commit": 229, "upgrad": 229, "transit": 229, "cloud": 229, "prem": 229, "platform": 229, "authent": 229, "example_irb": 229, "example_experi": 229, "setup": 229, "weekli": 229, "daili": 229, "gitlab": 229, "scheduled_experi": 229}, "objects": {"iqm": [[1, 0, 0, "-", "benchmarks"]], "iqm.benchmarks": [[2, 0, 0, "-", "benchmark"], [5, 0, 0, "-", "benchmark_definition"], [15, 0, 0, "-", "circuit_containers"], [19, 0, 0, "-", "coherence"], [28, 0, 0, "-", "compressive_gst"], [47, 0, 0, "-", "entanglement"], [75, 0, 0, "-", "logging_config"], [76, 0, 0, "-", "optimization"], [89, 0, 0, "-", "quantum_volume"], [108, 0, 0, "-", "randomized_benchmarking"], [165, 0, 0, "-", "readout_mitigation"], [169, 0, 0, "-", "utils"], [196, 0, 0, "-", "utils_plots"], [202, 0, 0, "-", "utils_shadows"]], "iqm.benchmarks.benchmark": [[3, 1, 1, "", "BenchmarkBase"], [4, 1, 1, "", "BenchmarkConfigurationBase"]], "iqm.benchmarks.benchmark.BenchmarkBase": [[3, 2, 1, "", "check_requirements"], [3, 2, 1, "", "execute_full_benchmark"], [3, 2, 1, "", "generate_requirements"], [3, 2, 1, "", "name"]], "iqm.benchmarks.benchmark.BenchmarkConfigurationBase": [[4, 3, 1, "", "benchmark"], [4, 3, 1, "", "calset_id"], [4, 3, 1, "", "max_circuits_per_batch"], [4, 3, 1, "", "max_gates_per_batch"], [4, 3, 1, "", "model_config"], [4, 3, 1, "", "physical_layout"], [4, 3, 1, "", "routing_method"], [4, 3, 1, "", "shots"], [4, 3, 1, "", "use_dd"]], "iqm.benchmarks.benchmark_definition": [[6, 1, 1, "", "Benchmark"], [7, 1, 1, "", "BenchmarkAnalysisResult"], [8, 1, 1, "", "BenchmarkObservation"], [9, 1, 1, "", "BenchmarkObservationIdentifier"], [10, 1, 1, "", "BenchmarkRunResult"], [11, 5, 1, "", "add_counts_to_dataset"], [12, 5, 1, "", "default_analysis_function"], [13, 5, 1, "", "merge_datasets_dac"], [14, 5, 1, "", "show_figure"]], "iqm.benchmarks.benchmark_definition.Benchmark": [[6, 2, 1, "", "analysis_function"], [6, 2, 1, "", "analyze"], [6, 2, 1, "", "execute"], [6, 2, 1, "", "name"], [6, 2, 1, "", "run"]], "iqm.benchmarks.benchmark_definition.BenchmarkAnalysisResult": [[7, 2, 1, "", "from_run_result"], [7, 2, 1, "", "plot"], [7, 2, 1, "", "plot_all"]], "iqm.benchmarks.benchmark_definition.BenchmarkObservation": [[8, 3, 1, "", "identifier"], [8, 3, 1, "", "name"], [8, 3, 1, "", "uncertainty"], [8, 3, 1, "", "value"]], "iqm.benchmarks.benchmark_definition.BenchmarkObservationIdentifier": [[9, 3, 1, "", "qubit_indices"], [9, 4, 1, "", "string_identifier"]], "iqm.benchmarks.circuit_containers": [[16, 1, 1, "", "BenchmarkCircuit"], [17, 1, 1, "", "CircuitGroup"], [18, 1, 1, "", "Circuits"]], "iqm.benchmarks.circuit_containers.BenchmarkCircuit": [[16, 3, 1, "", "circuit_groups"], [16, 2, 1, "", "get_circuit_group_by_name"], [16, 4, 1, "", "group_names"], [16, 4, 1, "", "groups"], [16, 3, 1, "", "name"], [16, 4, 1, "", "qubit_indices"], [16, 4, 1, "", "qubit_layouts"], [16, 4, 1, "", "qubit_layouts_by_index"], [16, 4, 1, "", "qubits"]], "iqm.benchmarks.circuit_containers.CircuitGroup": [[17, 2, 1, "", "add_circuit"], [17, 4, 1, "", "circuit_names"], [17, 3, 1, "", "circuits"], [17, 2, 1, "", "get_circuits_by_name"], [17, 3, 1, "", "name"], [17, 4, 1, "", "qubit_layouts"], [17, 4, 1, "", "qubit_layouts_by_index"], [17, 4, 1, "", "qubits"]], "iqm.benchmarks.circuit_containers.Circuits": [[18, 3, 1, "", "benchmark_circuits"], [18, 2, 1, "", "get_benchmark_circuits_by_name"]], "iqm.benchmarks.coherence": [[20, 0, 0, "-", "coherence"]], "iqm.benchmarks.coherence.coherence": [[21, 1, 1, "", "CoherenceBenchmark"], [22, 1, 1, "", "CoherenceConfiguration"], [23, 5, 1, "", "calculate_probabilities"], [24, 5, 1, "", "coherence_analysis"], [25, 5, 1, "", "exp_decay"], [26, 5, 1, "", "fit_coherence_model"], [27, 5, 1, "", "plot_coherence"]], "iqm.benchmarks.coherence.coherence.CoherenceBenchmark": [[21, 2, 1, "", "add_all_meta_to_dataset"], [21, 2, 1, "", "analysis_function"], [21, 2, 1, "", "checkerboard_groups_from_coupling"], [21, 2, 1, "", "execute"], [21, 2, 1, "", "generate_coherence_circuits"]], "iqm.benchmarks.coherence.coherence.CoherenceConfiguration": [[22, 3, 1, "", "benchmark"], [22, 3, 1, "", "coherence_exp"], [22, 3, 1, "", "delays"], [22, 3, 1, "", "model_config"], [22, 3, 1, "", "optimize_sqg"], [22, 3, 1, "", "qiskit_optim_level"]], "iqm.benchmarks.compressive_gst": [[29, 0, 0, "-", "compressive_gst"], [35, 0, 0, "-", "gst_analysis"]], "iqm.benchmarks.compressive_gst.compressive_gst": [[30, 1, 1, "", "CompressiveGST"], [31, 1, 1, "", "GSTConfiguration"], [32, 5, 1, "", "create_predefined_gate_set"], [33, 5, 1, "", "parse_gate_set"], [34, 5, 1, "", "parse_layouts"]], "iqm.benchmarks.compressive_gst.compressive_gst.CompressiveGST": [[30, 2, 1, "", "add_configuration_to_dataset"], [30, 2, 1, "", "analysis_function"], [30, 2, 1, "", "execute"], [30, 2, 1, "", "generate_meas_circuits"]], "iqm.benchmarks.compressive_gst.compressive_gst.GSTConfiguration": [[31, 3, 1, "", "batch_size"], [31, 3, 1, "", "benchmark"], [31, 3, 1, "", "bootstrap_samples"], [31, 3, 1, "", "convergence_criteria"], [31, 3, 1, "", "from_init"], [31, 3, 1, "", "gate_labels"], [31, 3, 1, "", "gate_set"], [31, 3, 1, "", "max_inits"], [31, 3, 1, "", "max_iterations"], [31, 3, 1, "", "model_config"], [31, 3, 1, "", "num_circuits"], [31, 3, 1, "", "opt_method"], [31, 3, 1, "", "parallel_execution"], [31, 3, 1, "", "qubit_layouts"], [31, 3, 1, "", "rank"], [31, 3, 1, "", "seq_len_list"], [31, 3, 1, "", "shots"]], "iqm.benchmarks.compressive_gst.gst_analysis": [[36, 5, 1, "", "bootstrap_errors"], [37, 5, 1, "", "dataframe_to_figure"], [38, 5, 1, "", "dataset_counts_to_mgst_format"], [39, 5, 1, "", "generate_basis_labels"], [40, 5, 1, "", "generate_gate_results"], [41, 5, 1, "", "generate_non_gate_results"], [42, 5, 1, "", "generate_unit_rank_gate_results"], [43, 5, 1, "", "mgst_analysis"], [44, 5, 1, "", "pandas_results_to_observations"], [45, 5, 1, "", "result_str_to_floats"], [46, 5, 1, "", "run_mGST_wrapper"]], "iqm.benchmarks.entanglement": [[48, 0, 0, "-", "ghz"], [62, 0, 0, "-", "graph_states"]], "iqm.benchmarks.entanglement.ghz": [[49, 1, 1, "", "GHZBenchmark"], [50, 1, 1, "", "GHZConfiguration"], [51, 5, 1, "", "fidelity_analysis"], [52, 5, 1, "", "fidelity_ghz_coherences"], [53, 5, 1, "", "fidelity_ghz_randomized_measurements"], [54, 5, 1, "", "generate_ghz_linear"], [55, 5, 1, "", "generate_ghz_log_cruz"], [56, 5, 1, "", "generate_ghz_log_mooney"], [57, 5, 1, "", "generate_ghz_spanning_tree"], [58, 5, 1, "", "generate_ghz_star"], [59, 5, 1, "", "get_cx_map"], [60, 5, 1, "", "get_edges"], [61, 5, 1, "", "plot_fidelities"]], "iqm.benchmarks.entanglement.ghz.GHZBenchmark": [[49, 2, 1, "", "add_configuration_to_dataset"], [49, 2, 1, "", "analysis_function"], [49, 2, 1, "", "append_rms"], [49, 2, 1, "", "execute"], [49, 2, 1, "", "generate_coherence_meas_circuits"], [49, 2, 1, "", "generate_native_ghz"], [49, 2, 1, "", "generate_readout_circuit"]], "iqm.benchmarks.entanglement.ghz.GHZConfiguration": [[50, 3, 1, "", "benchmark"], [50, 3, 1, "", "cal_url"], [50, 3, 1, "", "custom_qubits_array"], [50, 3, 1, "", "fidelity_routine"], [50, 3, 1, "", "mit_shots"], [50, 3, 1, "", "model_config"], [50, 3, 1, "", "num_RMs"], [50, 3, 1, "", "optimize_sqg"], [50, 3, 1, "", "qiskit_optim_level"], [50, 3, 1, "", "qubit_counts"], [50, 3, 1, "", "rem"], [50, 3, 1, "", "state_generation_routine"]], "iqm.benchmarks.entanglement.ghz.GHZConfiguration.iqm.qiskit_iqm.iqm_transpilation": [[50, 3, 1, "", "optimize_single_qubit_gates"]], "iqm.benchmarks.entanglement.graph_states": [[63, 1, 1, "", "GraphStateBenchmark"], [64, 1, 1, "", "GraphStateConfiguration"], [65, 5, 1, "", "find_edges_with_disjoint_neighbors"], [66, 5, 1, "", "generate_graph_state"], [67, 5, 1, "", "generate_minimal_edge_layers"], [68, 5, 1, "", "negativity_analysis"], [69, 5, 1, "", "plot_density_matrix"], [70, 5, 1, "", "plot_max_negativities"], [71, 5, 1, "", "plot_max_negativities_graph"], [72, 5, 1, "", "shadow_tomography_analysis"], [73, 5, 1, "", "state_tomography_analysis"], [74, 5, 1, "", "update_pauli_expectations"]], "iqm.benchmarks.entanglement.graph_states.GraphStateBenchmark": [[63, 2, 1, "", "add_all_circuits_to_dataset"], [63, 2, 1, "", "add_all_meta_to_dataset"], [63, 2, 1, "", "analysis_function"], [63, 2, 1, "", "execute"], [63, 2, 1, "", "generate_all_circuit_info_for_graph_state_benchmark"]], "iqm.benchmarks.entanglement.graph_states.GraphStateConfiguration": [[64, 3, 1, "", "benchmark"], [64, 3, 1, "", "model_config"], [64, 3, 1, "", "n_median_of_means"], [64, 3, 1, "", "n_random_unitaries"], [64, 3, 1, "", "num_bootstraps"], [64, 3, 1, "", "qubits"], [64, 3, 1, "", "tomography"]], "iqm.benchmarks.optimization": [[77, 0, 0, "-", "qscore"]], "iqm.benchmarks.optimization.qscore": [[78, 1, 1, "", "QScoreBenchmark"], [79, 1, 1, "", "QScoreConfiguration"], [80, 5, 1, "", "calculate_optimal_angles_for_QAOA_p1"], [81, 5, 1, "", "compute_expectation_value"], [82, 5, 1, "", "create_objective_function"], [83, 5, 1, "", "cut_cost_function"], [84, 5, 1, "", "get_optimal_angles"], [85, 5, 1, "", "is_successful"], [86, 5, 1, "", "plot_approximation_ratios"], [87, 5, 1, "", "qscore_analysis"], [88, 5, 1, "", "run_QAOA"]], "iqm.benchmarks.optimization.qscore.QScoreBenchmark": [[78, 2, 1, "", "add_all_meta_to_dataset"], [78, 2, 1, "", "analysis_function"], [78, 2, 1, "", "choose_qubits_custom"], [78, 2, 1, "", "choose_qubits_naive"], [78, 2, 1, "", "execute"], [78, 2, 1, "", "generate_maxcut_ansatz"]], "iqm.benchmarks.optimization.qscore.QScoreConfiguration": [[79, 3, 1, "", "REM"], [79, 3, 1, "", "benchmark"], [79, 3, 1, "", "choose_qubits_routine"], [79, 3, 1, "", "custom_qubits_array"], [79, 3, 1, "", "max_num_nodes"], [79, 3, 1, "", "min_num_nodes"], [79, 3, 1, "", "min_num_qubits"], [79, 3, 1, "", "mit_shots"], [79, 3, 1, "", "model_config"], [79, 3, 1, "", "num_instances"], [79, 3, 1, "", "num_qaoa_layers"], [79, 3, 1, "", "optimize_sqg"], [79, 3, 1, "", "qiskit_optim_level"], [79, 3, 1, "", "seed"], [79, 3, 1, "", "use_classically_optimized_angles"], [79, 3, 1, "", "use_virtual_node"]], "iqm.benchmarks.quantum_volume": [[90, 0, 0, "-", "clops"], [96, 0, 0, "-", "quantum_volume"]], "iqm.benchmarks.quantum_volume.clops": [[91, 1, 1, "", "CLOPSBenchmark"], [92, 1, 1, "", "CLOPSConfiguration"], [93, 5, 1, "", "clops_analysis"], [94, 5, 1, "", "plot_times"], [95, 5, 1, "", "retrieve_clops_elapsed_times"]], "iqm.benchmarks.quantum_volume.clops.CLOPSBenchmark": [[91, 2, 1, "", "add_all_meta_to_dataset"], [91, 2, 1, "", "analysis_function"], [91, 2, 1, "", "append_parameterized_unitary"], [91, 2, 1, "", "assign_random_parameters_to_all"], [91, 2, 1, "", "clops_cycle"], [91, 2, 1, "", "execute"], [91, 2, 1, "", "generate_circuit_list"], [91, 2, 1, "", "generate_random_parameters"], [91, 2, 1, "", "generate_single_circuit"], [91, 2, 1, "", "generate_transpiled_clops_templates"]], "iqm.benchmarks.quantum_volume.clops.CLOPSConfiguration": [[92, 3, 1, "", "benchmark"], [92, 3, 1, "", "clops_h_bool"], [92, 3, 1, "", "model_config"], [92, 3, 1, "", "num_circuits"], [92, 3, 1, "", "num_shots"], [92, 3, 1, "", "num_updates"], [92, 3, 1, "", "optimize_sqg"], [92, 3, 1, "", "physical_layout"], [92, 3, 1, "", "qiskit_optim_level"], [92, 3, 1, "", "qubits"], [92, 3, 1, "", "routing_method"]], "iqm.benchmarks.quantum_volume.quantum_volume": [[97, 1, 1, "", "QuantumVolumeBenchmark"], [98, 1, 1, "", "QuantumVolumeConfiguration"], [99, 5, 1, "", "compute_heavy_output_probabilities"], [100, 5, 1, "", "cumulative_hop"], [101, 5, 1, "", "cumulative_std"], [102, 5, 1, "", "get_ideal_heavy_outputs"], [103, 5, 1, "", "get_rem_hops"], [104, 5, 1, "", "heavy_projector"], [105, 5, 1, "", "is_successful"], [106, 5, 1, "", "plot_hop_threshold"], [107, 5, 1, "", "qv_analysis"]], "iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeBenchmark": [[97, 2, 1, "", "add_all_circuits_to_dataset"], [97, 2, 1, "", "add_all_meta_to_dataset"], [97, 2, 1, "", "analysis_function"], [97, 2, 1, "", "execute"], [97, 2, 1, "", "generate_circuit_list"], [97, 2, 1, "", "generate_single_circuit"], [97, 2, 1, "", "get_rem_quasidistro"], [97, 2, 1, "", "submit_single_qv_job"]], "iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeConfiguration": [[98, 3, 1, "", "benchmark"], [98, 3, 1, "", "choose_qubits_routine"], [98, 3, 1, "", "custom_qubits_array"], [98, 3, 1, "", "mit_shots"], [98, 3, 1, "", "model_config"], [98, 3, 1, "", "num_circuits"], [98, 3, 1, "", "num_sigmas"], [98, 3, 1, "", "optimize_sqg"], [98, 3, 1, "", "physical_layout"], [98, 3, 1, "", "qiskit_optim_level"], [98, 3, 1, "", "rem"], [98, 3, 1, "", "routing_method"]], "iqm.benchmarks.randomized_benchmarking": [[109, 0, 0, "-", "clifford_rb"], [114, 0, 0, "-", "direct_rb"], [121, 0, 0, "-", "eplg"], [127, 0, 0, "-", "interleaved_rb"], [132, 0, 0, "-", "mirror_rb"], [141, 0, 0, "-", "multi_lmfit"], [146, 0, 0, "-", "randomized_benchmarking_common"]], "iqm.benchmarks.randomized_benchmarking.clifford_rb": [[110, 0, 0, "-", "clifford_rb"]], "iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb": [[111, 1, 1, "", "CliffordRBConfiguration"], [112, 1, 1, "", "CliffordRandomizedBenchmarking"], [113, 5, 1, "", "clifford_rb_analysis"]], "iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.CliffordRBConfiguration": [[111, 3, 1, "", "benchmark"], [111, 3, 1, "", "model_config"], [111, 3, 1, "", "num_circuit_samples"], [111, 3, 1, "", "parallel_execution"], [111, 3, 1, "", "qubits_array"], [111, 3, 1, "", "sequence_lengths"], [111, 3, 1, "", "shots"]], "iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.CliffordRandomizedBenchmarking": [[112, 2, 1, "", "add_all_circuits_to_dataset"], [112, 2, 1, "", "add_all_metadata_to_dataset"], [112, 2, 1, "", "analysis_function"], [112, 2, 1, "", "execute"]], "iqm.benchmarks.randomized_benchmarking.direct_rb": [[115, 0, 0, "-", "direct_rb"]], "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb": [[116, 1, 1, "", "DirectRBConfiguration"], [117, 1, 1, "", "DirectRandomizedBenchmarking"], [118, 5, 1, "", "direct_rb_analysis"], [119, 5, 1, "", "generate_drb_circuits"], [120, 5, 1, "", "generate_fixed_depth_parallel_drb_circuits"]], "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.DirectRBConfiguration": [[116, 3, 1, "", "benchmark"], [116, 3, 1, "", "clifford_sqg_probabilities"], [116, 3, 1, "", "densities_2q_gates"], [116, 3, 1, "", "depths"], [116, 3, 1, "", "is_eplg"], [116, 3, 1, "", "model_config"], [116, 3, 1, "", "num_circuit_samples"], [116, 3, 1, "", "parallel_execution"], [116, 3, 1, "", "qiskit_optim_level"], [116, 3, 1, "", "qubits_array"], [116, 3, 1, "", "routing_method"], [116, 3, 1, "", "shots"], [116, 3, 1, "", "sqg_gate_ensembles"], [116, 3, 1, "", "two_qubit_gate_ensembles"]], "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.DirectRandomizedBenchmarking": [[117, 2, 1, "", "add_all_meta_to_dataset"], [117, 2, 1, "", "analysis_function"], [117, 2, 1, "", "assign_inputs_to_qubits"], [117, 2, 1, "", "execute"], [117, 2, 1, "", "submit_single_drb_job"]], "iqm.benchmarks.randomized_benchmarking.eplg": [[122, 0, 0, "-", "eplg"]], "iqm.benchmarks.randomized_benchmarking.eplg.eplg": [[123, 1, 1, "", "EPLGBenchmark"], [124, 1, 1, "", "EPLGConfiguration"], [125, 5, 1, "", "eplg_analysis"], [126, 5, 1, "", "plot_layered_fidelities_graph"]], "iqm.benchmarks.randomized_benchmarking.eplg.eplg.EPLGBenchmark": [[123, 2, 1, "", "add_all_meta_to_dataset"], [123, 2, 1, "", "analysis_function"], [123, 2, 1, "", "execute"], [123, 2, 1, "", "validate_custom_qubits_array"], [123, 2, 1, "", "validate_random_chain_inputs"]], "iqm.benchmarks.randomized_benchmarking.eplg.eplg.EPLGConfiguration": [[124, 3, 1, "", "calibration_url"], [124, 3, 1, "", "chain_length"], [124, 3, 1, "", "chain_path_samples"], [124, 3, 1, "", "custom_qubits_array"], [124, 3, 1, "", "drb_circuit_samples"], [124, 3, 1, "", "drb_depths"], [124, 3, 1, "", "max_hamiltonian_path_tries"], [124, 3, 1, "", "model_config"], [124, 3, 1, "", "num_disjoint_layers"]], "iqm.benchmarks.randomized_benchmarking.interleaved_rb": [[128, 0, 0, "-", "interleaved_rb"]], "iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb": [[129, 1, 1, "", "InterleavedRBConfiguration"], [130, 1, 1, "", "InterleavedRandomizedBenchmarking"], [131, 5, 1, "", "interleaved_rb_analysis"]], "iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.InterleavedRBConfiguration": [[129, 3, 1, "", "interleaved_gate"], [129, 3, 1, "", "interleaved_gate_params"], [129, 3, 1, "", "model_config"], [129, 3, 1, "", "num_circuit_samples"], [129, 3, 1, "", "parallel_execution"], [129, 3, 1, "", "qubits_array"], [129, 3, 1, "", "sequence_lengths"], [129, 3, 1, "", "shots"], [129, 3, 1, "", "simultaneous_fit"]], "iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.InterleavedRandomizedBenchmarking": [[130, 2, 1, "", "add_all_circuits_to_dataset"], [130, 2, 1, "", "add_all_meta_to_dataset"], [130, 2, 1, "", "analysis_function"], [130, 2, 1, "", "execute"]], "iqm.benchmarks.randomized_benchmarking.mirror_rb": [[133, 0, 0, "-", "mirror_rb"]], "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb": [[134, 1, 1, "", "MirrorRBConfiguration"], [135, 1, 1, "", "MirrorRandomizedBenchmarking"], [136, 5, 1, "", "compute_polarizations"], [137, 5, 1, "", "generate_fixed_depth_mrb_circuits"], [138, 5, 1, "", "generate_pauli_dressed_mrb_circuits"], [139, 5, 1, "", "list_to_numcircuit_times_numpauli_matrix"], [140, 5, 1, "", "mrb_analysis"]], "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRBConfiguration": [[134, 3, 1, "", "benchmark"], [134, 3, 1, "", "clifford_sqg_probability"], [134, 3, 1, "", "density_2q_gates"], [134, 3, 1, "", "depths_array"], [134, 3, 1, "", "model_config"], [134, 3, 1, "", "num_circuit_samples"], [134, 3, 1, "", "num_pauli_samples"], [134, 3, 1, "", "qiskit_optim_level"], [134, 3, 1, "", "qubits_array"], [134, 3, 1, "", "routing_method"], [134, 3, 1, "", "shots"], [134, 3, 1, "", "simulation_method"], [134, 3, 1, "", "sqg_gate_ensemble"], [134, 3, 1, "", "two_qubit_gate_ensemble"]], "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRandomizedBenchmarking": [[135, 2, 1, "", "add_all_meta_to_dataset"], [135, 2, 1, "", "analysis_function"], [135, 2, 1, "", "execute"], [135, 2, 1, "", "submit_single_mrb_job"]], "iqm.benchmarks.randomized_benchmarking.multi_lmfit": [[142, 5, 1, "", "create_multi_dataset_params"], [143, 5, 1, "", "eval_func_single_dataset"], [144, 5, 1, "", "get_param_names_from_func_signature"], [145, 5, 1, "", "multi_dataset_residual"]], "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common": [[147, 5, 1, "", "compute_inverse_clifford"], [148, 5, 1, "", "edge_grab"], [149, 5, 1, "", "estimate_survival_probabilities"], [150, 5, 1, "", "exponential_rb"], [151, 5, 1, "", "fit_decay_lmfit"], [152, 5, 1, "", "generate_all_rb_circuits"], [153, 5, 1, "", "generate_fixed_depth_parallel_rb_circuits"], [154, 5, 1, "", "generate_random_clifford_seq_circuits"], [155, 5, 1, "", "get_survival_probabilities"], [156, 5, 1, "", "import_native_gate_cliffords"], [157, 5, 1, "", "lmfit_minimizer"], [158, 5, 1, "", "plot_rb_decay"], [159, 5, 1, "", "relabel_qubits_array_from_zero"], [160, 5, 1, "", "submit_parallel_rb_job"], [161, 5, 1, "", "submit_sequential_rb_jobs"], [162, 5, 1, "", "survival_probabilities_parallel"], [163, 5, 1, "", "validate_irb_gate"], [164, 5, 1, "", "validate_rb_qubits"]], "iqm.benchmarks.readout_mitigation": [[166, 1, 1, "", "M3IQM"], [167, 5, 1, "", "apply_readout_error_mitigation"], [168, 5, 1, "", "readout_error_m3"]], "iqm.benchmarks.readout_mitigation.M3IQM": [[166, 2, 1, "", "cals_from_system"]], "iqm.benchmarks.utils": [[170, 5, 1, "", "bootstrap_counts"], [171, 5, 1, "", "count_2q_layers"], [172, 5, 1, "", "count_native_gates"], [173, 5, 1, "", "extract_fidelities"], [174, 5, 1, "", "generate_state_tomography_circuits"], [175, 5, 1, "", "get_Pauli_expectation"], [176, 5, 1, "", "get_active_qubits"], [177, 5, 1, "", "get_iqm_backend"], [178, 5, 1, "", "get_measurement_mapping"], [179, 5, 1, "", "get_neighbors_of_edges"], [180, 5, 1, "", "get_tomography_matrix"], [181, 5, 1, "", "marginal_distribution"], [182, 5, 1, "", "median_with_uncertainty"], [183, 5, 1, "", "perform_backend_transpilation"], [184, 5, 1, "", "random_hamiltonian_path"], [185, 5, 1, "", "reduce_to_active_qubits"], [186, 5, 1, "", "remove_directed_duplicates_to_list"], [187, 5, 1, "", "retrieve_all_counts"], [188, 5, 1, "", "retrieve_all_job_metadata"], [189, 5, 1, "", "set_coupling_map"], [190, 5, 1, "", "sort_batches_by_final_layout"], [191, 5, 1, "", "split_into_disjoint_pairs"], [192, 5, 1, "", "split_sequence_in_chunks"], [193, 5, 1, "", "submit_execute"], [194, 5, 1, "", "timeit"], [195, 5, 1, "", "xrvariable_to_counts"]], "iqm.benchmarks.utils_plots": [[197, 1, 1, "", "GraphPositions"], [198, 5, 1, "", "draw_graph_edges"], [199, 5, 1, "", "evaluate_hamiltonian_paths"], [200, 5, 1, "", "plot_layout_fidelity_graph"], [201, 5, 1, "", "rx_to_nx_graph"]], "iqm.benchmarks.utils_plots.GraphPositions": [[197, 2, 1, "", "create_positions"], [197, 3, 1, "", "deneb_positions"], [197, 3, 1, "", "garnet_positions"], [197, 3, 1, "", "predefined_stations"]], "iqm.benchmarks.utils_shadows": [[203, 5, 1, "", "CUE"], [204, 5, 1, "", "get_local_shadow"], [205, 5, 1, "", "get_negativity"], [206, 5, 1, "", "local_shadow_tomography"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:attribute", "4": "py:property", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "property", "Python property"], "5": ["py", "function", "Python function"]}, "titleterms": {"api": 0, "refer": 0, "iqm": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 212, 213, 214, 215, 217, 218, 223, 224, 225, 227, 229], "benchmark": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 210, 212, 213, 214, 215, 217, 218, 219, 222, 223, 227, 229], "benchmarkbas": 3, "benchmarkconfigurationbas": 4, "benchmark_definit": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14], "benchmarkanalysisresult": 7, "benchmarkobserv": 8, "benchmarkobservationidentifi": 9, "benchmarkrunresult": 10, "add_counts_to_dataset": 11, "default_analysis_funct": 12, "merge_datasets_dac": 13, "show_figur": 14, "circuit_contain": [15, 16, 17, 18], "benchmarkcircuit": 16, "circuitgroup": 17, "circuit": [18, 212, 213, 215, 217], "coher": [19, 20, 21, 22, 23, 24, 25, 26, 27, 216], "coherencebenchmark": 21, "coherenceconfigur": 22, "calculate_prob": 23, "coherence_analysi": 24, "exp_decai": 25, "fit_coherence_model": 26, "plot_coher": 27, "compressive_gst": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46], "compressivegst": 30, "gstconfigur": 31, "create_predefined_gate_set": 32, "parse_gate_set": 33, "parse_layout": 34, "gst_analysi": [35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46], "bootstrap_error": 36, "dataframe_to_figur": 37, "dataset_counts_to_mgst_format": 38, "generate_basis_label": 39, "generate_gate_result": 40, "generate_non_gate_result": 41, "generate_unit_rank_gate_result": 42, "mgst_analysi": 43, "pandas_results_to_observ": 44, "result_str_to_float": 45, "run_mgst_wrapp": 46, "entangl": [47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 220], "ghz": [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 212, 213, 218, 219], "ghzbenchmark": 49, "ghzconfigur": 50, "fidelity_analysi": 51, "fidelity_ghz_coher": 52, "fidelity_ghz_randomized_measur": 53, "generate_ghz_linear": 54, "generate_ghz_log_cruz": 55, "generate_ghz_log_moonei": 56, "generate_ghz_spanning_tre": 57, "generate_ghz_star": 58, "get_cx_map": 59, "get_edg": 60, "plot_fidel": 61, "graph_stat": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74], "graphstatebenchmark": 63, "graphstateconfigur": 64, "find_edges_with_disjoint_neighbor": 65, "generate_graph_st": 66, "generate_minimal_edge_lay": 67, "negativity_analysi": 68, "plot_density_matrix": 69, "plot_max_neg": 70, "plot_max_negativities_graph": 71, "shadow_tomography_analysi": 72, "state_tomography_analysi": 73, "update_pauli_expect": 74, "logging_config": 75, "optim": [76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88], "qscore": [77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 218, 224], "qscorebenchmark": 78, "qscoreconfigur": 79, "calculate_optimal_angles_for_qaoa_p1": 80, "compute_expectation_valu": 81, "create_objective_funct": 82, "cut_cost_funct": 83, "get_optimal_angl": 84, "is_success": [85, 105], "plot_approximation_ratio": 86, "qscore_analysi": 87, "run_qaoa": 88, "quantum_volum": [89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "clop": [90, 91, 92, 93, 94, 95, 212, 213, 215, 218], "clopsbenchmark": 91, "clopsconfigur": 92, "clops_analysi": 93, "plot_tim": 94, "retrieve_clops_elapsed_tim": 95, "quantumvolumebenchmark": 97, "quantumvolumeconfigur": 98, "compute_heavy_output_prob": 99, "cumulative_hop": 100, "cumulative_std": 101, "get_ideal_heavy_output": 102, "get_rem_hop": 103, "heavy_projector": 104, "plot_hop_threshold": 106, "qv_analysi": 107, "randomized_benchmark": [108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "clifford_rb": [109, 110, 111, 112, 113], "cliffordrbconfigur": 111, "cliffordrandomizedbenchmark": 112, "clifford_rb_analysi": 113, "direct_rb": [114, 115, 116, 117, 118, 119, 120], "directrbconfigur": 116, "directrandomizedbenchmark": 117, "direct_rb_analysi": 118, "generate_drb_circuit": 119, "generate_fixed_depth_parallel_drb_circuit": 120, "eplg": [121, 122, 123, 124, 125, 126, 217], "eplgbenchmark": 123, "eplgconfigur": 124, "eplg_analysi": 125, "plot_layered_fidelities_graph": 126, "interleaved_rb": [127, 128, 129, 130, 131], "interleavedrbconfigur": 129, "interleavedrandomizedbenchmark": 130, "interleaved_rb_analysi": 131, "mirror_rb": [132, 133, 134, 135, 136, 137, 138, 139, 140], "mirrorrbconfigur": 134, "mirrorrandomizedbenchmark": 135, "compute_polar": 136, "generate_fixed_depth_mrb_circuit": 137, "generate_pauli_dressed_mrb_circuit": 138, "list_to_numcircuit_times_numpauli_matrix": 139, "mrb_analysi": 140, "multi_lmfit": [141, 142, 143, 144, 145], "create_multi_dataset_param": 142, "eval_func_single_dataset": 143, "get_param_names_from_func_signatur": 144, "multi_dataset_residu": 145, "randomized_benchmarking_common": [146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "compute_inverse_clifford": 147, "edge_grab": 148, "estimate_survival_prob": 149, "exponential_rb": 150, "fit_decay_lmfit": 151, "generate_all_rb_circuit": 152, "generate_fixed_depth_parallel_rb_circuit": 153, "generate_random_clifford_seq_circuit": 154, "get_survival_prob": 155, "import_native_gate_clifford": 156, "lmfit_minim": 157, "plot_rb_decai": 158, "relabel_qubits_array_from_zero": 159, "submit_parallel_rb_job": 160, "submit_sequential_rb_job": 161, "survival_probabilities_parallel": 162, "validate_irb_g": 163, "validate_rb_qubit": 164, "readout_mitig": [165, 166, 167, 168], "m3iqm": 166, "apply_readout_error_mitig": 167, "readout_error_m3": 168, "util": [169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195], "bootstrap_count": 170, "count_2q_lay": 171, "count_native_g": 172, "extract_fidel": 173, "generate_state_tomography_circuit": 174, "get_pauli_expect": 175, "get_active_qubit": 176, "get_iqm_backend": 177, "get_measurement_map": 178, "get_neighbors_of_edg": 179, "get_tomography_matrix": 180, "marginal_distribut": 181, "median_with_uncertainti": 182, "perform_backend_transpil": 183, "random_hamiltonian_path": 184, "reduce_to_active_qubit": 185, "remove_directed_duplicates_to_list": 186, "retrieve_all_count": 187, "retrieve_all_job_metadata": 188, "set_coupling_map": 189, "sort_batches_by_final_layout": 190, "split_into_disjoint_pair": 191, "split_sequence_in_chunk": 192, "submit_execut": 193, "timeit": 194, "xrvariable_to_count": 195, "utils_plot": [196, 197, 198, 199, 200, 201], "graphposit": 197, "draw_graph_edg": 198, "evaluate_hamiltonian_path": 199, "plot_layout_fidelity_graph": 200, "rx_to_nx_graph": 201, "utils_shadow": [202, 203, 204, 205, 206], "cue": 203, "get_local_shadow": 204, "get_neg": 205, "local_shadow_tomographi": 206, "changelog": 207, "version": 207, "2": [207, 209], "43": 207, "42": 207, "41": 207, "40": 207, "39": 207, "38": 207, "37": 207, "36": 207, "35": 207, "34": 207, "33": 207, "32": 207, "31": 207, "30": 207, "29": 207, "28": 207, "27": 207, "26": 207, "25": 207, "24": 207, "23": 207, "22": 207, "21": 207, "20": 207, "19": 207, "18": 207, "17": 207, "16": 207, "15": 207, "14": 207, "13": 207, "12": 207, "11": 207, "10": 207, "9": 207, "8": 207, "7": 207, "6": 207, "5": 207, "4": 207, "3": 207, "1": 207, "0": 207, "develop": [208, 229], "qubit": [209, 220], "clifford": [209, 212, 214, 218], "group": 209, "decomposit": 209, "gener": [209, 215, 223, 225], "1q": [209, 222], "2q": [209, 222], "dump": 209, "pickl": 209, "file": 209, "load": 209, "count": 209, "element": 209, "A": 209, "wai": 209, "work": 209, "out": [209, 221], "invers": 209, "sequenc": 209, "design": 209, "condit": 209, "how": 210, "make": 210, "your": 210, "own": 210, "devic": 211, "spark": 212, "connect": [212, 213], "backend": [212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225], "state": [212, 213, 218, 219, 220], "fidel": [212, 213, 217, 218, 219], "quantum": [212, 213, 218, 225], "volum": [212, 213, 218, 225], "layer": [212, 213, 215, 217], "oper": [212, 213, 215], "per": [212, 213, 215, 217], "second": [212, 213, 215], "random": [212, 214, 217, 218, 222, 223], "interleav": [212, 218, 222], "irb": [212, 222], "q": [212, 213, 224], "score": [212, 213, 224], "summari": [212, 213, 218], "star": 213, "crb": 214, "choos": [214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225], "defin": [214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225], "set": [214, 215, 217, 218, 221, 223, 224, 225], "token": [214, 215, 217, 218, 223, 224, 225], "us": [214, 215, 217, 218, 220, 223, 224, 225, 229], "reson": [214, 215, 217, 218, 223, 224, 225], "configur": [214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225], "run": [214, 215, 216, 217, 219, 220, 222, 223, 224, 225], "experi": [214, 215, 216, 217, 220, 221, 222, 223, 224, 225], "perform": [214, 215, 216, 217, 220, 224, 225], "analysi": [214, 215, 216, 217, 220, 224, 225], "list": [215, 223], "all": [215, 217, 220, 221, 223], "kei": [215, 223], "attribut": [215, 220, 223], "dataset": [215, 220, 223], "The": [215, 223], "observ": [215, 221, 223], "object": [215, 223], "contain": [215, 223], "result": [215, 216, 219, 221, 222, 223], "plot": [215, 216, 217, 220, 221, 223, 225], "error": 217, "gate": [217, 221, 222], "inspect": [217, 220], "final": [217, 221], "visual": 217, "select": 217, "drb": 217, "decai": 217, "sampl": [217, 220], "parallel": 217, "notebook": [218, 229], "mirror": [218, 223], "greenberg": 219, "horn": 219, "zeiling": 219, "definit": 219, "access": [219, 221], "graph": 220, "bipartit": 220, "displai": 220, "maximum": 220, "neg": 220, "pair": 220, "avail": 220, "If": 220, "tomographi": [220, 221], "bootstrap": 220, "bia": 220, "differ": 220, "between": 220, "each": 220, "mean": 220, "measur": 220, "some": 220, "particular": 220, "pauli": 220, "compress": 221, "gst": 221, "minim": 221, "execut": 221, "": 221, "examin": 221, "high": 221, "level": 221, "store": 221, "estim": 221, "further": 221, "process": 221, "creat": 221, "custom": 221, "check": 221, "matrix": 221, "correspond": 221, "pi": 221, "rotat": 221, "around": 221, "y": 221, "axi": 221, "analyz": [222, 223], "non": 222, "nativ": 222, "mrb": 223, "rb": 223, "qv": 225, "exampl": 226, "content": 227, "indic": 227, "tabl": 227, "licens": 228, "instal": 229, "latest": 229, "releas": 229, "option": 229, "depend": 229, "chang": 229, "character": 229, "physic": 229, "hardwar": 229, "jupyt": 229, "python": 229, "script": 229, "schedul": 229, "ci": 229, "cd": 229, "pipelin": 229}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"API Reference": [[0, "api-reference"]], "iqm.benchmarks": [[1, "module-iqm.benchmarks"]], "iqm.benchmarks.benchmark": [[2, "module-iqm.benchmarks.benchmark"]], "iqm.benchmarks.benchmark.BenchmarkBase": [[3, "iqm-benchmarks-benchmark-benchmarkbase"]], "iqm.benchmarks.benchmark.BenchmarkConfigurationBase": [[4, "iqm-benchmarks-benchmark-benchmarkconfigurationbase"]], "iqm.benchmarks.benchmark_definition": [[5, "module-iqm.benchmarks.benchmark_definition"]], "iqm.benchmarks.benchmark_definition.Benchmark": [[6, "iqm-benchmarks-benchmark-definition-benchmark"]], "iqm.benchmarks.benchmark_definition.BenchmarkAnalysisResult": [[7, "iqm-benchmarks-benchmark-definition-benchmarkanalysisresult"]], "iqm.benchmarks.benchmark_definition.BenchmarkObservation": [[8, "iqm-benchmarks-benchmark-definition-benchmarkobservation"]], "iqm.benchmarks.benchmark_definition.BenchmarkObservationIdentifier": [[9, "iqm-benchmarks-benchmark-definition-benchmarkobservationidentifier"]], "iqm.benchmarks.benchmark_definition.BenchmarkRunResult": [[10, "iqm-benchmarks-benchmark-definition-benchmarkrunresult"]], "iqm.benchmarks.benchmark_definition.add_counts_to_dataset": [[11, "iqm-benchmarks-benchmark-definition-add-counts-to-dataset"]], "iqm.benchmarks.benchmark_definition.default_analysis_function": [[12, "iqm-benchmarks-benchmark-definition-default-analysis-function"]], "iqm.benchmarks.benchmark_definition.merge_datasets_dac": [[13, "iqm-benchmarks-benchmark-definition-merge-datasets-dac"]], "iqm.benchmarks.benchmark_definition.show_figure": [[14, "iqm-benchmarks-benchmark-definition-show-figure"]], "iqm.benchmarks.circuit_containers": [[15, "module-iqm.benchmarks.circuit_containers"]], "iqm.benchmarks.circuit_containers.BenchmarkCircuit": [[16, "iqm-benchmarks-circuit-containers-benchmarkcircuit"]], "iqm.benchmarks.circuit_containers.CircuitGroup": [[17, "iqm-benchmarks-circuit-containers-circuitgroup"]], "iqm.benchmarks.circuit_containers.Circuits": [[18, "iqm-benchmarks-circuit-containers-circuits"]], "iqm.benchmarks.coherence": [[19, "module-iqm.benchmarks.coherence"]], "iqm.benchmarks.coherence.coherence": [[20, "module-iqm.benchmarks.coherence.coherence"]], "iqm.benchmarks.coherence.coherence.CoherenceBenchmark": [[21, "iqm-benchmarks-coherence-coherence-coherencebenchmark"]], "iqm.benchmarks.coherence.coherence.CoherenceConfiguration": [[22, "iqm-benchmarks-coherence-coherence-coherenceconfiguration"]], "iqm.benchmarks.coherence.coherence.calculate_probabilities": [[23, "iqm-benchmarks-coherence-coherence-calculate-probabilities"]], "iqm.benchmarks.coherence.coherence.coherence_analysis": [[24, "iqm-benchmarks-coherence-coherence-coherence-analysis"]], "iqm.benchmarks.coherence.coherence.exp_decay": [[25, "iqm-benchmarks-coherence-coherence-exp-decay"]], "iqm.benchmarks.coherence.coherence.fit_coherence_model": [[26, "iqm-benchmarks-coherence-coherence-fit-coherence-model"]], "iqm.benchmarks.coherence.coherence.plot_coherence": [[27, "iqm-benchmarks-coherence-coherence-plot-coherence"]], "iqm.benchmarks.compressive_gst": [[28, "module-iqm.benchmarks.compressive_gst"]], "iqm.benchmarks.compressive_gst.compressive_gst": [[29, "module-iqm.benchmarks.compressive_gst.compressive_gst"]], "iqm.benchmarks.compressive_gst.compressive_gst.CompressiveGST": [[30, "iqm-benchmarks-compressive-gst-compressive-gst-compressivegst"]], "iqm.benchmarks.compressive_gst.compressive_gst.GSTConfiguration": [[31, "iqm-benchmarks-compressive-gst-compressive-gst-gstconfiguration"]], "iqm.benchmarks.compressive_gst.compressive_gst.create_predefined_gate_set": [[32, "iqm-benchmarks-compressive-gst-compressive-gst-create-predefined-gate-set"]], "iqm.benchmarks.compressive_gst.compressive_gst.parse_gate_set": [[33, "iqm-benchmarks-compressive-gst-compressive-gst-parse-gate-set"]], "iqm.benchmarks.compressive_gst.compressive_gst.parse_layouts": [[34, "iqm-benchmarks-compressive-gst-compressive-gst-parse-layouts"]], "iqm.benchmarks.compressive_gst.gst_analysis": [[35, "module-iqm.benchmarks.compressive_gst.gst_analysis"]], "iqm.benchmarks.compressive_gst.gst_analysis.bootstrap_errors": [[36, "iqm-benchmarks-compressive-gst-gst-analysis-bootstrap-errors"]], "iqm.benchmarks.compressive_gst.gst_analysis.dataframe_to_figure": [[37, "iqm-benchmarks-compressive-gst-gst-analysis-dataframe-to-figure"]], "iqm.benchmarks.compressive_gst.gst_analysis.dataset_counts_to_mgst_format": [[38, "iqm-benchmarks-compressive-gst-gst-analysis-dataset-counts-to-mgst-format"]], "iqm.benchmarks.compressive_gst.gst_analysis.generate_basis_labels": [[39, "iqm-benchmarks-compressive-gst-gst-analysis-generate-basis-labels"]], "iqm.benchmarks.compressive_gst.gst_analysis.generate_gate_results": [[40, "iqm-benchmarks-compressive-gst-gst-analysis-generate-gate-results"]], "iqm.benchmarks.compressive_gst.gst_analysis.generate_non_gate_results": [[41, "iqm-benchmarks-compressive-gst-gst-analysis-generate-non-gate-results"]], "iqm.benchmarks.compressive_gst.gst_analysis.generate_unit_rank_gate_results": [[42, "iqm-benchmarks-compressive-gst-gst-analysis-generate-unit-rank-gate-results"]], "iqm.benchmarks.compressive_gst.gst_analysis.mgst_analysis": [[43, "iqm-benchmarks-compressive-gst-gst-analysis-mgst-analysis"]], "iqm.benchmarks.compressive_gst.gst_analysis.pandas_results_to_observations": [[44, "iqm-benchmarks-compressive-gst-gst-analysis-pandas-results-to-observations"]], "iqm.benchmarks.compressive_gst.gst_analysis.result_str_to_floats": [[45, "iqm-benchmarks-compressive-gst-gst-analysis-result-str-to-floats"]], "iqm.benchmarks.compressive_gst.gst_analysis.run_mGST_wrapper": [[46, "iqm-benchmarks-compressive-gst-gst-analysis-run-mgst-wrapper"]], "iqm.benchmarks.entanglement": [[47, "module-iqm.benchmarks.entanglement"]], "iqm.benchmarks.entanglement.ghz": [[48, "module-iqm.benchmarks.entanglement.ghz"]], "iqm.benchmarks.entanglement.ghz.GHZBenchmark": [[49, "iqm-benchmarks-entanglement-ghz-ghzbenchmark"]], "iqm.benchmarks.entanglement.ghz.GHZConfiguration": [[50, "iqm-benchmarks-entanglement-ghz-ghzconfiguration"]], "iqm.benchmarks.entanglement.ghz.fidelity_analysis": [[51, "iqm-benchmarks-entanglement-ghz-fidelity-analysis"]], "iqm.benchmarks.entanglement.ghz.fidelity_ghz_coherences": [[52, "iqm-benchmarks-entanglement-ghz-fidelity-ghz-coherences"]], "iqm.benchmarks.entanglement.ghz.fidelity_ghz_randomized_measurements": [[53, "iqm-benchmarks-entanglement-ghz-fidelity-ghz-randomized-measurements"]], "iqm.benchmarks.entanglement.ghz.generate_ghz_linear": [[54, "iqm-benchmarks-entanglement-ghz-generate-ghz-linear"]], "iqm.benchmarks.entanglement.ghz.generate_ghz_log_cruz": [[55, "iqm-benchmarks-entanglement-ghz-generate-ghz-log-cruz"]], "iqm.benchmarks.entanglement.ghz.generate_ghz_log_mooney": [[56, "iqm-benchmarks-entanglement-ghz-generate-ghz-log-mooney"]], "iqm.benchmarks.entanglement.ghz.generate_ghz_spanning_tree": [[57, "iqm-benchmarks-entanglement-ghz-generate-ghz-spanning-tree"]], "iqm.benchmarks.entanglement.ghz.generate_ghz_star": [[58, "iqm-benchmarks-entanglement-ghz-generate-ghz-star"]], "iqm.benchmarks.entanglement.ghz.get_cx_map": [[59, "iqm-benchmarks-entanglement-ghz-get-cx-map"]], "iqm.benchmarks.entanglement.ghz.get_edges": [[60, "iqm-benchmarks-entanglement-ghz-get-edges"]], "iqm.benchmarks.entanglement.ghz.plot_fidelities": [[61, "iqm-benchmarks-entanglement-ghz-plot-fidelities"]], "iqm.benchmarks.entanglement.graph_states": [[62, "module-iqm.benchmarks.entanglement.graph_states"]], "iqm.benchmarks.entanglement.graph_states.GraphStateBenchmark": [[63, "iqm-benchmarks-entanglement-graph-states-graphstatebenchmark"]], "iqm.benchmarks.entanglement.graph_states.GraphStateConfiguration": [[64, "iqm-benchmarks-entanglement-graph-states-graphstateconfiguration"]], "iqm.benchmarks.entanglement.graph_states.find_edges_with_disjoint_neighbors": [[65, "iqm-benchmarks-entanglement-graph-states-find-edges-with-disjoint-neighbors"]], "iqm.benchmarks.entanglement.graph_states.generate_graph_state": [[66, "iqm-benchmarks-entanglement-graph-states-generate-graph-state"]], "iqm.benchmarks.entanglement.graph_states.generate_minimal_edge_layers": [[67, "iqm-benchmarks-entanglement-graph-states-generate-minimal-edge-layers"]], "iqm.benchmarks.entanglement.graph_states.negativity_analysis": [[68, "iqm-benchmarks-entanglement-graph-states-negativity-analysis"]], "iqm.benchmarks.entanglement.graph_states.plot_density_matrix": [[69, "iqm-benchmarks-entanglement-graph-states-plot-density-matrix"]], "iqm.benchmarks.entanglement.graph_states.plot_max_negativities": [[70, "iqm-benchmarks-entanglement-graph-states-plot-max-negativities"]], "iqm.benchmarks.entanglement.graph_states.plot_max_negativities_graph": [[71, "iqm-benchmarks-entanglement-graph-states-plot-max-negativities-graph"]], "iqm.benchmarks.entanglement.graph_states.shadow_tomography_analysis": [[72, "iqm-benchmarks-entanglement-graph-states-shadow-tomography-analysis"]], "iqm.benchmarks.entanglement.graph_states.state_tomography_analysis": [[73, "iqm-benchmarks-entanglement-graph-states-state-tomography-analysis"]], "iqm.benchmarks.entanglement.graph_states.update_pauli_expectations": [[74, "iqm-benchmarks-entanglement-graph-states-update-pauli-expectations"]], "iqm.benchmarks.logging_config": [[75, "module-iqm.benchmarks.logging_config"]], "iqm.benchmarks.optimization": [[76, "module-iqm.benchmarks.optimization"]], "iqm.benchmarks.optimization.qscore": [[77, "module-iqm.benchmarks.optimization.qscore"]], "iqm.benchmarks.optimization.qscore.QScoreBenchmark": [[78, "iqm-benchmarks-optimization-qscore-qscorebenchmark"]], "iqm.benchmarks.optimization.qscore.QScoreConfiguration": [[79, "iqm-benchmarks-optimization-qscore-qscoreconfiguration"]], "iqm.benchmarks.optimization.qscore.calculate_optimal_angles_for_QAOA_p1": [[80, "iqm-benchmarks-optimization-qscore-calculate-optimal-angles-for-qaoa-p1"]], "iqm.benchmarks.optimization.qscore.compute_expectation_value": [[81, "iqm-benchmarks-optimization-qscore-compute-expectation-value"]], "iqm.benchmarks.optimization.qscore.create_objective_function": [[82, "iqm-benchmarks-optimization-qscore-create-objective-function"]], "iqm.benchmarks.optimization.qscore.cut_cost_function": [[83, "iqm-benchmarks-optimization-qscore-cut-cost-function"]], "iqm.benchmarks.optimization.qscore.get_optimal_angles": [[84, "iqm-benchmarks-optimization-qscore-get-optimal-angles"]], "iqm.benchmarks.optimization.qscore.is_successful": [[85, "iqm-benchmarks-optimization-qscore-is-successful"]], "iqm.benchmarks.optimization.qscore.plot_approximation_ratios": [[86, "iqm-benchmarks-optimization-qscore-plot-approximation-ratios"]], "iqm.benchmarks.optimization.qscore.qscore_analysis": [[87, "iqm-benchmarks-optimization-qscore-qscore-analysis"]], "iqm.benchmarks.optimization.qscore.run_QAOA": [[88, "iqm-benchmarks-optimization-qscore-run-qaoa"]], "iqm.benchmarks.quantum_volume": [[89, "module-iqm.benchmarks.quantum_volume"]], "iqm.benchmarks.quantum_volume.clops": [[90, "module-iqm.benchmarks.quantum_volume.clops"]], "iqm.benchmarks.quantum_volume.clops.CLOPSBenchmark": [[91, "iqm-benchmarks-quantum-volume-clops-clopsbenchmark"]], "iqm.benchmarks.quantum_volume.clops.CLOPSConfiguration": [[92, "iqm-benchmarks-quantum-volume-clops-clopsconfiguration"]], "iqm.benchmarks.quantum_volume.clops.clops_analysis": [[93, "iqm-benchmarks-quantum-volume-clops-clops-analysis"]], "iqm.benchmarks.quantum_volume.clops.plot_times": [[94, "iqm-benchmarks-quantum-volume-clops-plot-times"]], "iqm.benchmarks.quantum_volume.clops.retrieve_clops_elapsed_times": [[95, "iqm-benchmarks-quantum-volume-clops-retrieve-clops-elapsed-times"]], "iqm.benchmarks.quantum_volume.quantum_volume": [[96, "module-iqm.benchmarks.quantum_volume.quantum_volume"]], "iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeBenchmark": [[97, "iqm-benchmarks-quantum-volume-quantum-volume-quantumvolumebenchmark"]], "iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeConfiguration": [[98, "iqm-benchmarks-quantum-volume-quantum-volume-quantumvolumeconfiguration"]], "iqm.benchmarks.quantum_volume.quantum_volume.compute_heavy_output_probabilities": [[99, "iqm-benchmarks-quantum-volume-quantum-volume-compute-heavy-output-probabilities"]], "iqm.benchmarks.quantum_volume.quantum_volume.cumulative_hop": [[100, "iqm-benchmarks-quantum-volume-quantum-volume-cumulative-hop"]], "iqm.benchmarks.quantum_volume.quantum_volume.cumulative_std": [[101, "iqm-benchmarks-quantum-volume-quantum-volume-cumulative-std"]], "iqm.benchmarks.quantum_volume.quantum_volume.get_ideal_heavy_outputs": [[102, "iqm-benchmarks-quantum-volume-quantum-volume-get-ideal-heavy-outputs"]], "iqm.benchmarks.quantum_volume.quantum_volume.get_rem_hops": [[103, "iqm-benchmarks-quantum-volume-quantum-volume-get-rem-hops"]], "iqm.benchmarks.quantum_volume.quantum_volume.heavy_projector": [[104, "iqm-benchmarks-quantum-volume-quantum-volume-heavy-projector"]], "iqm.benchmarks.quantum_volume.quantum_volume.is_successful": [[105, "iqm-benchmarks-quantum-volume-quantum-volume-is-successful"]], "iqm.benchmarks.quantum_volume.quantum_volume.plot_hop_threshold": [[106, "iqm-benchmarks-quantum-volume-quantum-volume-plot-hop-threshold"]], "iqm.benchmarks.quantum_volume.quantum_volume.qv_analysis": [[107, "iqm-benchmarks-quantum-volume-quantum-volume-qv-analysis"]], "iqm.benchmarks.randomized_benchmarking": [[108, "module-iqm.benchmarks.randomized_benchmarking"]], "iqm.benchmarks.randomized_benchmarking.clifford_rb": [[109, "module-iqm.benchmarks.randomized_benchmarking.clifford_rb"]], "iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb": [[110, "module-iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb"]], "iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.CliffordRBConfiguration": [[111, "iqm-benchmarks-randomized-benchmarking-clifford-rb-clifford-rb-cliffordrbconfiguration"]], "iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.CliffordRandomizedBenchmarking": [[112, "iqm-benchmarks-randomized-benchmarking-clifford-rb-clifford-rb-cliffordrandomizedbenchmarking"]], "iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.clifford_rb_analysis": [[113, "iqm-benchmarks-randomized-benchmarking-clifford-rb-clifford-rb-clifford-rb-analysis"]], "iqm.benchmarks.randomized_benchmarking.direct_rb": [[114, "module-iqm.benchmarks.randomized_benchmarking.direct_rb"]], "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb": [[115, "module-iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb"]], "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.DirectRBConfiguration": [[116, "iqm-benchmarks-randomized-benchmarking-direct-rb-direct-rb-directrbconfiguration"]], "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.DirectRandomizedBenchmarking": [[117, "iqm-benchmarks-randomized-benchmarking-direct-rb-direct-rb-directrandomizedbenchmarking"]], "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.direct_rb_analysis": [[118, "iqm-benchmarks-randomized-benchmarking-direct-rb-direct-rb-direct-rb-analysis"]], "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.generate_drb_circuits": [[119, "iqm-benchmarks-randomized-benchmarking-direct-rb-direct-rb-generate-drb-circuits"]], "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.generate_fixed_depth_parallel_drb_circuits": [[120, "iqm-benchmarks-randomized-benchmarking-direct-rb-direct-rb-generate-fixed-depth-parallel-drb-circuits"]], "iqm.benchmarks.randomized_benchmarking.eplg": [[121, "module-iqm.benchmarks.randomized_benchmarking.eplg"]], "iqm.benchmarks.randomized_benchmarking.eplg.eplg": [[122, "module-iqm.benchmarks.randomized_benchmarking.eplg.eplg"]], "iqm.benchmarks.randomized_benchmarking.eplg.eplg.EPLGBenchmark": [[123, "iqm-benchmarks-randomized-benchmarking-eplg-eplg-eplgbenchmark"]], "iqm.benchmarks.randomized_benchmarking.eplg.eplg.EPLGConfiguration": [[124, "iqm-benchmarks-randomized-benchmarking-eplg-eplg-eplgconfiguration"]], "iqm.benchmarks.randomized_benchmarking.eplg.eplg.eplg_analysis": [[125, "iqm-benchmarks-randomized-benchmarking-eplg-eplg-eplg-analysis"]], "iqm.benchmarks.randomized_benchmarking.eplg.eplg.plot_layered_fidelities_graph": [[126, "iqm-benchmarks-randomized-benchmarking-eplg-eplg-plot-layered-fidelities-graph"]], "iqm.benchmarks.randomized_benchmarking.interleaved_rb": [[127, "module-iqm.benchmarks.randomized_benchmarking.interleaved_rb"]], "iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb": [[128, "module-iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb"]], "iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.InterleavedRBConfiguration": [[129, "iqm-benchmarks-randomized-benchmarking-interleaved-rb-interleaved-rb-interleavedrbconfiguration"]], "iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.InterleavedRandomizedBenchmarking": [[130, "iqm-benchmarks-randomized-benchmarking-interleaved-rb-interleaved-rb-interleavedrandomizedbenchmarking"]], "iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.interleaved_rb_analysis": [[131, "iqm-benchmarks-randomized-benchmarking-interleaved-rb-interleaved-rb-interleaved-rb-analysis"]], "iqm.benchmarks.randomized_benchmarking.mirror_rb": [[132, "module-iqm.benchmarks.randomized_benchmarking.mirror_rb"]], "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb": [[133, "module-iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb"]], "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRBConfiguration": [[134, "iqm-benchmarks-randomized-benchmarking-mirror-rb-mirror-rb-mirrorrbconfiguration"]], "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRandomizedBenchmarking": [[135, "iqm-benchmarks-randomized-benchmarking-mirror-rb-mirror-rb-mirrorrandomizedbenchmarking"]], "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.compute_polarizations": [[136, "iqm-benchmarks-randomized-benchmarking-mirror-rb-mirror-rb-compute-polarizations"]], "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.generate_fixed_depth_mrb_circuits": [[137, "iqm-benchmarks-randomized-benchmarking-mirror-rb-mirror-rb-generate-fixed-depth-mrb-circuits"]], "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.generate_pauli_dressed_mrb_circuits": [[138, "iqm-benchmarks-randomized-benchmarking-mirror-rb-mirror-rb-generate-pauli-dressed-mrb-circuits"]], "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.list_to_numcircuit_times_numpauli_matrix": [[139, "iqm-benchmarks-randomized-benchmarking-mirror-rb-mirror-rb-list-to-numcircuit-times-numpauli-matrix"]], "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.mrb_analysis": [[140, "iqm-benchmarks-randomized-benchmarking-mirror-rb-mirror-rb-mrb-analysis"]], "iqm.benchmarks.randomized_benchmarking.multi_lmfit": [[141, "module-iqm.benchmarks.randomized_benchmarking.multi_lmfit"]], "iqm.benchmarks.randomized_benchmarking.multi_lmfit.create_multi_dataset_params": [[142, "iqm-benchmarks-randomized-benchmarking-multi-lmfit-create-multi-dataset-params"]], "iqm.benchmarks.randomized_benchmarking.multi_lmfit.eval_func_single_dataset": [[143, "iqm-benchmarks-randomized-benchmarking-multi-lmfit-eval-func-single-dataset"]], "iqm.benchmarks.randomized_benchmarking.multi_lmfit.get_param_names_from_func_signature": [[144, "iqm-benchmarks-randomized-benchmarking-multi-lmfit-get-param-names-from-func-signature"]], "iqm.benchmarks.randomized_benchmarking.multi_lmfit.multi_dataset_residual": [[145, "iqm-benchmarks-randomized-benchmarking-multi-lmfit-multi-dataset-residual"]], "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common": [[146, "module-iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common"]], "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.compute_inverse_clifford": [[147, "iqm-benchmarks-randomized-benchmarking-randomized-benchmarking-common-compute-inverse-clifford"]], "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.edge_grab": [[148, "iqm-benchmarks-randomized-benchmarking-randomized-benchmarking-common-edge-grab"]], "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.estimate_survival_probabilities": [[149, "iqm-benchmarks-randomized-benchmarking-randomized-benchmarking-common-estimate-survival-probabilities"]], "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.exponential_rb": [[150, "iqm-benchmarks-randomized-benchmarking-randomized-benchmarking-common-exponential-rb"]], "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.fit_decay_lmfit": [[151, "iqm-benchmarks-randomized-benchmarking-randomized-benchmarking-common-fit-decay-lmfit"]], "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.generate_all_rb_circuits": [[152, "iqm-benchmarks-randomized-benchmarking-randomized-benchmarking-common-generate-all-rb-circuits"]], "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.generate_fixed_depth_parallel_rb_circuits": [[153, "iqm-benchmarks-randomized-benchmarking-randomized-benchmarking-common-generate-fixed-depth-parallel-rb-circuits"]], "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.generate_random_clifford_seq_circuits": [[154, "iqm-benchmarks-randomized-benchmarking-randomized-benchmarking-common-generate-random-clifford-seq-circuits"]], "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.get_survival_probabilities": [[155, "iqm-benchmarks-randomized-benchmarking-randomized-benchmarking-common-get-survival-probabilities"]], "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.import_native_gate_cliffords": [[156, "iqm-benchmarks-randomized-benchmarking-randomized-benchmarking-common-import-native-gate-cliffords"]], "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.lmfit_minimizer": [[157, "iqm-benchmarks-randomized-benchmarking-randomized-benchmarking-common-lmfit-minimizer"]], "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.plot_rb_decay": [[158, "iqm-benchmarks-randomized-benchmarking-randomized-benchmarking-common-plot-rb-decay"]], "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.relabel_qubits_array_from_zero": [[159, "iqm-benchmarks-randomized-benchmarking-randomized-benchmarking-common-relabel-qubits-array-from-zero"]], "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.submit_parallel_rb_job": [[160, "iqm-benchmarks-randomized-benchmarking-randomized-benchmarking-common-submit-parallel-rb-job"]], "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.submit_sequential_rb_jobs": [[161, "iqm-benchmarks-randomized-benchmarking-randomized-benchmarking-common-submit-sequential-rb-jobs"]], "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.survival_probabilities_parallel": [[162, "iqm-benchmarks-randomized-benchmarking-randomized-benchmarking-common-survival-probabilities-parallel"]], "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.validate_irb_gate": [[163, "iqm-benchmarks-randomized-benchmarking-randomized-benchmarking-common-validate-irb-gate"]], "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.validate_rb_qubits": [[164, "iqm-benchmarks-randomized-benchmarking-randomized-benchmarking-common-validate-rb-qubits"]], "iqm.benchmarks.readout_mitigation": [[165, "module-iqm.benchmarks.readout_mitigation"]], "iqm.benchmarks.readout_mitigation.M3IQM": [[166, "iqm-benchmarks-readout-mitigation-m3iqm"]], "iqm.benchmarks.readout_mitigation.apply_readout_error_mitigation": [[167, "iqm-benchmarks-readout-mitigation-apply-readout-error-mitigation"]], "iqm.benchmarks.readout_mitigation.readout_error_m3": [[168, "iqm-benchmarks-readout-mitigation-readout-error-m3"]], "iqm.benchmarks.utils": [[169, "module-iqm.benchmarks.utils"]], "iqm.benchmarks.utils.bootstrap_counts": [[170, "iqm-benchmarks-utils-bootstrap-counts"]], "iqm.benchmarks.utils.count_2q_layers": [[171, "iqm-benchmarks-utils-count-2q-layers"]], "iqm.benchmarks.utils.count_native_gates": [[172, "iqm-benchmarks-utils-count-native-gates"]], "iqm.benchmarks.utils.extract_fidelities": [[173, "iqm-benchmarks-utils-extract-fidelities"]], "iqm.benchmarks.utils.generate_state_tomography_circuits": [[174, "iqm-benchmarks-utils-generate-state-tomography-circuits"]], "iqm.benchmarks.utils.get_Pauli_expectation": [[175, "iqm-benchmarks-utils-get-pauli-expectation"]], "iqm.benchmarks.utils.get_active_qubits": [[176, "iqm-benchmarks-utils-get-active-qubits"]], "iqm.benchmarks.utils.get_iqm_backend": [[177, "iqm-benchmarks-utils-get-iqm-backend"]], "iqm.benchmarks.utils.get_measurement_mapping": [[178, "iqm-benchmarks-utils-get-measurement-mapping"]], "iqm.benchmarks.utils.get_neighbors_of_edges": [[179, "iqm-benchmarks-utils-get-neighbors-of-edges"]], "iqm.benchmarks.utils.get_tomography_matrix": [[180, "iqm-benchmarks-utils-get-tomography-matrix"]], "iqm.benchmarks.utils.marginal_distribution": [[181, "iqm-benchmarks-utils-marginal-distribution"]], "iqm.benchmarks.utils.median_with_uncertainty": [[182, "iqm-benchmarks-utils-median-with-uncertainty"]], "iqm.benchmarks.utils.perform_backend_transpilation": [[183, "iqm-benchmarks-utils-perform-backend-transpilation"]], "iqm.benchmarks.utils.random_hamiltonian_path": [[184, "iqm-benchmarks-utils-random-hamiltonian-path"]], "iqm.benchmarks.utils.reduce_to_active_qubits": [[185, "iqm-benchmarks-utils-reduce-to-active-qubits"]], "iqm.benchmarks.utils.remove_directed_duplicates_to_list": [[186, "iqm-benchmarks-utils-remove-directed-duplicates-to-list"]], "iqm.benchmarks.utils.retrieve_all_counts": [[187, "iqm-benchmarks-utils-retrieve-all-counts"]], "iqm.benchmarks.utils.retrieve_all_job_metadata": [[188, "iqm-benchmarks-utils-retrieve-all-job-metadata"]], "iqm.benchmarks.utils.set_coupling_map": [[189, "iqm-benchmarks-utils-set-coupling-map"]], "iqm.benchmarks.utils.sort_batches_by_final_layout": [[190, "iqm-benchmarks-utils-sort-batches-by-final-layout"]], "iqm.benchmarks.utils.split_into_disjoint_pairs": [[191, "iqm-benchmarks-utils-split-into-disjoint-pairs"]], "iqm.benchmarks.utils.split_sequence_in_chunks": [[192, "iqm-benchmarks-utils-split-sequence-in-chunks"]], "iqm.benchmarks.utils.submit_execute": [[193, "iqm-benchmarks-utils-submit-execute"]], "iqm.benchmarks.utils.timeit": [[194, "iqm-benchmarks-utils-timeit"]], "iqm.benchmarks.utils.xrvariable_to_counts": [[195, "iqm-benchmarks-utils-xrvariable-to-counts"]], "iqm.benchmarks.utils_plots": [[196, "module-iqm.benchmarks.utils_plots"]], "iqm.benchmarks.utils_plots.GraphPositions": [[197, "iqm-benchmarks-utils-plots-graphpositions"]], "iqm.benchmarks.utils_plots.draw_graph_edges": [[198, "iqm-benchmarks-utils-plots-draw-graph-edges"]], "iqm.benchmarks.utils_plots.evaluate_hamiltonian_paths": [[199, "iqm-benchmarks-utils-plots-evaluate-hamiltonian-paths"]], "iqm.benchmarks.utils_plots.plot_layout_fidelity_graph": [[200, "iqm-benchmarks-utils-plots-plot-layout-fidelity-graph"]], "iqm.benchmarks.utils_plots.rx_to_nx_graph": [[201, "iqm-benchmarks-utils-plots-rx-to-nx-graph"]], "iqm.benchmarks.utils_shadows": [[202, "module-iqm.benchmarks.utils_shadows"]], "iqm.benchmarks.utils_shadows.CUE": [[203, "iqm-benchmarks-utils-shadows-cue"]], "iqm.benchmarks.utils_shadows.get_local_shadow": [[204, "iqm-benchmarks-utils-shadows-get-local-shadow"]], "iqm.benchmarks.utils_shadows.get_negativity": [[205, "iqm-benchmarks-utils-shadows-get-negativity"]], "iqm.benchmarks.utils_shadows.local_shadow_tomography": [[206, "iqm-benchmarks-utils-shadows-local-shadow-tomography"]], "Changelog": [[207, "changelog"]], "Version 2.43": [[207, "version-2-43"]], "Version 2.42": [[207, "version-2-42"]], "Version 2.41": [[207, "version-2-41"]], "Version 2.40": [[207, "version-2-40"]], "Version 2.39": [[207, "version-2-39"]], "Version 2.38": [[207, "version-2-38"]], "Version 2.37": [[207, "version-2-37"]], "Version 2.36": [[207, "version-2-36"]], "Version 2.35": [[207, "version-2-35"]], "Version 2.34": [[207, "version-2-34"]], "Version 2.33": [[207, "version-2-33"]], "Version 2.32": [[207, "version-2-32"]], "Version 2.31": [[207, "version-2-31"]], "Version 2.30": [[207, "version-2-30"]], "Version 2.29": [[207, "version-2-29"]], "Version 2.28": [[207, "version-2-28"]], "Version 2.27": [[207, "version-2-27"]], "Version 2.26": [[207, "version-2-26"]], "Version 2.25": [[207, "version-2-25"]], "Version 2.24": [[207, "version-2-24"]], "Version 2.23": [[207, "version-2-23"]], "Version 2.22": [[207, "version-2-22"]], "Version 2.21": [[207, "version-2-21"]], "Version 2.20": [[207, "version-2-20"]], "Version 2.19": [[207, "version-2-19"]], "Version 2.18": [[207, "version-2-18"]], "Version 2.17": [[207, "version-2-17"]], "Version 2.16": [[207, "version-2-16"]], "Version 2.15": [[207, "version-2-15"]], "Version 2.14": [[207, "version-2-14"]], "Version 2.13": [[207, "version-2-13"]], "Version 2.12": [[207, "version-2-12"]], "Version 2.11": [[207, "version-2-11"]], "Version 2.10": [[207, "version-2-10"]], "Version 2.9": [[207, "version-2-9"]], "Version 2.8": [[207, "version-2-8"]], "Version 2.7": [[207, "version-2-7"]], "Version 2.6": [[207, "version-2-6"]], "Version 2.5": [[207, "version-2-5"]], "Version 2.4": [[207, "version-2-4"]], "Version 2.3": [[207, "version-2-3"]], "Version 2.2": [[207, "version-2-2"]], "Version 2.1": [[207, "version-2-1"]], "Version 2.0": [[207, "version-2-0"]], "Version 1.12": [[207, "version-1-12"]], "Version 1.11": [[207, "version-1-11"]], "Version 1.10": [[207, "version-1-10"]], "Version 1.9": [[207, "version-1-9"]], "Version 1.8": [[207, "version-1-8"]], "Version 1.7": [[207, "version-1-7"]], "Version 1.6": [[207, "version-1-6"]], "Version 1.5": [[207, "version-1-5"]], "Version 1.4": [[207, "version-1-4"]], "Version 1.3": [[207, "version-1-3"]], "Version 1.2": [[207, "version-1-2"]], "Version 1.1": [[207, "version-1-1"]], "Version 1.0": [[207, "version-1-0"]], "Development": [[208, "development"]], "2-Qubit Clifford Group Decomposition": [[209, "qubit-clifford-group-decomposition"]], "Generate the 1Q Clifford group": [[209, "generate-the-1q-clifford-group"]], "Generate the 2Q Clifford group": [[209, "generate-the-2q-clifford-group"]], "Dump on a pickle file": [[209, "dump-on-a-pickle-file"]], "Load": [[209, "load"]], "Count elements": [[209, "count-elements"]], "2Q": [[209, "q"]], "1Q": [[209, "id1"]], "A way to work out the inverse of sequences": [[209, "a-way-to-work-out-the-inverse-of-sequences"]], "2-design condition": [[209, "design-condition"]], "How to make your own benchmark?": [[210, "how-to-make-your-own-benchmark"]], "Devices": [[211, "devices"]], "Benchmarking IQM Spark": [[212, "benchmarking-iqm-spark"]], "Connect to the backend": [[212, "connect-to-the-backend"], [213, "connect-to-the-backend"]], "GHZ state fidelity": [[212, "ghz-state-fidelity"], [213, "ghz-state-fidelity"], [218, "ghz-state-fidelity"]], "Quantum Volume": [[212, "quantum-volume"], [213, "quantum-volume"], [218, "quantum-volume"]], "Circuit Layer Operations Per Second (CLOPS)": [[212, "circuit-layer-operations-per-second-clops"], [213, "circuit-layer-operations-per-second-clops"], [215, "circuit-layer-operations-per-second-clops"]], "Clifford Randomized Benchmarking": [[212, "clifford-randomized-benchmarking"], [218, "clifford-randomized-benchmarking"]], "Interleaved Randomized Benchmarking (IRB)": [[212, "interleaved-randomized-benchmarking-irb"], [222, "interleaved-randomized-benchmarking-irb"]], "Q-Score": [[212, "q-score"], [213, "q-score"], [224, "q-score"]], "Summary": [[212, "summary"], [213, "summary"]], "Benchmarking IQM Star": [[213, "benchmarking-iqm-star"]], "Clifford Randomized Benchmarking (CRB)": [[214, "clifford-randomized-benchmarking-crb"]], "Choose (or define) a backend": [[214, "choose-or-define-a-backend"], [215, "choose-or-define-a-backend"], [216, "choose-or-define-a-backend"], [217, "choose-or-define-a-backend"], [218, "choose-or-define-a-backend"], [220, "choose-or-define-a-backend"], [221, "choose-or-define-a-backend"], [222, "choose-or-define-a-backend"], [223, "choose-or-define-a-backend"], [224, "choose-or-define-a-backend"], [225, "choose-or-define-a-backend"]], "Set IQM Token if using Resonance.": [[214, "set-iqm-token-if-using-resonance"], [217, "set-iqm-token-if-using-resonance"], [218, "set-iqm-token-if-using-resonance"], [223, "set-iqm-token-if-using-resonance"], [224, "set-iqm-token-if-using-resonance"], [225, "set-iqm-token-if-using-resonance"]], "Randomized Benchmarking Configuration": [[214, "randomized-benchmarking-configuration"], [217, "randomized-benchmarking-configuration"]], "Run the experiment": [[214, "run-the-experiment"], [215, "run-the-experiment"], [216, "run-the-experiment"], [217, "run-the-experiment"], [220, "run-the-experiment"], [223, "run-the-experiment"], [224, "run-the-experiment"], [225, "run-the-experiment"]], "Perform the analysis": [[214, "perform-the-analysis"], [217, "perform-the-analysis"]], "Set IQM Token if using Resonance": [[215, "set-iqm-token-if-using-resonance"]], "CLOPS Configuration": [[215, "clops-configuration"]], "Perform Analysis": [[215, "perform-analysis"], [220, "perform-analysis"], [224, "perform-analysis"], [225, "perform-analysis"]], "List all the keys in the attributes of the dataset": [[215, "list-all-the-keys-in-the-attributes-of-the-dataset"], [223, "list-all-the-keys-in-the-attributes-of-the-dataset"]], "The observation object contains the benchmark results": [[215, "the-observation-object-contains-the-benchmark-results"], [223, "the-observation-object-contains-the-benchmark-results"]], "Generate plots": [[215, "generate-plots"], [223, "generate-plots"], [225, "generate-plots"]], "Coherence experiments": [[216, "coherence-experiments"]], "Coherence Configuration": [[216, "coherence-configuration"]], "Perform analysis and plot results": [[216, "perform-analysis-and-plot-results"]], "Error Per Layered Gate (EPLG)": [[217, "error-per-layered-gate-eplg"]], "Inspect all the fidelities and the final EPLG": [[217, "inspect-all-the-fidelities-and-the-final-eplg"]], "Plot a visualization of the selected layers and all the DRB decays": [[217, "plot-a-visualization-of-the-selected-layers-and-all-the-drb-decays"]], "Inspect a sample circuit (parallel DRB)": [[217, "inspect-a-sample-circuit-parallel-drb"]], "IQM Benchmarks: Summary Notebook": [[218, "iqm-benchmarks-summary-notebook"]], "Interleaved Randomized Benchmarking": [[218, "interleaved-randomized-benchmarking"]], "Mirror Randomized Benchmarking": [[218, "mirror-randomized-benchmarking"]], "CLOPS": [[218, "clops"]], "QScore": [[218, "qscore"]], "Greenberger\u2013Horne\u2013Zeilinger (GHZ) State Fidelity": [[219, "greenbergerhornezeilinger-ghz-state-fidelity"]], "Definition of the benchmark configuration": [[219, "definition-of-the-benchmark-configuration"]], "Running the benchmark": [[219, "running-the-benchmark"]], "Accessing the results": [[219, "accessing-the-results"]], "Graph State Bipartite Entanglement": [[220, "graph-state-bipartite-entanglement"]], "Graph State Configuration": [[220, "graph-state-configuration"]], "Display the maximum negativity for all qubit pairs": [[220, "display-the-maximum-negativity-for-all-qubit-pairs"]], "Inspect the available plots": [[220, "inspect-the-available-plots"]], "Display all available dataset attributes": [[220, "display-all-available-dataset-attributes"]], "If using state tomography: inspect the bootstrap bias (difference between each bootstrap mean and the measured sample)": [[220, "if-using-state-tomography-inspect-the-bootstrap-bias-difference-between-each-bootstrap-mean-and-the-measured-sample"]], "Inspect a graph state for some particular Pauli measurement": [[220, "inspect-a-graph-state-for-some-particular-pauli-measurement"]], "Compressive Gate Set Tomography (GST)": [[221, "compressive-gate-set-tomography-gst"]], "Minimal GST Experiment configurations": [[221, "minimal-gst-experiment-configurations"]], "Execute GST Experiment(s)": [[221, "execute-gst-experiment-s"]], "Examine the results": [[221, "examine-the-results"]], "High level results stored at result.observations": [[221, "high-level-results-stored-at-result-observations"]], "Accessing the final gate set estimates for further processing": [[221, "accessing-the-final-gate-set-estimates-for-further-processing"]], "Plots": [[221, "plots"]], "Creating a custom gate set": [[221, "creating-a-custom-gate-set"]], "Checking out the process matrix corresponding to the pi rotation around the y-axis": [[221, "checking-out-the-process-matrix-corresponding-to-the-pi-rotation-around-the-y-axis"]], "All plots for the custom gate set": [[221, "all-plots-for-the-custom-gate-set"]], "Interleaved Randomized Benchmarking Configuration": [[222, "interleaved-randomized-benchmarking-configuration"]], "1Q gate IRB": [[222, "q-gate-irb"]], "Run the experiment - 1Q gate IRB": [[222, "run-the-experiment-1q-gate-irb"]], "Analyze the results - 1Q gate IRB": [[222, "analyze-the-results-1q-gate-irb"]], "2Q gate IRB": [[222, "id1"]], "Run the experiment - 2Q gate IRB": [[222, "run-the-experiment-2q-gate-irb"]], "Analyze the results - 2Q gate IRB": [[222, "analyze-the-results-2q-gate-irb"]], "IRB for non-native gate": [[222, "irb-for-non-native-gate"]], "Mirror Randomized Benchmarking (MRB)": [[223, "mirror-randomized-benchmarking-mrb"]], "Mirror RB Configuration": [[223, "mirror-rb-configuration"]], "Analyze the results": [[223, "analyze-the-results"]], "Qscore Configuration": [[224, "qscore-configuration"]], "Quantum Volume (QV)": [[225, "quantum-volume-qv"]], "Quantum Volume Configuration": [[225, "quantum-volume-configuration"]], "Examples": [[226, "examples"]], "IQM Benchmarks": [[227, "iqm-benchmarks"], [229, "iqm-benchmarks"]], "Contents": [[227, "contents"]], "Indices and tables": [[227, "indices-and-tables"]], "License": [[228, "license"]], "Installation (latest release)": [[229, "installation-latest-release"]], "Optional dependencies": [[229, "optional-dependencies"]], "Development installation (latest changes)": [[229, "development-installation-latest-changes"]], "Characterize Physical Hardware": [[229, "characterize-physical-hardware"]], "Using a Jupyter notebook or Python script": [[229, "using-a-jupyter-notebook-or-python-script"]], "Scheduled benchmarks using a CI/CD Pipeline": [[229, "scheduled-benchmarks-using-a-ci-cd-pipeline"]]}, "indexentries": {"iqm.benchmarks": [[1, "module-iqm.benchmarks"]], "module": [[1, "module-iqm.benchmarks"], [2, "module-iqm.benchmarks.benchmark"], [5, "module-iqm.benchmarks.benchmark_definition"], [15, "module-iqm.benchmarks.circuit_containers"], [19, "module-iqm.benchmarks.coherence"], [20, "module-iqm.benchmarks.coherence.coherence"], [28, "module-iqm.benchmarks.compressive_gst"], [29, "module-iqm.benchmarks.compressive_gst.compressive_gst"], [35, "module-iqm.benchmarks.compressive_gst.gst_analysis"], [47, "module-iqm.benchmarks.entanglement"], [48, "module-iqm.benchmarks.entanglement.ghz"], [62, "module-iqm.benchmarks.entanglement.graph_states"], [75, "module-iqm.benchmarks.logging_config"], [76, "module-iqm.benchmarks.optimization"], [77, "module-iqm.benchmarks.optimization.qscore"], [89, "module-iqm.benchmarks.quantum_volume"], [90, "module-iqm.benchmarks.quantum_volume.clops"], [96, "module-iqm.benchmarks.quantum_volume.quantum_volume"], [108, "module-iqm.benchmarks.randomized_benchmarking"], [109, "module-iqm.benchmarks.randomized_benchmarking.clifford_rb"], [110, "module-iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb"], [114, "module-iqm.benchmarks.randomized_benchmarking.direct_rb"], [115, "module-iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb"], [121, "module-iqm.benchmarks.randomized_benchmarking.eplg"], [122, "module-iqm.benchmarks.randomized_benchmarking.eplg.eplg"], [127, "module-iqm.benchmarks.randomized_benchmarking.interleaved_rb"], [128, "module-iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb"], [132, "module-iqm.benchmarks.randomized_benchmarking.mirror_rb"], [133, "module-iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb"], [141, "module-iqm.benchmarks.randomized_benchmarking.multi_lmfit"], [146, "module-iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common"], [165, "module-iqm.benchmarks.readout_mitigation"], [169, "module-iqm.benchmarks.utils"], [196, "module-iqm.benchmarks.utils_plots"], [202, "module-iqm.benchmarks.utils_shadows"]], "iqm.benchmarks.benchmark": [[2, "module-iqm.benchmarks.benchmark"]], "benchmarkbase (class in iqm.benchmarks.benchmark)": [[3, "iqm.benchmarks.benchmark.BenchmarkBase"]], "check_requirements() (iqm.benchmarks.benchmark.benchmarkbase static method)": [[3, "iqm.benchmarks.benchmark.BenchmarkBase.check_requirements"]], "execute_full_benchmark() (iqm.benchmarks.benchmark.benchmarkbase method)": [[3, "iqm.benchmarks.benchmark.BenchmarkBase.execute_full_benchmark"]], "generate_requirements() (iqm.benchmarks.benchmark.benchmarkbase method)": [[3, "iqm.benchmarks.benchmark.BenchmarkBase.generate_requirements"]], "name() (iqm.benchmarks.benchmark.benchmarkbase class method)": [[3, "iqm.benchmarks.benchmark.BenchmarkBase.name"]], "benchmarkconfigurationbase (class in iqm.benchmarks.benchmark)": [[4, "iqm.benchmarks.benchmark.BenchmarkConfigurationBase"]], "benchmark (iqm.benchmarks.benchmark.benchmarkconfigurationbase attribute)": [[4, "iqm.benchmarks.benchmark.BenchmarkConfigurationBase.benchmark"]], "calset_id (iqm.benchmarks.benchmark.benchmarkconfigurationbase attribute)": [[4, "iqm.benchmarks.benchmark.BenchmarkConfigurationBase.calset_id"]], "max_circuits_per_batch (iqm.benchmarks.benchmark.benchmarkconfigurationbase attribute)": [[4, "iqm.benchmarks.benchmark.BenchmarkConfigurationBase.max_circuits_per_batch"]], "max_gates_per_batch (iqm.benchmarks.benchmark.benchmarkconfigurationbase attribute)": [[4, "iqm.benchmarks.benchmark.BenchmarkConfigurationBase.max_gates_per_batch"]], "model_config (iqm.benchmarks.benchmark.benchmarkconfigurationbase attribute)": [[4, "iqm.benchmarks.benchmark.BenchmarkConfigurationBase.model_config"]], "physical_layout (iqm.benchmarks.benchmark.benchmarkconfigurationbase attribute)": [[4, "iqm.benchmarks.benchmark.BenchmarkConfigurationBase.physical_layout"]], "routing_method (iqm.benchmarks.benchmark.benchmarkconfigurationbase attribute)": [[4, "iqm.benchmarks.benchmark.BenchmarkConfigurationBase.routing_method"]], "shots (iqm.benchmarks.benchmark.benchmarkconfigurationbase attribute)": [[4, "iqm.benchmarks.benchmark.BenchmarkConfigurationBase.shots"]], "use_dd (iqm.benchmarks.benchmark.benchmarkconfigurationbase attribute)": [[4, "iqm.benchmarks.benchmark.BenchmarkConfigurationBase.use_dd"]], "iqm.benchmarks.benchmark_definition": [[5, "module-iqm.benchmarks.benchmark_definition"]], "benchmark (class in iqm.benchmarks.benchmark_definition)": [[6, "iqm.benchmarks.benchmark_definition.Benchmark"]], "analysis_function() (iqm.benchmarks.benchmark_definition.benchmark static method)": [[6, "iqm.benchmarks.benchmark_definition.Benchmark.analysis_function"]], "analyze() (iqm.benchmarks.benchmark_definition.benchmark method)": [[6, "iqm.benchmarks.benchmark_definition.Benchmark.analyze"]], "execute() (iqm.benchmarks.benchmark_definition.benchmark method)": [[6, "iqm.benchmarks.benchmark_definition.Benchmark.execute"]], "name() (iqm.benchmarks.benchmark_definition.benchmark class method)": [[6, "iqm.benchmarks.benchmark_definition.Benchmark.name"]], "run() (iqm.benchmarks.benchmark_definition.benchmark method)": [[6, "iqm.benchmarks.benchmark_definition.Benchmark.run"]], "benchmarkanalysisresult (class in iqm.benchmarks.benchmark_definition)": [[7, "iqm.benchmarks.benchmark_definition.BenchmarkAnalysisResult"]], "from_run_result() (iqm.benchmarks.benchmark_definition.benchmarkanalysisresult class method)": [[7, "iqm.benchmarks.benchmark_definition.BenchmarkAnalysisResult.from_run_result"]], "plot() (iqm.benchmarks.benchmark_definition.benchmarkanalysisresult method)": [[7, "iqm.benchmarks.benchmark_definition.BenchmarkAnalysisResult.plot"]], "plot_all() (iqm.benchmarks.benchmark_definition.benchmarkanalysisresult method)": [[7, "iqm.benchmarks.benchmark_definition.BenchmarkAnalysisResult.plot_all"]], "benchmarkobservation (class in iqm.benchmarks.benchmark_definition)": [[8, "iqm.benchmarks.benchmark_definition.BenchmarkObservation"]], "identifier (iqm.benchmarks.benchmark_definition.benchmarkobservation attribute)": [[8, "iqm.benchmarks.benchmark_definition.BenchmarkObservation.identifier"]], "name (iqm.benchmarks.benchmark_definition.benchmarkobservation attribute)": [[8, "iqm.benchmarks.benchmark_definition.BenchmarkObservation.name"]], "uncertainty (iqm.benchmarks.benchmark_definition.benchmarkobservation attribute)": [[8, "iqm.benchmarks.benchmark_definition.BenchmarkObservation.uncertainty"]], "value (iqm.benchmarks.benchmark_definition.benchmarkobservation attribute)": [[8, "iqm.benchmarks.benchmark_definition.BenchmarkObservation.value"]], "benchmarkobservationidentifier (class in iqm.benchmarks.benchmark_definition)": [[9, "iqm.benchmarks.benchmark_definition.BenchmarkObservationIdentifier"]], "qubit_indices (iqm.benchmarks.benchmark_definition.benchmarkobservationidentifier attribute)": [[9, "iqm.benchmarks.benchmark_definition.BenchmarkObservationIdentifier.qubit_indices"]], "string_identifier (iqm.benchmarks.benchmark_definition.benchmarkobservationidentifier property)": [[9, "iqm.benchmarks.benchmark_definition.BenchmarkObservationIdentifier.string_identifier"]], "benchmarkrunresult (class in iqm.benchmarks.benchmark_definition)": [[10, "iqm.benchmarks.benchmark_definition.BenchmarkRunResult"]], "add_counts_to_dataset() (in module iqm.benchmarks.benchmark_definition)": [[11, "iqm.benchmarks.benchmark_definition.add_counts_to_dataset"]], "default_analysis_function() (in module iqm.benchmarks.benchmark_definition)": [[12, "iqm.benchmarks.benchmark_definition.default_analysis_function"]], "merge_datasets_dac() (in module iqm.benchmarks.benchmark_definition)": [[13, "iqm.benchmarks.benchmark_definition.merge_datasets_dac"]], "show_figure() (in module iqm.benchmarks.benchmark_definition)": [[14, "iqm.benchmarks.benchmark_definition.show_figure"]], "iqm.benchmarks.circuit_containers": [[15, "module-iqm.benchmarks.circuit_containers"]], "benchmarkcircuit (class in iqm.benchmarks.circuit_containers)": [[16, "iqm.benchmarks.circuit_containers.BenchmarkCircuit"]], "circuit_groups (iqm.benchmarks.circuit_containers.benchmarkcircuit attribute)": [[16, "iqm.benchmarks.circuit_containers.BenchmarkCircuit.circuit_groups"]], "get_circuit_group_by_name() (iqm.benchmarks.circuit_containers.benchmarkcircuit method)": [[16, "iqm.benchmarks.circuit_containers.BenchmarkCircuit.get_circuit_group_by_name"]], "group_names (iqm.benchmarks.circuit_containers.benchmarkcircuit property)": [[16, "iqm.benchmarks.circuit_containers.BenchmarkCircuit.group_names"]], "groups (iqm.benchmarks.circuit_containers.benchmarkcircuit property)": [[16, "iqm.benchmarks.circuit_containers.BenchmarkCircuit.groups"]], "name (iqm.benchmarks.circuit_containers.benchmarkcircuit attribute)": [[16, "iqm.benchmarks.circuit_containers.BenchmarkCircuit.name"]], "qubit_indices (iqm.benchmarks.circuit_containers.benchmarkcircuit property)": [[16, "iqm.benchmarks.circuit_containers.BenchmarkCircuit.qubit_indices"]], "qubit_layouts (iqm.benchmarks.circuit_containers.benchmarkcircuit property)": [[16, "iqm.benchmarks.circuit_containers.BenchmarkCircuit.qubit_layouts"]], "qubit_layouts_by_index (iqm.benchmarks.circuit_containers.benchmarkcircuit property)": [[16, "iqm.benchmarks.circuit_containers.BenchmarkCircuit.qubit_layouts_by_index"]], "qubits (iqm.benchmarks.circuit_containers.benchmarkcircuit property)": [[16, "iqm.benchmarks.circuit_containers.BenchmarkCircuit.qubits"]], "circuitgroup (class in iqm.benchmarks.circuit_containers)": [[17, "iqm.benchmarks.circuit_containers.CircuitGroup"]], "add_circuit() (iqm.benchmarks.circuit_containers.circuitgroup method)": [[17, "iqm.benchmarks.circuit_containers.CircuitGroup.add_circuit"]], "circuit_names (iqm.benchmarks.circuit_containers.circuitgroup property)": [[17, "iqm.benchmarks.circuit_containers.CircuitGroup.circuit_names"]], "circuits (iqm.benchmarks.circuit_containers.circuitgroup attribute)": [[17, "iqm.benchmarks.circuit_containers.CircuitGroup.circuits"]], "get_circuits_by_name() (iqm.benchmarks.circuit_containers.circuitgroup method)": [[17, "iqm.benchmarks.circuit_containers.CircuitGroup.get_circuits_by_name"]], "name (iqm.benchmarks.circuit_containers.circuitgroup attribute)": [[17, "iqm.benchmarks.circuit_containers.CircuitGroup.name"]], "qubit_layouts (iqm.benchmarks.circuit_containers.circuitgroup property)": [[17, "iqm.benchmarks.circuit_containers.CircuitGroup.qubit_layouts"]], "qubit_layouts_by_index (iqm.benchmarks.circuit_containers.circuitgroup property)": [[17, "iqm.benchmarks.circuit_containers.CircuitGroup.qubit_layouts_by_index"]], "qubits (iqm.benchmarks.circuit_containers.circuitgroup property)": [[17, "iqm.benchmarks.circuit_containers.CircuitGroup.qubits"]], "circuits (class in iqm.benchmarks.circuit_containers)": [[18, "iqm.benchmarks.circuit_containers.Circuits"]], "benchmark_circuits (iqm.benchmarks.circuit_containers.circuits attribute)": [[18, "iqm.benchmarks.circuit_containers.Circuits.benchmark_circuits"]], "get_benchmark_circuits_by_name() (iqm.benchmarks.circuit_containers.circuits method)": [[18, "iqm.benchmarks.circuit_containers.Circuits.get_benchmark_circuits_by_name"]], "iqm.benchmarks.coherence": [[19, "module-iqm.benchmarks.coherence"]], "iqm.benchmarks.coherence.coherence": [[20, "module-iqm.benchmarks.coherence.coherence"]], "coherencebenchmark (class in iqm.benchmarks.coherence.coherence)": [[21, "iqm.benchmarks.coherence.coherence.CoherenceBenchmark"]], "add_all_meta_to_dataset() (iqm.benchmarks.coherence.coherence.coherencebenchmark method)": [[21, "iqm.benchmarks.coherence.coherence.CoherenceBenchmark.add_all_meta_to_dataset"]], "analysis_function() (iqm.benchmarks.coherence.coherence.coherencebenchmark static method)": [[21, "iqm.benchmarks.coherence.coherence.CoherenceBenchmark.analysis_function"]], "checkerboard_groups_from_coupling() (iqm.benchmarks.coherence.coherence.coherencebenchmark method)": [[21, "iqm.benchmarks.coherence.coherence.CoherenceBenchmark.checkerboard_groups_from_coupling"]], "execute() (iqm.benchmarks.coherence.coherence.coherencebenchmark method)": [[21, "iqm.benchmarks.coherence.coherence.CoherenceBenchmark.execute"]], "generate_coherence_circuits() (iqm.benchmarks.coherence.coherence.coherencebenchmark method)": [[21, "iqm.benchmarks.coherence.coherence.CoherenceBenchmark.generate_coherence_circuits"]], "coherenceconfiguration (class in iqm.benchmarks.coherence.coherence)": [[22, "iqm.benchmarks.coherence.coherence.CoherenceConfiguration"]], "benchmark (iqm.benchmarks.coherence.coherence.coherenceconfiguration attribute)": [[22, "iqm.benchmarks.coherence.coherence.CoherenceConfiguration.benchmark"]], "coherence_exp (iqm.benchmarks.coherence.coherence.coherenceconfiguration attribute)": [[22, "iqm.benchmarks.coherence.coherence.CoherenceConfiguration.coherence_exp"]], "delays (iqm.benchmarks.coherence.coherence.coherenceconfiguration attribute)": [[22, "iqm.benchmarks.coherence.coherence.CoherenceConfiguration.delays"]], "model_config (iqm.benchmarks.coherence.coherence.coherenceconfiguration attribute)": [[22, "iqm.benchmarks.coherence.coherence.CoherenceConfiguration.model_config"]], "optimize_sqg (iqm.benchmarks.coherence.coherence.coherenceconfiguration attribute)": [[22, "iqm.benchmarks.coherence.coherence.CoherenceConfiguration.optimize_sqg"]], "qiskit_optim_level (iqm.benchmarks.coherence.coherence.coherenceconfiguration attribute)": [[22, "iqm.benchmarks.coherence.coherence.CoherenceConfiguration.qiskit_optim_level"]], "calculate_probabilities() (in module iqm.benchmarks.coherence.coherence)": [[23, "iqm.benchmarks.coherence.coherence.calculate_probabilities"]], "coherence_analysis() (in module iqm.benchmarks.coherence.coherence)": [[24, "iqm.benchmarks.coherence.coherence.coherence_analysis"]], "exp_decay() (in module iqm.benchmarks.coherence.coherence)": [[25, "iqm.benchmarks.coherence.coherence.exp_decay"]], "fit_coherence_model() (in module iqm.benchmarks.coherence.coherence)": [[26, "iqm.benchmarks.coherence.coherence.fit_coherence_model"]], "plot_coherence() (in module iqm.benchmarks.coherence.coherence)": [[27, "iqm.benchmarks.coherence.coherence.plot_coherence"]], "iqm.benchmarks.compressive_gst": [[28, "module-iqm.benchmarks.compressive_gst"]], "iqm.benchmarks.compressive_gst.compressive_gst": [[29, "module-iqm.benchmarks.compressive_gst.compressive_gst"]], "compressivegst (class in iqm.benchmarks.compressive_gst.compressive_gst)": [[30, "iqm.benchmarks.compressive_gst.compressive_gst.CompressiveGST"]], "add_configuration_to_dataset() (iqm.benchmarks.compressive_gst.compressive_gst.compressivegst method)": [[30, "iqm.benchmarks.compressive_gst.compressive_gst.CompressiveGST.add_configuration_to_dataset"]], "analysis_function() (iqm.benchmarks.compressive_gst.compressive_gst.compressivegst static method)": [[30, "iqm.benchmarks.compressive_gst.compressive_gst.CompressiveGST.analysis_function"]], "execute() (iqm.benchmarks.compressive_gst.compressive_gst.compressivegst method)": [[30, "iqm.benchmarks.compressive_gst.compressive_gst.CompressiveGST.execute"]], "generate_meas_circuits() (iqm.benchmarks.compressive_gst.compressive_gst.compressivegst method)": [[30, "iqm.benchmarks.compressive_gst.compressive_gst.CompressiveGST.generate_meas_circuits"]], "gstconfiguration (class in iqm.benchmarks.compressive_gst.compressive_gst)": [[31, "iqm.benchmarks.compressive_gst.compressive_gst.GSTConfiguration"]], "batch_size (iqm.benchmarks.compressive_gst.compressive_gst.gstconfiguration attribute)": [[31, "iqm.benchmarks.compressive_gst.compressive_gst.GSTConfiguration.batch_size"]], "benchmark (iqm.benchmarks.compressive_gst.compressive_gst.gstconfiguration attribute)": [[31, "iqm.benchmarks.compressive_gst.compressive_gst.GSTConfiguration.benchmark"]], "bootstrap_samples (iqm.benchmarks.compressive_gst.compressive_gst.gstconfiguration attribute)": [[31, "iqm.benchmarks.compressive_gst.compressive_gst.GSTConfiguration.bootstrap_samples"]], "convergence_criteria (iqm.benchmarks.compressive_gst.compressive_gst.gstconfiguration attribute)": [[31, "iqm.benchmarks.compressive_gst.compressive_gst.GSTConfiguration.convergence_criteria"]], "from_init (iqm.benchmarks.compressive_gst.compressive_gst.gstconfiguration attribute)": [[31, "iqm.benchmarks.compressive_gst.compressive_gst.GSTConfiguration.from_init"]], "gate_labels (iqm.benchmarks.compressive_gst.compressive_gst.gstconfiguration attribute)": [[31, "iqm.benchmarks.compressive_gst.compressive_gst.GSTConfiguration.gate_labels"]], "gate_set (iqm.benchmarks.compressive_gst.compressive_gst.gstconfiguration attribute)": [[31, "iqm.benchmarks.compressive_gst.compressive_gst.GSTConfiguration.gate_set"]], "max_inits (iqm.benchmarks.compressive_gst.compressive_gst.gstconfiguration attribute)": [[31, "iqm.benchmarks.compressive_gst.compressive_gst.GSTConfiguration.max_inits"]], "max_iterations (iqm.benchmarks.compressive_gst.compressive_gst.gstconfiguration attribute)": [[31, "iqm.benchmarks.compressive_gst.compressive_gst.GSTConfiguration.max_iterations"]], "model_config (iqm.benchmarks.compressive_gst.compressive_gst.gstconfiguration attribute)": [[31, "iqm.benchmarks.compressive_gst.compressive_gst.GSTConfiguration.model_config"]], "num_circuits (iqm.benchmarks.compressive_gst.compressive_gst.gstconfiguration attribute)": [[31, "iqm.benchmarks.compressive_gst.compressive_gst.GSTConfiguration.num_circuits"]], "opt_method (iqm.benchmarks.compressive_gst.compressive_gst.gstconfiguration attribute)": [[31, "iqm.benchmarks.compressive_gst.compressive_gst.GSTConfiguration.opt_method"]], "parallel_execution (iqm.benchmarks.compressive_gst.compressive_gst.gstconfiguration attribute)": [[31, "iqm.benchmarks.compressive_gst.compressive_gst.GSTConfiguration.parallel_execution"]], "qubit_layouts (iqm.benchmarks.compressive_gst.compressive_gst.gstconfiguration attribute)": [[31, "iqm.benchmarks.compressive_gst.compressive_gst.GSTConfiguration.qubit_layouts"]], "rank (iqm.benchmarks.compressive_gst.compressive_gst.gstconfiguration attribute)": [[31, "iqm.benchmarks.compressive_gst.compressive_gst.GSTConfiguration.rank"]], "seq_len_list (iqm.benchmarks.compressive_gst.compressive_gst.gstconfiguration attribute)": [[31, "iqm.benchmarks.compressive_gst.compressive_gst.GSTConfiguration.seq_len_list"]], "shots (iqm.benchmarks.compressive_gst.compressive_gst.gstconfiguration attribute)": [[31, "iqm.benchmarks.compressive_gst.compressive_gst.GSTConfiguration.shots"]], "create_predefined_gate_set() (in module iqm.benchmarks.compressive_gst.compressive_gst)": [[32, "iqm.benchmarks.compressive_gst.compressive_gst.create_predefined_gate_set"]], "parse_gate_set() (in module iqm.benchmarks.compressive_gst.compressive_gst)": [[33, "iqm.benchmarks.compressive_gst.compressive_gst.parse_gate_set"]], "parse_layouts() (in module iqm.benchmarks.compressive_gst.compressive_gst)": [[34, "iqm.benchmarks.compressive_gst.compressive_gst.parse_layouts"]], "iqm.benchmarks.compressive_gst.gst_analysis": [[35, "module-iqm.benchmarks.compressive_gst.gst_analysis"]], "bootstrap_errors() (in module iqm.benchmarks.compressive_gst.gst_analysis)": [[36, "iqm.benchmarks.compressive_gst.gst_analysis.bootstrap_errors"]], "dataframe_to_figure() (in module iqm.benchmarks.compressive_gst.gst_analysis)": [[37, "iqm.benchmarks.compressive_gst.gst_analysis.dataframe_to_figure"]], "dataset_counts_to_mgst_format() (in module iqm.benchmarks.compressive_gst.gst_analysis)": [[38, "iqm.benchmarks.compressive_gst.gst_analysis.dataset_counts_to_mgst_format"]], "generate_basis_labels() (in module iqm.benchmarks.compressive_gst.gst_analysis)": [[39, "iqm.benchmarks.compressive_gst.gst_analysis.generate_basis_labels"]], "generate_gate_results() (in module iqm.benchmarks.compressive_gst.gst_analysis)": [[40, "iqm.benchmarks.compressive_gst.gst_analysis.generate_gate_results"]], "generate_non_gate_results() (in module iqm.benchmarks.compressive_gst.gst_analysis)": [[41, "iqm.benchmarks.compressive_gst.gst_analysis.generate_non_gate_results"]], "generate_unit_rank_gate_results() (in module iqm.benchmarks.compressive_gst.gst_analysis)": [[42, "iqm.benchmarks.compressive_gst.gst_analysis.generate_unit_rank_gate_results"]], "mgst_analysis() (in module iqm.benchmarks.compressive_gst.gst_analysis)": [[43, "iqm.benchmarks.compressive_gst.gst_analysis.mgst_analysis"]], "pandas_results_to_observations() (in module iqm.benchmarks.compressive_gst.gst_analysis)": [[44, "iqm.benchmarks.compressive_gst.gst_analysis.pandas_results_to_observations"]], "result_str_to_floats() (in module iqm.benchmarks.compressive_gst.gst_analysis)": [[45, "iqm.benchmarks.compressive_gst.gst_analysis.result_str_to_floats"]], "run_mgst_wrapper() (in module iqm.benchmarks.compressive_gst.gst_analysis)": [[46, "iqm.benchmarks.compressive_gst.gst_analysis.run_mGST_wrapper"]], "iqm.benchmarks.entanglement": [[47, "module-iqm.benchmarks.entanglement"]], "iqm.benchmarks.entanglement.ghz": [[48, "module-iqm.benchmarks.entanglement.ghz"]], "ghzbenchmark (class in iqm.benchmarks.entanglement.ghz)": [[49, "iqm.benchmarks.entanglement.ghz.GHZBenchmark"]], "add_configuration_to_dataset() (iqm.benchmarks.entanglement.ghz.ghzbenchmark method)": [[49, "iqm.benchmarks.entanglement.ghz.GHZBenchmark.add_configuration_to_dataset"]], "analysis_function() (iqm.benchmarks.entanglement.ghz.ghzbenchmark static method)": [[49, "iqm.benchmarks.entanglement.ghz.GHZBenchmark.analysis_function"]], "append_rms() (iqm.benchmarks.entanglement.ghz.ghzbenchmark method)": [[49, "iqm.benchmarks.entanglement.ghz.GHZBenchmark.append_rms"]], "execute() (iqm.benchmarks.entanglement.ghz.ghzbenchmark method)": [[49, "iqm.benchmarks.entanglement.ghz.GHZBenchmark.execute"]], "generate_coherence_meas_circuits() (iqm.benchmarks.entanglement.ghz.ghzbenchmark method)": [[49, "iqm.benchmarks.entanglement.ghz.GHZBenchmark.generate_coherence_meas_circuits"]], "generate_native_ghz() (iqm.benchmarks.entanglement.ghz.ghzbenchmark method)": [[49, "iqm.benchmarks.entanglement.ghz.GHZBenchmark.generate_native_ghz"]], "generate_readout_circuit() (iqm.benchmarks.entanglement.ghz.ghzbenchmark method)": [[49, "iqm.benchmarks.entanglement.ghz.GHZBenchmark.generate_readout_circuit"]], "ghzconfiguration (class in iqm.benchmarks.entanglement.ghz)": [[50, "iqm.benchmarks.entanglement.ghz.GHZConfiguration"]], "benchmark (iqm.benchmarks.entanglement.ghz.ghzconfiguration attribute)": [[50, "iqm.benchmarks.entanglement.ghz.GHZConfiguration.benchmark"]], "cal_url (iqm.benchmarks.entanglement.ghz.ghzconfiguration attribute)": [[50, "iqm.benchmarks.entanglement.ghz.GHZConfiguration.cal_url"]], "custom_qubits_array (iqm.benchmarks.entanglement.ghz.ghzconfiguration attribute)": [[50, "iqm.benchmarks.entanglement.ghz.GHZConfiguration.custom_qubits_array"]], "fidelity_routine (iqm.benchmarks.entanglement.ghz.ghzconfiguration attribute)": [[50, "iqm.benchmarks.entanglement.ghz.GHZConfiguration.fidelity_routine"]], "mit_shots (iqm.benchmarks.entanglement.ghz.ghzconfiguration attribute)": [[50, "iqm.benchmarks.entanglement.ghz.GHZConfiguration.mit_shots"]], "model_config (iqm.benchmarks.entanglement.ghz.ghzconfiguration attribute)": [[50, "iqm.benchmarks.entanglement.ghz.GHZConfiguration.model_config"]], "num_rms (iqm.benchmarks.entanglement.ghz.ghzconfiguration attribute)": [[50, "iqm.benchmarks.entanglement.ghz.GHZConfiguration.num_RMs"]], "optimize_single_qubit_gates (iqm.benchmarks.entanglement.ghz.ghzconfiguration.iqm.qiskit_iqm.iqm_transpilation attribute)": [[50, "iqm.benchmarks.entanglement.ghz.GHZConfiguration.iqm.qiskit_iqm.iqm_transpilation.optimize_single_qubit_gates"]], "optimize_sqg (iqm.benchmarks.entanglement.ghz.ghzconfiguration attribute)": [[50, "iqm.benchmarks.entanglement.ghz.GHZConfiguration.optimize_sqg"]], "qiskit_optim_level (iqm.benchmarks.entanglement.ghz.ghzconfiguration attribute)": [[50, "iqm.benchmarks.entanglement.ghz.GHZConfiguration.qiskit_optim_level"]], "qubit_counts (iqm.benchmarks.entanglement.ghz.ghzconfiguration attribute)": [[50, "iqm.benchmarks.entanglement.ghz.GHZConfiguration.qubit_counts"]], "rem (iqm.benchmarks.entanglement.ghz.ghzconfiguration attribute)": [[50, "iqm.benchmarks.entanglement.ghz.GHZConfiguration.rem"]], "state_generation_routine (iqm.benchmarks.entanglement.ghz.ghzconfiguration attribute)": [[50, "iqm.benchmarks.entanglement.ghz.GHZConfiguration.state_generation_routine"]], "fidelity_analysis() (in module iqm.benchmarks.entanglement.ghz)": [[51, "iqm.benchmarks.entanglement.ghz.fidelity_analysis"]], "fidelity_ghz_coherences() (in module iqm.benchmarks.entanglement.ghz)": [[52, "iqm.benchmarks.entanglement.ghz.fidelity_ghz_coherences"]], "fidelity_ghz_randomized_measurements() (in module iqm.benchmarks.entanglement.ghz)": [[53, "iqm.benchmarks.entanglement.ghz.fidelity_ghz_randomized_measurements"]], "generate_ghz_linear() (in module iqm.benchmarks.entanglement.ghz)": [[54, "iqm.benchmarks.entanglement.ghz.generate_ghz_linear"]], "generate_ghz_log_cruz() (in module iqm.benchmarks.entanglement.ghz)": [[55, "iqm.benchmarks.entanglement.ghz.generate_ghz_log_cruz"]], "generate_ghz_log_mooney() (in module iqm.benchmarks.entanglement.ghz)": [[56, "iqm.benchmarks.entanglement.ghz.generate_ghz_log_mooney"]], "generate_ghz_spanning_tree() (in module iqm.benchmarks.entanglement.ghz)": [[57, "iqm.benchmarks.entanglement.ghz.generate_ghz_spanning_tree"]], "generate_ghz_star() (in module iqm.benchmarks.entanglement.ghz)": [[58, "iqm.benchmarks.entanglement.ghz.generate_ghz_star"]], "get_cx_map() (in module iqm.benchmarks.entanglement.ghz)": [[59, "iqm.benchmarks.entanglement.ghz.get_cx_map"]], "get_edges() (in module iqm.benchmarks.entanglement.ghz)": [[60, "iqm.benchmarks.entanglement.ghz.get_edges"]], "plot_fidelities() (in module iqm.benchmarks.entanglement.ghz)": [[61, "iqm.benchmarks.entanglement.ghz.plot_fidelities"]], "iqm.benchmarks.entanglement.graph_states": [[62, "module-iqm.benchmarks.entanglement.graph_states"]], "graphstatebenchmark (class in iqm.benchmarks.entanglement.graph_states)": [[63, "iqm.benchmarks.entanglement.graph_states.GraphStateBenchmark"]], "add_all_circuits_to_dataset() (iqm.benchmarks.entanglement.graph_states.graphstatebenchmark method)": [[63, "iqm.benchmarks.entanglement.graph_states.GraphStateBenchmark.add_all_circuits_to_dataset"]], "add_all_meta_to_dataset() (iqm.benchmarks.entanglement.graph_states.graphstatebenchmark method)": [[63, "iqm.benchmarks.entanglement.graph_states.GraphStateBenchmark.add_all_meta_to_dataset"]], "analysis_function() (iqm.benchmarks.entanglement.graph_states.graphstatebenchmark static method)": [[63, "iqm.benchmarks.entanglement.graph_states.GraphStateBenchmark.analysis_function"]], "execute() (iqm.benchmarks.entanglement.graph_states.graphstatebenchmark method)": [[63, "iqm.benchmarks.entanglement.graph_states.GraphStateBenchmark.execute"]], "generate_all_circuit_info_for_graph_state_benchmark() (iqm.benchmarks.entanglement.graph_states.graphstatebenchmark method)": [[63, "iqm.benchmarks.entanglement.graph_states.GraphStateBenchmark.generate_all_circuit_info_for_graph_state_benchmark"]], "graphstateconfiguration (class in iqm.benchmarks.entanglement.graph_states)": [[64, "iqm.benchmarks.entanglement.graph_states.GraphStateConfiguration"]], "benchmark (iqm.benchmarks.entanglement.graph_states.graphstateconfiguration attribute)": [[64, "iqm.benchmarks.entanglement.graph_states.GraphStateConfiguration.benchmark"]], "model_config (iqm.benchmarks.entanglement.graph_states.graphstateconfiguration attribute)": [[64, "iqm.benchmarks.entanglement.graph_states.GraphStateConfiguration.model_config"]], "n_median_of_means (iqm.benchmarks.entanglement.graph_states.graphstateconfiguration attribute)": [[64, "iqm.benchmarks.entanglement.graph_states.GraphStateConfiguration.n_median_of_means"]], "n_random_unitaries (iqm.benchmarks.entanglement.graph_states.graphstateconfiguration attribute)": [[64, "iqm.benchmarks.entanglement.graph_states.GraphStateConfiguration.n_random_unitaries"]], "num_bootstraps (iqm.benchmarks.entanglement.graph_states.graphstateconfiguration attribute)": [[64, "iqm.benchmarks.entanglement.graph_states.GraphStateConfiguration.num_bootstraps"]], "qubits (iqm.benchmarks.entanglement.graph_states.graphstateconfiguration attribute)": [[64, "iqm.benchmarks.entanglement.graph_states.GraphStateConfiguration.qubits"]], "tomography (iqm.benchmarks.entanglement.graph_states.graphstateconfiguration attribute)": [[64, "iqm.benchmarks.entanglement.graph_states.GraphStateConfiguration.tomography"]], "find_edges_with_disjoint_neighbors() (in module iqm.benchmarks.entanglement.graph_states)": [[65, "iqm.benchmarks.entanglement.graph_states.find_edges_with_disjoint_neighbors"]], "generate_graph_state() (in module iqm.benchmarks.entanglement.graph_states)": [[66, "iqm.benchmarks.entanglement.graph_states.generate_graph_state"]], "generate_minimal_edge_layers() (in module iqm.benchmarks.entanglement.graph_states)": [[67, "iqm.benchmarks.entanglement.graph_states.generate_minimal_edge_layers"]], "negativity_analysis() (in module iqm.benchmarks.entanglement.graph_states)": [[68, "iqm.benchmarks.entanglement.graph_states.negativity_analysis"]], "plot_density_matrix() (in module iqm.benchmarks.entanglement.graph_states)": [[69, "iqm.benchmarks.entanglement.graph_states.plot_density_matrix"]], "plot_max_negativities() (in module iqm.benchmarks.entanglement.graph_states)": [[70, "iqm.benchmarks.entanglement.graph_states.plot_max_negativities"]], "plot_max_negativities_graph() (in module iqm.benchmarks.entanglement.graph_states)": [[71, "iqm.benchmarks.entanglement.graph_states.plot_max_negativities_graph"]], "shadow_tomography_analysis() (in module iqm.benchmarks.entanglement.graph_states)": [[72, "iqm.benchmarks.entanglement.graph_states.shadow_tomography_analysis"]], "state_tomography_analysis() (in module iqm.benchmarks.entanglement.graph_states)": [[73, "iqm.benchmarks.entanglement.graph_states.state_tomography_analysis"]], "update_pauli_expectations() (in module iqm.benchmarks.entanglement.graph_states)": [[74, "iqm.benchmarks.entanglement.graph_states.update_pauli_expectations"]], "iqm.benchmarks.logging_config": [[75, "module-iqm.benchmarks.logging_config"]], "iqm.benchmarks.optimization": [[76, "module-iqm.benchmarks.optimization"]], "iqm.benchmarks.optimization.qscore": [[77, "module-iqm.benchmarks.optimization.qscore"]], "qscorebenchmark (class in iqm.benchmarks.optimization.qscore)": [[78, "iqm.benchmarks.optimization.qscore.QScoreBenchmark"]], "add_all_meta_to_dataset() (iqm.benchmarks.optimization.qscore.qscorebenchmark method)": [[78, "iqm.benchmarks.optimization.qscore.QScoreBenchmark.add_all_meta_to_dataset"]], "analysis_function() (iqm.benchmarks.optimization.qscore.qscorebenchmark static method)": [[78, "iqm.benchmarks.optimization.qscore.QScoreBenchmark.analysis_function"]], "choose_qubits_custom() (iqm.benchmarks.optimization.qscore.qscorebenchmark method)": [[78, "iqm.benchmarks.optimization.qscore.QScoreBenchmark.choose_qubits_custom"]], "choose_qubits_naive() (iqm.benchmarks.optimization.qscore.qscorebenchmark static method)": [[78, "iqm.benchmarks.optimization.qscore.QScoreBenchmark.choose_qubits_naive"]], "execute() (iqm.benchmarks.optimization.qscore.qscorebenchmark method)": [[78, "iqm.benchmarks.optimization.qscore.QScoreBenchmark.execute"]], "generate_maxcut_ansatz() (iqm.benchmarks.optimization.qscore.qscorebenchmark method)": [[78, "iqm.benchmarks.optimization.qscore.QScoreBenchmark.generate_maxcut_ansatz"]], "qscoreconfiguration (class in iqm.benchmarks.optimization.qscore)": [[79, "iqm.benchmarks.optimization.qscore.QScoreConfiguration"]], "rem (iqm.benchmarks.optimization.qscore.qscoreconfiguration attribute)": [[79, "iqm.benchmarks.optimization.qscore.QScoreConfiguration.REM"]], "benchmark (iqm.benchmarks.optimization.qscore.qscoreconfiguration attribute)": [[79, "iqm.benchmarks.optimization.qscore.QScoreConfiguration.benchmark"]], "choose_qubits_routine (iqm.benchmarks.optimization.qscore.qscoreconfiguration attribute)": [[79, "iqm.benchmarks.optimization.qscore.QScoreConfiguration.choose_qubits_routine"]], "custom_qubits_array (iqm.benchmarks.optimization.qscore.qscoreconfiguration attribute)": [[79, "iqm.benchmarks.optimization.qscore.QScoreConfiguration.custom_qubits_array"]], "max_num_nodes (iqm.benchmarks.optimization.qscore.qscoreconfiguration attribute)": [[79, "iqm.benchmarks.optimization.qscore.QScoreConfiguration.max_num_nodes"]], "min_num_nodes (iqm.benchmarks.optimization.qscore.qscoreconfiguration attribute)": [[79, "iqm.benchmarks.optimization.qscore.QScoreConfiguration.min_num_nodes"]], "min_num_qubits (iqm.benchmarks.optimization.qscore.qscoreconfiguration attribute)": [[79, "iqm.benchmarks.optimization.qscore.QScoreConfiguration.min_num_qubits"]], "mit_shots (iqm.benchmarks.optimization.qscore.qscoreconfiguration attribute)": [[79, "iqm.benchmarks.optimization.qscore.QScoreConfiguration.mit_shots"]], "model_config (iqm.benchmarks.optimization.qscore.qscoreconfiguration attribute)": [[79, "iqm.benchmarks.optimization.qscore.QScoreConfiguration.model_config"]], "num_instances (iqm.benchmarks.optimization.qscore.qscoreconfiguration attribute)": [[79, "iqm.benchmarks.optimization.qscore.QScoreConfiguration.num_instances"]], "num_qaoa_layers (iqm.benchmarks.optimization.qscore.qscoreconfiguration attribute)": [[79, "iqm.benchmarks.optimization.qscore.QScoreConfiguration.num_qaoa_layers"]], "optimize_sqg (iqm.benchmarks.optimization.qscore.qscoreconfiguration attribute)": [[79, "iqm.benchmarks.optimization.qscore.QScoreConfiguration.optimize_sqg"]], "qiskit_optim_level (iqm.benchmarks.optimization.qscore.qscoreconfiguration attribute)": [[79, "iqm.benchmarks.optimization.qscore.QScoreConfiguration.qiskit_optim_level"]], "seed (iqm.benchmarks.optimization.qscore.qscoreconfiguration attribute)": [[79, "iqm.benchmarks.optimization.qscore.QScoreConfiguration.seed"]], "use_classically_optimized_angles (iqm.benchmarks.optimization.qscore.qscoreconfiguration attribute)": [[79, "iqm.benchmarks.optimization.qscore.QScoreConfiguration.use_classically_optimized_angles"]], "use_virtual_node (iqm.benchmarks.optimization.qscore.qscoreconfiguration attribute)": [[79, "iqm.benchmarks.optimization.qscore.QScoreConfiguration.use_virtual_node"]], "calculate_optimal_angles_for_qaoa_p1() (in module iqm.benchmarks.optimization.qscore)": [[80, "iqm.benchmarks.optimization.qscore.calculate_optimal_angles_for_QAOA_p1"]], "compute_expectation_value() (in module iqm.benchmarks.optimization.qscore)": [[81, "iqm.benchmarks.optimization.qscore.compute_expectation_value"]], "create_objective_function() (in module iqm.benchmarks.optimization.qscore)": [[82, "iqm.benchmarks.optimization.qscore.create_objective_function"]], "cut_cost_function() (in module iqm.benchmarks.optimization.qscore)": [[83, "iqm.benchmarks.optimization.qscore.cut_cost_function"]], "get_optimal_angles() (in module iqm.benchmarks.optimization.qscore)": [[84, "iqm.benchmarks.optimization.qscore.get_optimal_angles"]], "is_successful() (in module iqm.benchmarks.optimization.qscore)": [[85, "iqm.benchmarks.optimization.qscore.is_successful"]], "plot_approximation_ratios() (in module iqm.benchmarks.optimization.qscore)": [[86, "iqm.benchmarks.optimization.qscore.plot_approximation_ratios"]], "qscore_analysis() (in module iqm.benchmarks.optimization.qscore)": [[87, "iqm.benchmarks.optimization.qscore.qscore_analysis"]], "run_qaoa() (in module iqm.benchmarks.optimization.qscore)": [[88, "iqm.benchmarks.optimization.qscore.run_QAOA"]], "iqm.benchmarks.quantum_volume": [[89, "module-iqm.benchmarks.quantum_volume"]], "iqm.benchmarks.quantum_volume.clops": [[90, "module-iqm.benchmarks.quantum_volume.clops"]], "clopsbenchmark (class in iqm.benchmarks.quantum_volume.clops)": [[91, "iqm.benchmarks.quantum_volume.clops.CLOPSBenchmark"]], "add_all_meta_to_dataset() (iqm.benchmarks.quantum_volume.clops.clopsbenchmark method)": [[91, "iqm.benchmarks.quantum_volume.clops.CLOPSBenchmark.add_all_meta_to_dataset"]], "analysis_function() (iqm.benchmarks.quantum_volume.clops.clopsbenchmark static method)": [[91, "iqm.benchmarks.quantum_volume.clops.CLOPSBenchmark.analysis_function"]], "append_parameterized_unitary() (iqm.benchmarks.quantum_volume.clops.clopsbenchmark method)": [[91, "iqm.benchmarks.quantum_volume.clops.CLOPSBenchmark.append_parameterized_unitary"]], "assign_random_parameters_to_all() (iqm.benchmarks.quantum_volume.clops.clopsbenchmark method)": [[91, "iqm.benchmarks.quantum_volume.clops.CLOPSBenchmark.assign_random_parameters_to_all"]], "clops_cycle() (iqm.benchmarks.quantum_volume.clops.clopsbenchmark method)": [[91, "iqm.benchmarks.quantum_volume.clops.CLOPSBenchmark.clops_cycle"]], "execute() (iqm.benchmarks.quantum_volume.clops.clopsbenchmark method)": [[91, "iqm.benchmarks.quantum_volume.clops.CLOPSBenchmark.execute"]], "generate_circuit_list() (iqm.benchmarks.quantum_volume.clops.clopsbenchmark method)": [[91, "iqm.benchmarks.quantum_volume.clops.CLOPSBenchmark.generate_circuit_list"]], "generate_random_parameters() (iqm.benchmarks.quantum_volume.clops.clopsbenchmark method)": [[91, "iqm.benchmarks.quantum_volume.clops.CLOPSBenchmark.generate_random_parameters"]], "generate_single_circuit() (iqm.benchmarks.quantum_volume.clops.clopsbenchmark method)": [[91, "iqm.benchmarks.quantum_volume.clops.CLOPSBenchmark.generate_single_circuit"]], "generate_transpiled_clops_templates() (iqm.benchmarks.quantum_volume.clops.clopsbenchmark method)": [[91, "iqm.benchmarks.quantum_volume.clops.CLOPSBenchmark.generate_transpiled_clops_templates"]], "clopsconfiguration (class in iqm.benchmarks.quantum_volume.clops)": [[92, "iqm.benchmarks.quantum_volume.clops.CLOPSConfiguration"]], "benchmark (iqm.benchmarks.quantum_volume.clops.clopsconfiguration attribute)": [[92, "iqm.benchmarks.quantum_volume.clops.CLOPSConfiguration.benchmark"]], "clops_h_bool (iqm.benchmarks.quantum_volume.clops.clopsconfiguration attribute)": [[92, "iqm.benchmarks.quantum_volume.clops.CLOPSConfiguration.clops_h_bool"]], "model_config (iqm.benchmarks.quantum_volume.clops.clopsconfiguration attribute)": [[92, "iqm.benchmarks.quantum_volume.clops.CLOPSConfiguration.model_config"]], "num_circuits (iqm.benchmarks.quantum_volume.clops.clopsconfiguration attribute)": [[92, "iqm.benchmarks.quantum_volume.clops.CLOPSConfiguration.num_circuits"]], "num_shots (iqm.benchmarks.quantum_volume.clops.clopsconfiguration attribute)": [[92, "iqm.benchmarks.quantum_volume.clops.CLOPSConfiguration.num_shots"]], "num_updates (iqm.benchmarks.quantum_volume.clops.clopsconfiguration attribute)": [[92, "iqm.benchmarks.quantum_volume.clops.CLOPSConfiguration.num_updates"]], "optimize_sqg (iqm.benchmarks.quantum_volume.clops.clopsconfiguration attribute)": [[92, "iqm.benchmarks.quantum_volume.clops.CLOPSConfiguration.optimize_sqg"]], "physical_layout (iqm.benchmarks.quantum_volume.clops.clopsconfiguration attribute)": [[92, "iqm.benchmarks.quantum_volume.clops.CLOPSConfiguration.physical_layout"]], "qiskit_optim_level (iqm.benchmarks.quantum_volume.clops.clopsconfiguration attribute)": [[92, "iqm.benchmarks.quantum_volume.clops.CLOPSConfiguration.qiskit_optim_level"]], "qubits (iqm.benchmarks.quantum_volume.clops.clopsconfiguration attribute)": [[92, "iqm.benchmarks.quantum_volume.clops.CLOPSConfiguration.qubits"]], "routing_method (iqm.benchmarks.quantum_volume.clops.clopsconfiguration attribute)": [[92, "iqm.benchmarks.quantum_volume.clops.CLOPSConfiguration.routing_method"]], "clops_analysis() (in module iqm.benchmarks.quantum_volume.clops)": [[93, "iqm.benchmarks.quantum_volume.clops.clops_analysis"]], "plot_times() (in module iqm.benchmarks.quantum_volume.clops)": [[94, "iqm.benchmarks.quantum_volume.clops.plot_times"]], "retrieve_clops_elapsed_times() (in module iqm.benchmarks.quantum_volume.clops)": [[95, "iqm.benchmarks.quantum_volume.clops.retrieve_clops_elapsed_times"]], "iqm.benchmarks.quantum_volume.quantum_volume": [[96, "module-iqm.benchmarks.quantum_volume.quantum_volume"]], "quantumvolumebenchmark (class in iqm.benchmarks.quantum_volume.quantum_volume)": [[97, "iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeBenchmark"]], "add_all_circuits_to_dataset() (iqm.benchmarks.quantum_volume.quantum_volume.quantumvolumebenchmark method)": [[97, "iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeBenchmark.add_all_circuits_to_dataset"]], "add_all_meta_to_dataset() (iqm.benchmarks.quantum_volume.quantum_volume.quantumvolumebenchmark method)": [[97, "iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeBenchmark.add_all_meta_to_dataset"]], "analysis_function() (iqm.benchmarks.quantum_volume.quantum_volume.quantumvolumebenchmark static method)": [[97, "iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeBenchmark.analysis_function"]], "execute() (iqm.benchmarks.quantum_volume.quantum_volume.quantumvolumebenchmark method)": [[97, "iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeBenchmark.execute"]], "generate_circuit_list() (iqm.benchmarks.quantum_volume.quantum_volume.quantumvolumebenchmark method)": [[97, "iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeBenchmark.generate_circuit_list"]], "generate_single_circuit() (iqm.benchmarks.quantum_volume.quantum_volume.quantumvolumebenchmark static method)": [[97, "iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeBenchmark.generate_single_circuit"]], "get_rem_quasidistro() (iqm.benchmarks.quantum_volume.quantum_volume.quantumvolumebenchmark method)": [[97, "iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeBenchmark.get_rem_quasidistro"]], "submit_single_qv_job() (iqm.benchmarks.quantum_volume.quantum_volume.quantumvolumebenchmark method)": [[97, "iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeBenchmark.submit_single_qv_job"]], "quantumvolumeconfiguration (class in iqm.benchmarks.quantum_volume.quantum_volume)": [[98, "iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeConfiguration"]], "benchmark (iqm.benchmarks.quantum_volume.quantum_volume.quantumvolumeconfiguration attribute)": [[98, "iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeConfiguration.benchmark"]], "choose_qubits_routine (iqm.benchmarks.quantum_volume.quantum_volume.quantumvolumeconfiguration attribute)": [[98, "iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeConfiguration.choose_qubits_routine"]], "custom_qubits_array (iqm.benchmarks.quantum_volume.quantum_volume.quantumvolumeconfiguration attribute)": [[98, "iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeConfiguration.custom_qubits_array"]], "mit_shots (iqm.benchmarks.quantum_volume.quantum_volume.quantumvolumeconfiguration attribute)": [[98, "iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeConfiguration.mit_shots"]], "model_config (iqm.benchmarks.quantum_volume.quantum_volume.quantumvolumeconfiguration attribute)": [[98, "iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeConfiguration.model_config"]], "num_circuits (iqm.benchmarks.quantum_volume.quantum_volume.quantumvolumeconfiguration attribute)": [[98, "iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeConfiguration.num_circuits"]], "num_sigmas (iqm.benchmarks.quantum_volume.quantum_volume.quantumvolumeconfiguration attribute)": [[98, "iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeConfiguration.num_sigmas"]], "optimize_sqg (iqm.benchmarks.quantum_volume.quantum_volume.quantumvolumeconfiguration attribute)": [[98, "iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeConfiguration.optimize_sqg"]], "physical_layout (iqm.benchmarks.quantum_volume.quantum_volume.quantumvolumeconfiguration attribute)": [[98, "iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeConfiguration.physical_layout"]], "qiskit_optim_level (iqm.benchmarks.quantum_volume.quantum_volume.quantumvolumeconfiguration attribute)": [[98, "iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeConfiguration.qiskit_optim_level"]], "rem (iqm.benchmarks.quantum_volume.quantum_volume.quantumvolumeconfiguration attribute)": [[98, "iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeConfiguration.rem"]], "routing_method (iqm.benchmarks.quantum_volume.quantum_volume.quantumvolumeconfiguration attribute)": [[98, "iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeConfiguration.routing_method"]], "compute_heavy_output_probabilities() (in module iqm.benchmarks.quantum_volume.quantum_volume)": [[99, "iqm.benchmarks.quantum_volume.quantum_volume.compute_heavy_output_probabilities"]], "cumulative_hop() (in module iqm.benchmarks.quantum_volume.quantum_volume)": [[100, "iqm.benchmarks.quantum_volume.quantum_volume.cumulative_hop"]], "cumulative_std() (in module iqm.benchmarks.quantum_volume.quantum_volume)": [[101, "iqm.benchmarks.quantum_volume.quantum_volume.cumulative_std"]], "get_ideal_heavy_outputs() (in module iqm.benchmarks.quantum_volume.quantum_volume)": [[102, "iqm.benchmarks.quantum_volume.quantum_volume.get_ideal_heavy_outputs"]], "get_rem_hops() (in module iqm.benchmarks.quantum_volume.quantum_volume)": [[103, "iqm.benchmarks.quantum_volume.quantum_volume.get_rem_hops"]], "heavy_projector() (in module iqm.benchmarks.quantum_volume.quantum_volume)": [[104, "iqm.benchmarks.quantum_volume.quantum_volume.heavy_projector"]], "is_successful() (in module iqm.benchmarks.quantum_volume.quantum_volume)": [[105, "iqm.benchmarks.quantum_volume.quantum_volume.is_successful"]], "plot_hop_threshold() (in module iqm.benchmarks.quantum_volume.quantum_volume)": [[106, "iqm.benchmarks.quantum_volume.quantum_volume.plot_hop_threshold"]], "qv_analysis() (in module iqm.benchmarks.quantum_volume.quantum_volume)": [[107, "iqm.benchmarks.quantum_volume.quantum_volume.qv_analysis"]], "iqm.benchmarks.randomized_benchmarking": [[108, "module-iqm.benchmarks.randomized_benchmarking"]], "iqm.benchmarks.randomized_benchmarking.clifford_rb": [[109, "module-iqm.benchmarks.randomized_benchmarking.clifford_rb"]], "iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb": [[110, "module-iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb"]], "cliffordrbconfiguration (class in iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb)": [[111, "iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.CliffordRBConfiguration"]], "benchmark (iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.cliffordrbconfiguration attribute)": [[111, "iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.CliffordRBConfiguration.benchmark"]], "model_config (iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.cliffordrbconfiguration attribute)": [[111, "iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.CliffordRBConfiguration.model_config"]], "num_circuit_samples (iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.cliffordrbconfiguration attribute)": [[111, "iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.CliffordRBConfiguration.num_circuit_samples"]], "parallel_execution (iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.cliffordrbconfiguration attribute)": [[111, "iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.CliffordRBConfiguration.parallel_execution"]], "qubits_array (iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.cliffordrbconfiguration attribute)": [[111, "iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.CliffordRBConfiguration.qubits_array"]], "sequence_lengths (iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.cliffordrbconfiguration attribute)": [[111, "iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.CliffordRBConfiguration.sequence_lengths"]], "shots (iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.cliffordrbconfiguration attribute)": [[111, "iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.CliffordRBConfiguration.shots"]], "cliffordrandomizedbenchmarking (class in iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb)": [[112, "iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.CliffordRandomizedBenchmarking"]], "add_all_circuits_to_dataset() (iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.cliffordrandomizedbenchmarking method)": [[112, "iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.CliffordRandomizedBenchmarking.add_all_circuits_to_dataset"]], "add_all_metadata_to_dataset() (iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.cliffordrandomizedbenchmarking method)": [[112, "iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.CliffordRandomizedBenchmarking.add_all_metadata_to_dataset"]], "analysis_function() (iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.cliffordrandomizedbenchmarking static method)": [[112, "iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.CliffordRandomizedBenchmarking.analysis_function"]], "execute() (iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.cliffordrandomizedbenchmarking method)": [[112, "iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.CliffordRandomizedBenchmarking.execute"]], "clifford_rb_analysis() (in module iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb)": [[113, "iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.clifford_rb_analysis"]], "iqm.benchmarks.randomized_benchmarking.direct_rb": [[114, "module-iqm.benchmarks.randomized_benchmarking.direct_rb"]], "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb": [[115, "module-iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb"]], "directrbconfiguration (class in iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb)": [[116, "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.DirectRBConfiguration"]], "benchmark (iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.directrbconfiguration attribute)": [[116, "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.DirectRBConfiguration.benchmark"]], "clifford_sqg_probabilities (iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.directrbconfiguration attribute)": [[116, "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.DirectRBConfiguration.clifford_sqg_probabilities"]], "densities_2q_gates (iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.directrbconfiguration attribute)": [[116, "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.DirectRBConfiguration.densities_2q_gates"]], "depths (iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.directrbconfiguration attribute)": [[116, "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.DirectRBConfiguration.depths"]], "is_eplg (iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.directrbconfiguration attribute)": [[116, "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.DirectRBConfiguration.is_eplg"]], "model_config (iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.directrbconfiguration attribute)": [[116, "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.DirectRBConfiguration.model_config"]], "num_circuit_samples (iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.directrbconfiguration attribute)": [[116, "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.DirectRBConfiguration.num_circuit_samples"]], "parallel_execution (iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.directrbconfiguration attribute)": [[116, "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.DirectRBConfiguration.parallel_execution"]], "qiskit_optim_level (iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.directrbconfiguration attribute)": [[116, "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.DirectRBConfiguration.qiskit_optim_level"]], "qubits_array (iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.directrbconfiguration attribute)": [[116, "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.DirectRBConfiguration.qubits_array"]], "routing_method (iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.directrbconfiguration attribute)": [[116, "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.DirectRBConfiguration.routing_method"]], "shots (iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.directrbconfiguration attribute)": [[116, "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.DirectRBConfiguration.shots"]], "sqg_gate_ensembles (iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.directrbconfiguration attribute)": [[116, "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.DirectRBConfiguration.sqg_gate_ensembles"]], "two_qubit_gate_ensembles (iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.directrbconfiguration attribute)": [[116, "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.DirectRBConfiguration.two_qubit_gate_ensembles"]], "directrandomizedbenchmarking (class in iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb)": [[117, "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.DirectRandomizedBenchmarking"]], "add_all_meta_to_dataset() (iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.directrandomizedbenchmarking method)": [[117, "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.DirectRandomizedBenchmarking.add_all_meta_to_dataset"]], "analysis_function() (iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.directrandomizedbenchmarking static method)": [[117, "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.DirectRandomizedBenchmarking.analysis_function"]], "assign_inputs_to_qubits() (iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.directrandomizedbenchmarking method)": [[117, "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.DirectRandomizedBenchmarking.assign_inputs_to_qubits"]], "execute() (iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.directrandomizedbenchmarking method)": [[117, "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.DirectRandomizedBenchmarking.execute"]], "submit_single_drb_job() (iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.directrandomizedbenchmarking method)": [[117, "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.DirectRandomizedBenchmarking.submit_single_drb_job"]], "direct_rb_analysis() (in module iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb)": [[118, "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.direct_rb_analysis"]], "generate_drb_circuits() (in module iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb)": [[119, "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.generate_drb_circuits"]], "generate_fixed_depth_parallel_drb_circuits() (in module iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb)": [[120, "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.generate_fixed_depth_parallel_drb_circuits"]], "iqm.benchmarks.randomized_benchmarking.eplg": [[121, "module-iqm.benchmarks.randomized_benchmarking.eplg"]], "iqm.benchmarks.randomized_benchmarking.eplg.eplg": [[122, "module-iqm.benchmarks.randomized_benchmarking.eplg.eplg"]], "eplgbenchmark (class in iqm.benchmarks.randomized_benchmarking.eplg.eplg)": [[123, "iqm.benchmarks.randomized_benchmarking.eplg.eplg.EPLGBenchmark"]], "add_all_meta_to_dataset() (iqm.benchmarks.randomized_benchmarking.eplg.eplg.eplgbenchmark method)": [[123, "iqm.benchmarks.randomized_benchmarking.eplg.eplg.EPLGBenchmark.add_all_meta_to_dataset"]], "analysis_function() (iqm.benchmarks.randomized_benchmarking.eplg.eplg.eplgbenchmark static method)": [[123, "iqm.benchmarks.randomized_benchmarking.eplg.eplg.EPLGBenchmark.analysis_function"]], "execute() (iqm.benchmarks.randomized_benchmarking.eplg.eplg.eplgbenchmark method)": [[123, "iqm.benchmarks.randomized_benchmarking.eplg.eplg.EPLGBenchmark.execute"]], "validate_custom_qubits_array() (iqm.benchmarks.randomized_benchmarking.eplg.eplg.eplgbenchmark method)": [[123, "iqm.benchmarks.randomized_benchmarking.eplg.eplg.EPLGBenchmark.validate_custom_qubits_array"]], "validate_random_chain_inputs() (iqm.benchmarks.randomized_benchmarking.eplg.eplg.eplgbenchmark method)": [[123, "iqm.benchmarks.randomized_benchmarking.eplg.eplg.EPLGBenchmark.validate_random_chain_inputs"]], "eplgconfiguration (class in iqm.benchmarks.randomized_benchmarking.eplg.eplg)": [[124, "iqm.benchmarks.randomized_benchmarking.eplg.eplg.EPLGConfiguration"]], "calibration_url (iqm.benchmarks.randomized_benchmarking.eplg.eplg.eplgconfiguration attribute)": [[124, "iqm.benchmarks.randomized_benchmarking.eplg.eplg.EPLGConfiguration.calibration_url"]], "chain_length (iqm.benchmarks.randomized_benchmarking.eplg.eplg.eplgconfiguration attribute)": [[124, "iqm.benchmarks.randomized_benchmarking.eplg.eplg.EPLGConfiguration.chain_length"]], "chain_path_samples (iqm.benchmarks.randomized_benchmarking.eplg.eplg.eplgconfiguration attribute)": [[124, "iqm.benchmarks.randomized_benchmarking.eplg.eplg.EPLGConfiguration.chain_path_samples"]], "custom_qubits_array (iqm.benchmarks.randomized_benchmarking.eplg.eplg.eplgconfiguration attribute)": [[124, "iqm.benchmarks.randomized_benchmarking.eplg.eplg.EPLGConfiguration.custom_qubits_array"]], "drb_circuit_samples (iqm.benchmarks.randomized_benchmarking.eplg.eplg.eplgconfiguration attribute)": [[124, "iqm.benchmarks.randomized_benchmarking.eplg.eplg.EPLGConfiguration.drb_circuit_samples"]], "drb_depths (iqm.benchmarks.randomized_benchmarking.eplg.eplg.eplgconfiguration attribute)": [[124, "iqm.benchmarks.randomized_benchmarking.eplg.eplg.EPLGConfiguration.drb_depths"]], "max_hamiltonian_path_tries (iqm.benchmarks.randomized_benchmarking.eplg.eplg.eplgconfiguration attribute)": [[124, "iqm.benchmarks.randomized_benchmarking.eplg.eplg.EPLGConfiguration.max_hamiltonian_path_tries"]], "model_config (iqm.benchmarks.randomized_benchmarking.eplg.eplg.eplgconfiguration attribute)": [[124, "iqm.benchmarks.randomized_benchmarking.eplg.eplg.EPLGConfiguration.model_config"]], "num_disjoint_layers (iqm.benchmarks.randomized_benchmarking.eplg.eplg.eplgconfiguration attribute)": [[124, "iqm.benchmarks.randomized_benchmarking.eplg.eplg.EPLGConfiguration.num_disjoint_layers"]], "eplg_analysis() (in module iqm.benchmarks.randomized_benchmarking.eplg.eplg)": [[125, "iqm.benchmarks.randomized_benchmarking.eplg.eplg.eplg_analysis"]], "plot_layered_fidelities_graph() (in module iqm.benchmarks.randomized_benchmarking.eplg.eplg)": [[126, "iqm.benchmarks.randomized_benchmarking.eplg.eplg.plot_layered_fidelities_graph"]], "iqm.benchmarks.randomized_benchmarking.interleaved_rb": [[127, "module-iqm.benchmarks.randomized_benchmarking.interleaved_rb"]], "iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb": [[128, "module-iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb"]], "interleavedrbconfiguration (class in iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb)": [[129, "iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.InterleavedRBConfiguration"]], "interleaved_gate (iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.interleavedrbconfiguration attribute)": [[129, "iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.InterleavedRBConfiguration.interleaved_gate"]], "interleaved_gate_params (iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.interleavedrbconfiguration attribute)": [[129, "iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.InterleavedRBConfiguration.interleaved_gate_params"]], "model_config (iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.interleavedrbconfiguration attribute)": [[129, "iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.InterleavedRBConfiguration.model_config"]], "num_circuit_samples (iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.interleavedrbconfiguration attribute)": [[129, "iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.InterleavedRBConfiguration.num_circuit_samples"]], "parallel_execution (iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.interleavedrbconfiguration attribute)": [[129, "iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.InterleavedRBConfiguration.parallel_execution"]], "qubits_array (iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.interleavedrbconfiguration attribute)": [[129, "iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.InterleavedRBConfiguration.qubits_array"]], "sequence_lengths (iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.interleavedrbconfiguration attribute)": [[129, "iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.InterleavedRBConfiguration.sequence_lengths"]], "shots (iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.interleavedrbconfiguration attribute)": [[129, "iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.InterleavedRBConfiguration.shots"]], "simultaneous_fit (iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.interleavedrbconfiguration attribute)": [[129, "iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.InterleavedRBConfiguration.simultaneous_fit"]], "interleavedrandomizedbenchmarking (class in iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb)": [[130, "iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.InterleavedRandomizedBenchmarking"]], "add_all_circuits_to_dataset() (iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.interleavedrandomizedbenchmarking method)": [[130, "iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.InterleavedRandomizedBenchmarking.add_all_circuits_to_dataset"]], "add_all_meta_to_dataset() (iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.interleavedrandomizedbenchmarking method)": [[130, "iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.InterleavedRandomizedBenchmarking.add_all_meta_to_dataset"]], "analysis_function() (iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.interleavedrandomizedbenchmarking static method)": [[130, "iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.InterleavedRandomizedBenchmarking.analysis_function"]], "execute() (iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.interleavedrandomizedbenchmarking method)": [[130, "iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.InterleavedRandomizedBenchmarking.execute"]], "interleaved_rb_analysis() (in module iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb)": [[131, "iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.interleaved_rb_analysis"]], "iqm.benchmarks.randomized_benchmarking.mirror_rb": [[132, "module-iqm.benchmarks.randomized_benchmarking.mirror_rb"]], "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb": [[133, "module-iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb"]], "mirrorrbconfiguration (class in iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb)": [[134, "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRBConfiguration"]], "benchmark (iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.mirrorrbconfiguration attribute)": [[134, "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRBConfiguration.benchmark"]], "clifford_sqg_probability (iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.mirrorrbconfiguration attribute)": [[134, "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRBConfiguration.clifford_sqg_probability"]], "density_2q_gates (iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.mirrorrbconfiguration attribute)": [[134, "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRBConfiguration.density_2q_gates"]], "depths_array (iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.mirrorrbconfiguration attribute)": [[134, "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRBConfiguration.depths_array"]], "model_config (iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.mirrorrbconfiguration attribute)": [[134, "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRBConfiguration.model_config"]], "num_circuit_samples (iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.mirrorrbconfiguration attribute)": [[134, "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRBConfiguration.num_circuit_samples"]], "num_pauli_samples (iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.mirrorrbconfiguration attribute)": [[134, "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRBConfiguration.num_pauli_samples"]], "qiskit_optim_level (iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.mirrorrbconfiguration attribute)": [[134, "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRBConfiguration.qiskit_optim_level"]], "qubits_array (iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.mirrorrbconfiguration attribute)": [[134, "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRBConfiguration.qubits_array"]], "routing_method (iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.mirrorrbconfiguration attribute)": [[134, "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRBConfiguration.routing_method"]], "shots (iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.mirrorrbconfiguration attribute)": [[134, "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRBConfiguration.shots"]], "simulation_method (iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.mirrorrbconfiguration attribute)": [[134, "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRBConfiguration.simulation_method"]], "sqg_gate_ensemble (iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.mirrorrbconfiguration attribute)": [[134, "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRBConfiguration.sqg_gate_ensemble"]], "two_qubit_gate_ensemble (iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.mirrorrbconfiguration attribute)": [[134, "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRBConfiguration.two_qubit_gate_ensemble"]], "mirrorrandomizedbenchmarking (class in iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb)": [[135, "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRandomizedBenchmarking"]], "add_all_meta_to_dataset() (iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.mirrorrandomizedbenchmarking method)": [[135, "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRandomizedBenchmarking.add_all_meta_to_dataset"]], "analysis_function() (iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.mirrorrandomizedbenchmarking static method)": [[135, "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRandomizedBenchmarking.analysis_function"]], "execute() (iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.mirrorrandomizedbenchmarking method)": [[135, "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRandomizedBenchmarking.execute"]], "submit_single_mrb_job() (iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.mirrorrandomizedbenchmarking method)": [[135, "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRandomizedBenchmarking.submit_single_mrb_job"]], "compute_polarizations() (in module iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb)": [[136, "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.compute_polarizations"]], "generate_fixed_depth_mrb_circuits() (in module iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb)": [[137, "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.generate_fixed_depth_mrb_circuits"]], "generate_pauli_dressed_mrb_circuits() (in module iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb)": [[138, "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.generate_pauli_dressed_mrb_circuits"]], "list_to_numcircuit_times_numpauli_matrix() (in module iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb)": [[139, "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.list_to_numcircuit_times_numpauli_matrix"]], "mrb_analysis() (in module iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb)": [[140, "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.mrb_analysis"]], "iqm.benchmarks.randomized_benchmarking.multi_lmfit": [[141, "module-iqm.benchmarks.randomized_benchmarking.multi_lmfit"]], "create_multi_dataset_params() (in module iqm.benchmarks.randomized_benchmarking.multi_lmfit)": [[142, "iqm.benchmarks.randomized_benchmarking.multi_lmfit.create_multi_dataset_params"]], "eval_func_single_dataset() (in module iqm.benchmarks.randomized_benchmarking.multi_lmfit)": [[143, "iqm.benchmarks.randomized_benchmarking.multi_lmfit.eval_func_single_dataset"]], "get_param_names_from_func_signature() (in module iqm.benchmarks.randomized_benchmarking.multi_lmfit)": [[144, "iqm.benchmarks.randomized_benchmarking.multi_lmfit.get_param_names_from_func_signature"]], "multi_dataset_residual() (in module iqm.benchmarks.randomized_benchmarking.multi_lmfit)": [[145, "iqm.benchmarks.randomized_benchmarking.multi_lmfit.multi_dataset_residual"]], "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common": [[146, "module-iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common"]], "compute_inverse_clifford() (in module iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common)": [[147, "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.compute_inverse_clifford"]], "edge_grab() (in module iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common)": [[148, "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.edge_grab"]], "estimate_survival_probabilities() (in module iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common)": [[149, "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.estimate_survival_probabilities"]], "exponential_rb() (in module iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common)": [[150, "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.exponential_rb"]], "fit_decay_lmfit() (in module iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common)": [[151, "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.fit_decay_lmfit"]], "generate_all_rb_circuits() (in module iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common)": [[152, "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.generate_all_rb_circuits"]], "generate_fixed_depth_parallel_rb_circuits() (in module iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common)": [[153, "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.generate_fixed_depth_parallel_rb_circuits"]], "generate_random_clifford_seq_circuits() (in module iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common)": [[154, "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.generate_random_clifford_seq_circuits"]], "get_survival_probabilities() (in module iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common)": [[155, "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.get_survival_probabilities"]], "import_native_gate_cliffords() (in module iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common)": [[156, "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.import_native_gate_cliffords"]], "lmfit_minimizer() (in module iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common)": [[157, "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.lmfit_minimizer"]], "plot_rb_decay() (in module iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common)": [[158, "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.plot_rb_decay"]], "relabel_qubits_array_from_zero() (in module iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common)": [[159, "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.relabel_qubits_array_from_zero"]], "submit_parallel_rb_job() (in module iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common)": [[160, "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.submit_parallel_rb_job"]], "submit_sequential_rb_jobs() (in module iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common)": [[161, "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.submit_sequential_rb_jobs"]], "survival_probabilities_parallel() (in module iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common)": [[162, "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.survival_probabilities_parallel"]], "validate_irb_gate() (in module iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common)": [[163, "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.validate_irb_gate"]], "validate_rb_qubits() (in module iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common)": [[164, "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.validate_rb_qubits"]], "iqm.benchmarks.readout_mitigation": [[165, "module-iqm.benchmarks.readout_mitigation"]], "m3iqm (class in iqm.benchmarks.readout_mitigation)": [[166, "iqm.benchmarks.readout_mitigation.M3IQM"]], "cals_from_system() (iqm.benchmarks.readout_mitigation.m3iqm method)": [[166, "iqm.benchmarks.readout_mitigation.M3IQM.cals_from_system"]], "apply_readout_error_mitigation() (in module iqm.benchmarks.readout_mitigation)": [[167, "iqm.benchmarks.readout_mitigation.apply_readout_error_mitigation"]], "readout_error_m3() (in module iqm.benchmarks.readout_mitigation)": [[168, "iqm.benchmarks.readout_mitigation.readout_error_m3"]], "iqm.benchmarks.utils": [[169, "module-iqm.benchmarks.utils"]], "bootstrap_counts() (in module iqm.benchmarks.utils)": [[170, "iqm.benchmarks.utils.bootstrap_counts"]], "count_2q_layers() (in module iqm.benchmarks.utils)": [[171, "iqm.benchmarks.utils.count_2q_layers"]], "count_native_gates() (in module iqm.benchmarks.utils)": [[172, "iqm.benchmarks.utils.count_native_gates"]], "extract_fidelities() (in module iqm.benchmarks.utils)": [[173, "iqm.benchmarks.utils.extract_fidelities"]], "generate_state_tomography_circuits() (in module iqm.benchmarks.utils)": [[174, "iqm.benchmarks.utils.generate_state_tomography_circuits"]], "get_pauli_expectation() (in module iqm.benchmarks.utils)": [[175, "iqm.benchmarks.utils.get_Pauli_expectation"]], "get_active_qubits() (in module iqm.benchmarks.utils)": [[176, "iqm.benchmarks.utils.get_active_qubits"]], "get_iqm_backend() (in module iqm.benchmarks.utils)": [[177, "iqm.benchmarks.utils.get_iqm_backend"]], "get_measurement_mapping() (in module iqm.benchmarks.utils)": [[178, "iqm.benchmarks.utils.get_measurement_mapping"]], "get_neighbors_of_edges() (in module iqm.benchmarks.utils)": [[179, "iqm.benchmarks.utils.get_neighbors_of_edges"]], "get_tomography_matrix() (in module iqm.benchmarks.utils)": [[180, "iqm.benchmarks.utils.get_tomography_matrix"]], "marginal_distribution() (in module iqm.benchmarks.utils)": [[181, "iqm.benchmarks.utils.marginal_distribution"]], "median_with_uncertainty() (in module iqm.benchmarks.utils)": [[182, "iqm.benchmarks.utils.median_with_uncertainty"]], "perform_backend_transpilation() (in module iqm.benchmarks.utils)": [[183, "iqm.benchmarks.utils.perform_backend_transpilation"]], "random_hamiltonian_path() (in module iqm.benchmarks.utils)": [[184, "iqm.benchmarks.utils.random_hamiltonian_path"]], "reduce_to_active_qubits() (in module iqm.benchmarks.utils)": [[185, "iqm.benchmarks.utils.reduce_to_active_qubits"]], "remove_directed_duplicates_to_list() (in module iqm.benchmarks.utils)": [[186, "iqm.benchmarks.utils.remove_directed_duplicates_to_list"]], "retrieve_all_counts() (in module iqm.benchmarks.utils)": [[187, "iqm.benchmarks.utils.retrieve_all_counts"]], "retrieve_all_job_metadata() (in module iqm.benchmarks.utils)": [[188, "iqm.benchmarks.utils.retrieve_all_job_metadata"]], "set_coupling_map() (in module iqm.benchmarks.utils)": [[189, "iqm.benchmarks.utils.set_coupling_map"]], "sort_batches_by_final_layout() (in module iqm.benchmarks.utils)": [[190, "iqm.benchmarks.utils.sort_batches_by_final_layout"]], "split_into_disjoint_pairs() (in module iqm.benchmarks.utils)": [[191, "iqm.benchmarks.utils.split_into_disjoint_pairs"]], "split_sequence_in_chunks() (in module iqm.benchmarks.utils)": [[192, "iqm.benchmarks.utils.split_sequence_in_chunks"]], "submit_execute() (in module iqm.benchmarks.utils)": [[193, "iqm.benchmarks.utils.submit_execute"]], "timeit() (in module iqm.benchmarks.utils)": [[194, "iqm.benchmarks.utils.timeit"]], "xrvariable_to_counts() (in module iqm.benchmarks.utils)": [[195, "iqm.benchmarks.utils.xrvariable_to_counts"]], "iqm.benchmarks.utils_plots": [[196, "module-iqm.benchmarks.utils_plots"]], "graphpositions (class in iqm.benchmarks.utils_plots)": [[197, "iqm.benchmarks.utils_plots.GraphPositions"]], "create_positions() (iqm.benchmarks.utils_plots.graphpositions static method)": [[197, "iqm.benchmarks.utils_plots.GraphPositions.create_positions"]], "deneb_positions (iqm.benchmarks.utils_plots.graphpositions attribute)": [[197, "iqm.benchmarks.utils_plots.GraphPositions.deneb_positions"]], "garnet_positions (iqm.benchmarks.utils_plots.graphpositions attribute)": [[197, "iqm.benchmarks.utils_plots.GraphPositions.garnet_positions"]], "predefined_stations (iqm.benchmarks.utils_plots.graphpositions attribute)": [[197, "iqm.benchmarks.utils_plots.GraphPositions.predefined_stations"]], "draw_graph_edges() (in module iqm.benchmarks.utils_plots)": [[198, "iqm.benchmarks.utils_plots.draw_graph_edges"]], "evaluate_hamiltonian_paths() (in module iqm.benchmarks.utils_plots)": [[199, "iqm.benchmarks.utils_plots.evaluate_hamiltonian_paths"]], "plot_layout_fidelity_graph() (in module iqm.benchmarks.utils_plots)": [[200, "iqm.benchmarks.utils_plots.plot_layout_fidelity_graph"]], "rx_to_nx_graph() (in module iqm.benchmarks.utils_plots)": [[201, "iqm.benchmarks.utils_plots.rx_to_nx_graph"]], "iqm.benchmarks.utils_shadows": [[202, "module-iqm.benchmarks.utils_shadows"]], "cue() (in module iqm.benchmarks.utils_shadows)": [[203, "iqm.benchmarks.utils_shadows.CUE"]], "get_local_shadow() (in module iqm.benchmarks.utils_shadows)": [[204, "iqm.benchmarks.utils_shadows.get_local_shadow"]], "get_negativity() (in module iqm.benchmarks.utils_shadows)": [[205, "iqm.benchmarks.utils_shadows.get_negativity"]], "local_shadow_tomography() (in module iqm.benchmarks.utils_shadows)": [[206, "iqm.benchmarks.utils_shadows.local_shadow_tomography"]]}})