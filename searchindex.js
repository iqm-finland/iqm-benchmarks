Search.setIndex({"docnames": ["API", "api/iqm.benchmarks", "api/iqm.benchmarks.benchmark", "api/iqm.benchmarks.benchmark.BenchmarkBase", "api/iqm.benchmarks.benchmark.BenchmarkConfigurationBase", "api/iqm.benchmarks.benchmark_definition", "api/iqm.benchmarks.benchmark_definition.Benchmark", "api/iqm.benchmarks.benchmark_definition.BenchmarkAnalysisResult", "api/iqm.benchmarks.benchmark_definition.BenchmarkObservation", "api/iqm.benchmarks.benchmark_definition.BenchmarkObservationIdentifier", "api/iqm.benchmarks.benchmark_definition.BenchmarkRunResult", "api/iqm.benchmarks.benchmark_definition.add_counts_to_dataset", "api/iqm.benchmarks.benchmark_definition.default_analysis_function", "api/iqm.benchmarks.benchmark_definition.merge_datasets_dac", "api/iqm.benchmarks.benchmark_definition.show_figure", "api/iqm.benchmarks.circuit_containers", "api/iqm.benchmarks.circuit_containers.BenchmarkCircuit", "api/iqm.benchmarks.circuit_containers.CircuitGroup", "api/iqm.benchmarks.circuit_containers.Circuits", "api/iqm.benchmarks.coherence", "api/iqm.benchmarks.coherence.coherence", "api/iqm.benchmarks.coherence.coherence.CoherenceBenchmark", "api/iqm.benchmarks.coherence.coherence.CoherenceConfiguration", "api/iqm.benchmarks.coherence.coherence.calculate_probabilities", "api/iqm.benchmarks.coherence.coherence.coherence_analysis", "api/iqm.benchmarks.coherence.coherence.exp_decay", "api/iqm.benchmarks.coherence.coherence.fit_coherence_model", "api/iqm.benchmarks.coherence.coherence.plot_coherence", "api/iqm.benchmarks.compressive_gst", "api/iqm.benchmarks.compressive_gst.compressive_gst", "api/iqm.benchmarks.compressive_gst.compressive_gst.CompressiveGST", "api/iqm.benchmarks.compressive_gst.compressive_gst.GSTConfiguration", "api/iqm.benchmarks.compressive_gst.compressive_gst.create_predefined_gate_set", "api/iqm.benchmarks.compressive_gst.compressive_gst.parse_gate_set", "api/iqm.benchmarks.compressive_gst.compressive_gst.parse_layouts", "api/iqm.benchmarks.compressive_gst.gst_analysis", "api/iqm.benchmarks.compressive_gst.gst_analysis.bootstrap_errors", "api/iqm.benchmarks.compressive_gst.gst_analysis.dataframe_to_figure", "api/iqm.benchmarks.compressive_gst.gst_analysis.dataset_counts_to_mgst_format", "api/iqm.benchmarks.compressive_gst.gst_analysis.generate_basis_labels", "api/iqm.benchmarks.compressive_gst.gst_analysis.generate_gate_results", "api/iqm.benchmarks.compressive_gst.gst_analysis.generate_non_gate_results", "api/iqm.benchmarks.compressive_gst.gst_analysis.generate_unit_rank_gate_results", "api/iqm.benchmarks.compressive_gst.gst_analysis.mgst_analysis", "api/iqm.benchmarks.compressive_gst.gst_analysis.pandas_results_to_observations", "api/iqm.benchmarks.compressive_gst.gst_analysis.result_str_to_floats", "api/iqm.benchmarks.compressive_gst.gst_analysis.run_mGST_wrapper", "api/iqm.benchmarks.entanglement", "api/iqm.benchmarks.entanglement.ghz", "api/iqm.benchmarks.entanglement.ghz.GHZBenchmark", "api/iqm.benchmarks.entanglement.ghz.GHZConfiguration", "api/iqm.benchmarks.entanglement.ghz.fidelity_analysis", "api/iqm.benchmarks.entanglement.ghz.fidelity_ghz_coherences", "api/iqm.benchmarks.entanglement.ghz.fidelity_ghz_randomized_measurements", "api/iqm.benchmarks.entanglement.ghz.generate_ghz_linear", "api/iqm.benchmarks.entanglement.ghz.generate_ghz_log_cruz", "api/iqm.benchmarks.entanglement.ghz.generate_ghz_log_mooney", "api/iqm.benchmarks.entanglement.ghz.generate_ghz_spanning_tree", "api/iqm.benchmarks.entanglement.ghz.generate_ghz_star", "api/iqm.benchmarks.entanglement.ghz.get_cx_map", "api/iqm.benchmarks.entanglement.ghz.get_edges", "api/iqm.benchmarks.entanglement.ghz.plot_fidelities", "api/iqm.benchmarks.entanglement.graph_states", "api/iqm.benchmarks.entanglement.graph_states.GraphStateBenchmark", "api/iqm.benchmarks.entanglement.graph_states.GraphStateConfiguration", "api/iqm.benchmarks.entanglement.graph_states.find_edges_with_disjoint_neighbors", "api/iqm.benchmarks.entanglement.graph_states.generate_graph_state", "api/iqm.benchmarks.entanglement.graph_states.generate_minimal_edge_layers", "api/iqm.benchmarks.entanglement.graph_states.negativity_analysis", "api/iqm.benchmarks.entanglement.graph_states.plot_density_matrix", "api/iqm.benchmarks.entanglement.graph_states.plot_max_negativities", "api/iqm.benchmarks.entanglement.graph_states.plot_max_negativities_graph", "api/iqm.benchmarks.entanglement.graph_states.shadow_tomography_analysis", "api/iqm.benchmarks.entanglement.graph_states.state_tomography_analysis", "api/iqm.benchmarks.entanglement.graph_states.update_pauli_expectations", "api/iqm.benchmarks.logging_config", "api/iqm.benchmarks.optimization", "api/iqm.benchmarks.optimization.qscore", "api/iqm.benchmarks.optimization.qscore.QScoreBenchmark", "api/iqm.benchmarks.optimization.qscore.QScoreConfiguration", "api/iqm.benchmarks.optimization.qscore.calculate_optimal_angles_for_QAOA_p1", "api/iqm.benchmarks.optimization.qscore.compute_expectation_value", "api/iqm.benchmarks.optimization.qscore.create_objective_function", "api/iqm.benchmarks.optimization.qscore.cut_cost_function", "api/iqm.benchmarks.optimization.qscore.get_optimal_angles", "api/iqm.benchmarks.optimization.qscore.is_successful", "api/iqm.benchmarks.optimization.qscore.plot_approximation_ratios", "api/iqm.benchmarks.optimization.qscore.qscore_analysis", "api/iqm.benchmarks.optimization.qscore.run_QAOA", "api/iqm.benchmarks.quantum_volume", "api/iqm.benchmarks.quantum_volume.clops", "api/iqm.benchmarks.quantum_volume.clops.CLOPSBenchmark", "api/iqm.benchmarks.quantum_volume.clops.CLOPSConfiguration", "api/iqm.benchmarks.quantum_volume.clops.clops_analysis", "api/iqm.benchmarks.quantum_volume.clops.plot_times", "api/iqm.benchmarks.quantum_volume.clops.retrieve_clops_elapsed_times", "api/iqm.benchmarks.quantum_volume.quantum_volume", "api/iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeBenchmark", "api/iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeConfiguration", "api/iqm.benchmarks.quantum_volume.quantum_volume.compute_heavy_output_probabilities", "api/iqm.benchmarks.quantum_volume.quantum_volume.cumulative_hop", "api/iqm.benchmarks.quantum_volume.quantum_volume.cumulative_std", "api/iqm.benchmarks.quantum_volume.quantum_volume.get_ideal_heavy_outputs", "api/iqm.benchmarks.quantum_volume.quantum_volume.get_rem_hops", "api/iqm.benchmarks.quantum_volume.quantum_volume.heavy_projector", "api/iqm.benchmarks.quantum_volume.quantum_volume.is_successful", "api/iqm.benchmarks.quantum_volume.quantum_volume.plot_hop_threshold", "api/iqm.benchmarks.quantum_volume.quantum_volume.qv_analysis", "api/iqm.benchmarks.randomized_benchmarking", "api/iqm.benchmarks.randomized_benchmarking.clifford_rb", "api/iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb", "api/iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.CliffordRBConfiguration", "api/iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.CliffordRandomizedBenchmarking", "api/iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.clifford_rb_analysis", "api/iqm.benchmarks.randomized_benchmarking.direct_rb", "api/iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb", "api/iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.DirectRBConfiguration", "api/iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.DirectRandomizedBenchmarking", "api/iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.direct_rb_analysis", "api/iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.generate_drb_circuits", "api/iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.generate_fixed_depth_parallel_drb_circuits", "api/iqm.benchmarks.randomized_benchmarking.eplg", "api/iqm.benchmarks.randomized_benchmarking.eplg.eplg", "api/iqm.benchmarks.randomized_benchmarking.eplg.eplg.EPLGBenchmark", "api/iqm.benchmarks.randomized_benchmarking.eplg.eplg.EPLGConfiguration", "api/iqm.benchmarks.randomized_benchmarking.eplg.eplg.eplg_analysis", "api/iqm.benchmarks.randomized_benchmarking.eplg.eplg.plot_layered_fidelities_graph", "api/iqm.benchmarks.randomized_benchmarking.interleaved_rb", "api/iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb", "api/iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.InterleavedRBConfiguration", "api/iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.InterleavedRandomizedBenchmarking", "api/iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.interleaved_rb_analysis", "api/iqm.benchmarks.randomized_benchmarking.mirror_rb", "api/iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb", "api/iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRBConfiguration", "api/iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRandomizedBenchmarking", "api/iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.compute_polarizations", "api/iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.generate_fixed_depth_mrb_circuits", "api/iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.generate_pauli_dressed_mrb_circuits", "api/iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.list_to_numcircuit_times_numpauli_matrix", "api/iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.mrb_analysis", "api/iqm.benchmarks.randomized_benchmarking.multi_lmfit", "api/iqm.benchmarks.randomized_benchmarking.multi_lmfit.create_multi_dataset_params", "api/iqm.benchmarks.randomized_benchmarking.multi_lmfit.eval_func_single_dataset", "api/iqm.benchmarks.randomized_benchmarking.multi_lmfit.get_param_names_from_func_signature", "api/iqm.benchmarks.randomized_benchmarking.multi_lmfit.multi_dataset_residual", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.compute_inverse_clifford", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.edge_grab", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.estimate_survival_probabilities", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.exponential_rb", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.fit_decay_lmfit", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.generate_all_rb_circuits", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.generate_fixed_depth_parallel_rb_circuits", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.generate_random_clifford_seq_circuits", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.get_survival_probabilities", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.import_native_gate_cliffords", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.lmfit_minimizer", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.plot_rb_decay", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.relabel_qubits_array_from_zero", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.submit_parallel_rb_job", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.submit_sequential_rb_jobs", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.survival_probabilities_parallel", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.validate_irb_gate", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.validate_rb_qubits", "api/iqm.benchmarks.readout_mitigation", "api/iqm.benchmarks.readout_mitigation.M3IQM", "api/iqm.benchmarks.readout_mitigation.apply_readout_error_mitigation", "api/iqm.benchmarks.readout_mitigation.readout_error_m3", "api/iqm.benchmarks.utils", "api/iqm.benchmarks.utils.bootstrap_counts", "api/iqm.benchmarks.utils.count_2q_layers", "api/iqm.benchmarks.utils.count_native_gates", "api/iqm.benchmarks.utils.extract_fidelities", "api/iqm.benchmarks.utils.generate_state_tomography_circuits", "api/iqm.benchmarks.utils.get_Pauli_expectation", "api/iqm.benchmarks.utils.get_active_qubits", "api/iqm.benchmarks.utils.get_iqm_backend", "api/iqm.benchmarks.utils.get_measurement_mapping", "api/iqm.benchmarks.utils.get_neighbors_of_edges", "api/iqm.benchmarks.utils.get_tomography_matrix", "api/iqm.benchmarks.utils.marginal_distribution", "api/iqm.benchmarks.utils.median_with_uncertainty", "api/iqm.benchmarks.utils.perform_backend_transpilation", "api/iqm.benchmarks.utils.random_hamiltonian_path", "api/iqm.benchmarks.utils.reduce_to_active_qubits", "api/iqm.benchmarks.utils.remove_directed_duplicates_to_list", "api/iqm.benchmarks.utils.retrieve_all_counts", "api/iqm.benchmarks.utils.retrieve_all_job_metadata", "api/iqm.benchmarks.utils.set_coupling_map", "api/iqm.benchmarks.utils.sort_batches_by_final_layout", "api/iqm.benchmarks.utils.split_into_disjoint_pairs", "api/iqm.benchmarks.utils.split_sequence_in_chunks", "api/iqm.benchmarks.utils.submit_execute", "api/iqm.benchmarks.utils.timeit", "api/iqm.benchmarks.utils.xrvariable_to_counts", "api/iqm.benchmarks.utils_plots", "api/iqm.benchmarks.utils_plots.GraphPositions", "api/iqm.benchmarks.utils_plots.calculate_node_radii", "api/iqm.benchmarks.utils_plots.draw_graph_edges", "api/iqm.benchmarks.utils_plots.evaluate_hamiltonian_paths", "api/iqm.benchmarks.utils_plots.plot_layout_fidelity_graph", "api/iqm.benchmarks.utils_plots.rx_to_nx_graph", "api/iqm.benchmarks.utils_shadows", "api/iqm.benchmarks.utils_shadows.CUE", "api/iqm.benchmarks.utils_shadows.get_local_shadow", "api/iqm.benchmarks.utils_shadows.get_negativity", "api/iqm.benchmarks.utils_shadows.local_shadow_tomography", "changelog", "development/development", "development/generate_2qubit_cliffords", "development/how_to_make_your_own_benchmark", "devices/devices", "devices/spark", "devices/star", "examples/example_clifford_rb", "examples/example_clops", "examples/example_coherence", "examples/example_eplg", "examples/example_experiment_all", "examples/example_ghz", "examples/example_graphstate", "examples/example_gst", "examples/example_interleaved_rb", "examples/example_mirror_rb", "examples/example_qscore", "examples/example_quantum_volume", "examples/examples", "index", "license", "readme"], "filenames": ["API.rst", "api/iqm.benchmarks.rst", "api/iqm.benchmarks.benchmark.rst", "api/iqm.benchmarks.benchmark.BenchmarkBase.rst", "api/iqm.benchmarks.benchmark.BenchmarkConfigurationBase.rst", "api/iqm.benchmarks.benchmark_definition.rst", "api/iqm.benchmarks.benchmark_definition.Benchmark.rst", "api/iqm.benchmarks.benchmark_definition.BenchmarkAnalysisResult.rst", "api/iqm.benchmarks.benchmark_definition.BenchmarkObservation.rst", "api/iqm.benchmarks.benchmark_definition.BenchmarkObservationIdentifier.rst", "api/iqm.benchmarks.benchmark_definition.BenchmarkRunResult.rst", "api/iqm.benchmarks.benchmark_definition.add_counts_to_dataset.rst", "api/iqm.benchmarks.benchmark_definition.default_analysis_function.rst", "api/iqm.benchmarks.benchmark_definition.merge_datasets_dac.rst", "api/iqm.benchmarks.benchmark_definition.show_figure.rst", "api/iqm.benchmarks.circuit_containers.rst", "api/iqm.benchmarks.circuit_containers.BenchmarkCircuit.rst", "api/iqm.benchmarks.circuit_containers.CircuitGroup.rst", "api/iqm.benchmarks.circuit_containers.Circuits.rst", "api/iqm.benchmarks.coherence.rst", "api/iqm.benchmarks.coherence.coherence.rst", "api/iqm.benchmarks.coherence.coherence.CoherenceBenchmark.rst", "api/iqm.benchmarks.coherence.coherence.CoherenceConfiguration.rst", "api/iqm.benchmarks.coherence.coherence.calculate_probabilities.rst", "api/iqm.benchmarks.coherence.coherence.coherence_analysis.rst", "api/iqm.benchmarks.coherence.coherence.exp_decay.rst", "api/iqm.benchmarks.coherence.coherence.fit_coherence_model.rst", "api/iqm.benchmarks.coherence.coherence.plot_coherence.rst", "api/iqm.benchmarks.compressive_gst.rst", "api/iqm.benchmarks.compressive_gst.compressive_gst.rst", "api/iqm.benchmarks.compressive_gst.compressive_gst.CompressiveGST.rst", "api/iqm.benchmarks.compressive_gst.compressive_gst.GSTConfiguration.rst", "api/iqm.benchmarks.compressive_gst.compressive_gst.create_predefined_gate_set.rst", "api/iqm.benchmarks.compressive_gst.compressive_gst.parse_gate_set.rst", "api/iqm.benchmarks.compressive_gst.compressive_gst.parse_layouts.rst", "api/iqm.benchmarks.compressive_gst.gst_analysis.rst", "api/iqm.benchmarks.compressive_gst.gst_analysis.bootstrap_errors.rst", "api/iqm.benchmarks.compressive_gst.gst_analysis.dataframe_to_figure.rst", "api/iqm.benchmarks.compressive_gst.gst_analysis.dataset_counts_to_mgst_format.rst", "api/iqm.benchmarks.compressive_gst.gst_analysis.generate_basis_labels.rst", "api/iqm.benchmarks.compressive_gst.gst_analysis.generate_gate_results.rst", "api/iqm.benchmarks.compressive_gst.gst_analysis.generate_non_gate_results.rst", "api/iqm.benchmarks.compressive_gst.gst_analysis.generate_unit_rank_gate_results.rst", "api/iqm.benchmarks.compressive_gst.gst_analysis.mgst_analysis.rst", "api/iqm.benchmarks.compressive_gst.gst_analysis.pandas_results_to_observations.rst", "api/iqm.benchmarks.compressive_gst.gst_analysis.result_str_to_floats.rst", "api/iqm.benchmarks.compressive_gst.gst_analysis.run_mGST_wrapper.rst", "api/iqm.benchmarks.entanglement.rst", "api/iqm.benchmarks.entanglement.ghz.rst", "api/iqm.benchmarks.entanglement.ghz.GHZBenchmark.rst", "api/iqm.benchmarks.entanglement.ghz.GHZConfiguration.rst", "api/iqm.benchmarks.entanglement.ghz.fidelity_analysis.rst", "api/iqm.benchmarks.entanglement.ghz.fidelity_ghz_coherences.rst", "api/iqm.benchmarks.entanglement.ghz.fidelity_ghz_randomized_measurements.rst", "api/iqm.benchmarks.entanglement.ghz.generate_ghz_linear.rst", "api/iqm.benchmarks.entanglement.ghz.generate_ghz_log_cruz.rst", "api/iqm.benchmarks.entanglement.ghz.generate_ghz_log_mooney.rst", "api/iqm.benchmarks.entanglement.ghz.generate_ghz_spanning_tree.rst", "api/iqm.benchmarks.entanglement.ghz.generate_ghz_star.rst", "api/iqm.benchmarks.entanglement.ghz.get_cx_map.rst", "api/iqm.benchmarks.entanglement.ghz.get_edges.rst", "api/iqm.benchmarks.entanglement.ghz.plot_fidelities.rst", "api/iqm.benchmarks.entanglement.graph_states.rst", "api/iqm.benchmarks.entanglement.graph_states.GraphStateBenchmark.rst", "api/iqm.benchmarks.entanglement.graph_states.GraphStateConfiguration.rst", "api/iqm.benchmarks.entanglement.graph_states.find_edges_with_disjoint_neighbors.rst", "api/iqm.benchmarks.entanglement.graph_states.generate_graph_state.rst", "api/iqm.benchmarks.entanglement.graph_states.generate_minimal_edge_layers.rst", "api/iqm.benchmarks.entanglement.graph_states.negativity_analysis.rst", "api/iqm.benchmarks.entanglement.graph_states.plot_density_matrix.rst", "api/iqm.benchmarks.entanglement.graph_states.plot_max_negativities.rst", "api/iqm.benchmarks.entanglement.graph_states.plot_max_negativities_graph.rst", "api/iqm.benchmarks.entanglement.graph_states.shadow_tomography_analysis.rst", "api/iqm.benchmarks.entanglement.graph_states.state_tomography_analysis.rst", "api/iqm.benchmarks.entanglement.graph_states.update_pauli_expectations.rst", "api/iqm.benchmarks.logging_config.rst", "api/iqm.benchmarks.optimization.rst", "api/iqm.benchmarks.optimization.qscore.rst", "api/iqm.benchmarks.optimization.qscore.QScoreBenchmark.rst", "api/iqm.benchmarks.optimization.qscore.QScoreConfiguration.rst", "api/iqm.benchmarks.optimization.qscore.calculate_optimal_angles_for_QAOA_p1.rst", "api/iqm.benchmarks.optimization.qscore.compute_expectation_value.rst", "api/iqm.benchmarks.optimization.qscore.create_objective_function.rst", "api/iqm.benchmarks.optimization.qscore.cut_cost_function.rst", "api/iqm.benchmarks.optimization.qscore.get_optimal_angles.rst", "api/iqm.benchmarks.optimization.qscore.is_successful.rst", "api/iqm.benchmarks.optimization.qscore.plot_approximation_ratios.rst", "api/iqm.benchmarks.optimization.qscore.qscore_analysis.rst", "api/iqm.benchmarks.optimization.qscore.run_QAOA.rst", "api/iqm.benchmarks.quantum_volume.rst", "api/iqm.benchmarks.quantum_volume.clops.rst", "api/iqm.benchmarks.quantum_volume.clops.CLOPSBenchmark.rst", "api/iqm.benchmarks.quantum_volume.clops.CLOPSConfiguration.rst", "api/iqm.benchmarks.quantum_volume.clops.clops_analysis.rst", "api/iqm.benchmarks.quantum_volume.clops.plot_times.rst", "api/iqm.benchmarks.quantum_volume.clops.retrieve_clops_elapsed_times.rst", "api/iqm.benchmarks.quantum_volume.quantum_volume.rst", "api/iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeBenchmark.rst", "api/iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeConfiguration.rst", "api/iqm.benchmarks.quantum_volume.quantum_volume.compute_heavy_output_probabilities.rst", "api/iqm.benchmarks.quantum_volume.quantum_volume.cumulative_hop.rst", "api/iqm.benchmarks.quantum_volume.quantum_volume.cumulative_std.rst", "api/iqm.benchmarks.quantum_volume.quantum_volume.get_ideal_heavy_outputs.rst", "api/iqm.benchmarks.quantum_volume.quantum_volume.get_rem_hops.rst", "api/iqm.benchmarks.quantum_volume.quantum_volume.heavy_projector.rst", "api/iqm.benchmarks.quantum_volume.quantum_volume.is_successful.rst", "api/iqm.benchmarks.quantum_volume.quantum_volume.plot_hop_threshold.rst", "api/iqm.benchmarks.quantum_volume.quantum_volume.qv_analysis.rst", "api/iqm.benchmarks.randomized_benchmarking.rst", "api/iqm.benchmarks.randomized_benchmarking.clifford_rb.rst", "api/iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.rst", "api/iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.CliffordRBConfiguration.rst", "api/iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.CliffordRandomizedBenchmarking.rst", "api/iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.clifford_rb_analysis.rst", "api/iqm.benchmarks.randomized_benchmarking.direct_rb.rst", "api/iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.rst", "api/iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.DirectRBConfiguration.rst", "api/iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.DirectRandomizedBenchmarking.rst", "api/iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.direct_rb_analysis.rst", "api/iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.generate_drb_circuits.rst", "api/iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.generate_fixed_depth_parallel_drb_circuits.rst", "api/iqm.benchmarks.randomized_benchmarking.eplg.rst", "api/iqm.benchmarks.randomized_benchmarking.eplg.eplg.rst", "api/iqm.benchmarks.randomized_benchmarking.eplg.eplg.EPLGBenchmark.rst", "api/iqm.benchmarks.randomized_benchmarking.eplg.eplg.EPLGConfiguration.rst", "api/iqm.benchmarks.randomized_benchmarking.eplg.eplg.eplg_analysis.rst", "api/iqm.benchmarks.randomized_benchmarking.eplg.eplg.plot_layered_fidelities_graph.rst", "api/iqm.benchmarks.randomized_benchmarking.interleaved_rb.rst", "api/iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.rst", "api/iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.InterleavedRBConfiguration.rst", "api/iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.InterleavedRandomizedBenchmarking.rst", "api/iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.interleaved_rb_analysis.rst", "api/iqm.benchmarks.randomized_benchmarking.mirror_rb.rst", "api/iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.rst", "api/iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRBConfiguration.rst", "api/iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRandomizedBenchmarking.rst", "api/iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.compute_polarizations.rst", "api/iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.generate_fixed_depth_mrb_circuits.rst", "api/iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.generate_pauli_dressed_mrb_circuits.rst", "api/iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.list_to_numcircuit_times_numpauli_matrix.rst", "api/iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.mrb_analysis.rst", "api/iqm.benchmarks.randomized_benchmarking.multi_lmfit.rst", "api/iqm.benchmarks.randomized_benchmarking.multi_lmfit.create_multi_dataset_params.rst", "api/iqm.benchmarks.randomized_benchmarking.multi_lmfit.eval_func_single_dataset.rst", "api/iqm.benchmarks.randomized_benchmarking.multi_lmfit.get_param_names_from_func_signature.rst", "api/iqm.benchmarks.randomized_benchmarking.multi_lmfit.multi_dataset_residual.rst", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.rst", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.compute_inverse_clifford.rst", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.edge_grab.rst", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.estimate_survival_probabilities.rst", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.exponential_rb.rst", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.fit_decay_lmfit.rst", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.generate_all_rb_circuits.rst", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.generate_fixed_depth_parallel_rb_circuits.rst", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.generate_random_clifford_seq_circuits.rst", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.get_survival_probabilities.rst", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.import_native_gate_cliffords.rst", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.lmfit_minimizer.rst", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.plot_rb_decay.rst", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.relabel_qubits_array_from_zero.rst", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.submit_parallel_rb_job.rst", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.submit_sequential_rb_jobs.rst", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.survival_probabilities_parallel.rst", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.validate_irb_gate.rst", "api/iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.validate_rb_qubits.rst", "api/iqm.benchmarks.readout_mitigation.rst", "api/iqm.benchmarks.readout_mitigation.M3IQM.rst", "api/iqm.benchmarks.readout_mitigation.apply_readout_error_mitigation.rst", "api/iqm.benchmarks.readout_mitigation.readout_error_m3.rst", "api/iqm.benchmarks.utils.rst", "api/iqm.benchmarks.utils.bootstrap_counts.rst", "api/iqm.benchmarks.utils.count_2q_layers.rst", "api/iqm.benchmarks.utils.count_native_gates.rst", "api/iqm.benchmarks.utils.extract_fidelities.rst", "api/iqm.benchmarks.utils.generate_state_tomography_circuits.rst", "api/iqm.benchmarks.utils.get_Pauli_expectation.rst", "api/iqm.benchmarks.utils.get_active_qubits.rst", "api/iqm.benchmarks.utils.get_iqm_backend.rst", "api/iqm.benchmarks.utils.get_measurement_mapping.rst", "api/iqm.benchmarks.utils.get_neighbors_of_edges.rst", "api/iqm.benchmarks.utils.get_tomography_matrix.rst", "api/iqm.benchmarks.utils.marginal_distribution.rst", "api/iqm.benchmarks.utils.median_with_uncertainty.rst", "api/iqm.benchmarks.utils.perform_backend_transpilation.rst", "api/iqm.benchmarks.utils.random_hamiltonian_path.rst", "api/iqm.benchmarks.utils.reduce_to_active_qubits.rst", "api/iqm.benchmarks.utils.remove_directed_duplicates_to_list.rst", "api/iqm.benchmarks.utils.retrieve_all_counts.rst", "api/iqm.benchmarks.utils.retrieve_all_job_metadata.rst", "api/iqm.benchmarks.utils.set_coupling_map.rst", "api/iqm.benchmarks.utils.sort_batches_by_final_layout.rst", "api/iqm.benchmarks.utils.split_into_disjoint_pairs.rst", "api/iqm.benchmarks.utils.split_sequence_in_chunks.rst", "api/iqm.benchmarks.utils.submit_execute.rst", "api/iqm.benchmarks.utils.timeit.rst", "api/iqm.benchmarks.utils.xrvariable_to_counts.rst", "api/iqm.benchmarks.utils_plots.rst", "api/iqm.benchmarks.utils_plots.GraphPositions.rst", "api/iqm.benchmarks.utils_plots.calculate_node_radii.rst", "api/iqm.benchmarks.utils_plots.draw_graph_edges.rst", "api/iqm.benchmarks.utils_plots.evaluate_hamiltonian_paths.rst", "api/iqm.benchmarks.utils_plots.plot_layout_fidelity_graph.rst", "api/iqm.benchmarks.utils_plots.rx_to_nx_graph.rst", "api/iqm.benchmarks.utils_shadows.rst", "api/iqm.benchmarks.utils_shadows.CUE.rst", "api/iqm.benchmarks.utils_shadows.get_local_shadow.rst", "api/iqm.benchmarks.utils_shadows.get_negativity.rst", "api/iqm.benchmarks.utils_shadows.local_shadow_tomography.rst", "changelog.rst", "development/development.rst", "development/generate_2qubit_cliffords.ipynb", "development/how_to_make_your_own_benchmark.ipynb", "devices/devices.rst", "devices/spark.ipynb", "devices/star.ipynb", "examples/example_clifford_rb.ipynb", "examples/example_clops.ipynb", "examples/example_coherence.ipynb", "examples/example_eplg.ipynb", "examples/example_experiment_all.ipynb", "examples/example_ghz.ipynb", "examples/example_graphstate.ipynb", "examples/example_gst.ipynb", "examples/example_interleaved_rb.ipynb", "examples/example_mirror_rb.ipynb", "examples/example_qscore.ipynb", "examples/example_quantum_volume.ipynb", "examples/examples.rst", "index.rst", "license.rst", "readme.md"], "titles": ["API Reference", "iqm.benchmarks", "iqm.benchmarks.benchmark", "iqm.benchmarks.benchmark.BenchmarkBase", "iqm.benchmarks.benchmark.BenchmarkConfigurationBase", "iqm.benchmarks.benchmark_definition", "iqm.benchmarks.benchmark_definition.Benchmark", "iqm.benchmarks.benchmark_definition.BenchmarkAnalysisResult", "iqm.benchmarks.benchmark_definition.BenchmarkObservation", "iqm.benchmarks.benchmark_definition.BenchmarkObservationIdentifier", "iqm.benchmarks.benchmark_definition.BenchmarkRunResult", "iqm.benchmarks.benchmark_definition.add_counts_to_dataset", "iqm.benchmarks.benchmark_definition.default_analysis_function", "iqm.benchmarks.benchmark_definition.merge_datasets_dac", "iqm.benchmarks.benchmark_definition.show_figure", "iqm.benchmarks.circuit_containers", "iqm.benchmarks.circuit_containers.BenchmarkCircuit", "iqm.benchmarks.circuit_containers.CircuitGroup", "iqm.benchmarks.circuit_containers.Circuits", "iqm.benchmarks.coherence", "iqm.benchmarks.coherence.coherence", "iqm.benchmarks.coherence.coherence.CoherenceBenchmark", "iqm.benchmarks.coherence.coherence.CoherenceConfiguration", "iqm.benchmarks.coherence.coherence.calculate_probabilities", "iqm.benchmarks.coherence.coherence.coherence_analysis", "iqm.benchmarks.coherence.coherence.exp_decay", "iqm.benchmarks.coherence.coherence.fit_coherence_model", "iqm.benchmarks.coherence.coherence.plot_coherence", "iqm.benchmarks.compressive_gst", "iqm.benchmarks.compressive_gst.compressive_gst", "iqm.benchmarks.compressive_gst.compressive_gst.CompressiveGST", "iqm.benchmarks.compressive_gst.compressive_gst.GSTConfiguration", "iqm.benchmarks.compressive_gst.compressive_gst.create_predefined_gate_set", "iqm.benchmarks.compressive_gst.compressive_gst.parse_gate_set", "iqm.benchmarks.compressive_gst.compressive_gst.parse_layouts", "iqm.benchmarks.compressive_gst.gst_analysis", "iqm.benchmarks.compressive_gst.gst_analysis.bootstrap_errors", "iqm.benchmarks.compressive_gst.gst_analysis.dataframe_to_figure", "iqm.benchmarks.compressive_gst.gst_analysis.dataset_counts_to_mgst_format", "iqm.benchmarks.compressive_gst.gst_analysis.generate_basis_labels", "iqm.benchmarks.compressive_gst.gst_analysis.generate_gate_results", "iqm.benchmarks.compressive_gst.gst_analysis.generate_non_gate_results", "iqm.benchmarks.compressive_gst.gst_analysis.generate_unit_rank_gate_results", "iqm.benchmarks.compressive_gst.gst_analysis.mgst_analysis", "iqm.benchmarks.compressive_gst.gst_analysis.pandas_results_to_observations", "iqm.benchmarks.compressive_gst.gst_analysis.result_str_to_floats", "iqm.benchmarks.compressive_gst.gst_analysis.run_mGST_wrapper", "iqm.benchmarks.entanglement", "iqm.benchmarks.entanglement.ghz", "iqm.benchmarks.entanglement.ghz.GHZBenchmark", "iqm.benchmarks.entanglement.ghz.GHZConfiguration", "iqm.benchmarks.entanglement.ghz.fidelity_analysis", "iqm.benchmarks.entanglement.ghz.fidelity_ghz_coherences", "iqm.benchmarks.entanglement.ghz.fidelity_ghz_randomized_measurements", "iqm.benchmarks.entanglement.ghz.generate_ghz_linear", "iqm.benchmarks.entanglement.ghz.generate_ghz_log_cruz", "iqm.benchmarks.entanglement.ghz.generate_ghz_log_mooney", "iqm.benchmarks.entanglement.ghz.generate_ghz_spanning_tree", "iqm.benchmarks.entanglement.ghz.generate_ghz_star", "iqm.benchmarks.entanglement.ghz.get_cx_map", "iqm.benchmarks.entanglement.ghz.get_edges", "iqm.benchmarks.entanglement.ghz.plot_fidelities", "iqm.benchmarks.entanglement.graph_states", "iqm.benchmarks.entanglement.graph_states.GraphStateBenchmark", "iqm.benchmarks.entanglement.graph_states.GraphStateConfiguration", "iqm.benchmarks.entanglement.graph_states.find_edges_with_disjoint_neighbors", "iqm.benchmarks.entanglement.graph_states.generate_graph_state", "iqm.benchmarks.entanglement.graph_states.generate_minimal_edge_layers", "iqm.benchmarks.entanglement.graph_states.negativity_analysis", "iqm.benchmarks.entanglement.graph_states.plot_density_matrix", "iqm.benchmarks.entanglement.graph_states.plot_max_negativities", "iqm.benchmarks.entanglement.graph_states.plot_max_negativities_graph", "iqm.benchmarks.entanglement.graph_states.shadow_tomography_analysis", "iqm.benchmarks.entanglement.graph_states.state_tomography_analysis", "iqm.benchmarks.entanglement.graph_states.update_pauli_expectations", "iqm.benchmarks.logging_config", "iqm.benchmarks.optimization", "iqm.benchmarks.optimization.qscore", "iqm.benchmarks.optimization.qscore.QScoreBenchmark", "iqm.benchmarks.optimization.qscore.QScoreConfiguration", "iqm.benchmarks.optimization.qscore.calculate_optimal_angles_for_QAOA_p1", "iqm.benchmarks.optimization.qscore.compute_expectation_value", "iqm.benchmarks.optimization.qscore.create_objective_function", "iqm.benchmarks.optimization.qscore.cut_cost_function", "iqm.benchmarks.optimization.qscore.get_optimal_angles", "iqm.benchmarks.optimization.qscore.is_successful", "iqm.benchmarks.optimization.qscore.plot_approximation_ratios", "iqm.benchmarks.optimization.qscore.qscore_analysis", "iqm.benchmarks.optimization.qscore.run_QAOA", "iqm.benchmarks.quantum_volume", "iqm.benchmarks.quantum_volume.clops", "iqm.benchmarks.quantum_volume.clops.CLOPSBenchmark", "iqm.benchmarks.quantum_volume.clops.CLOPSConfiguration", "iqm.benchmarks.quantum_volume.clops.clops_analysis", "iqm.benchmarks.quantum_volume.clops.plot_times", "iqm.benchmarks.quantum_volume.clops.retrieve_clops_elapsed_times", "iqm.benchmarks.quantum_volume.quantum_volume", "iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeBenchmark", "iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeConfiguration", "iqm.benchmarks.quantum_volume.quantum_volume.compute_heavy_output_probabilities", "iqm.benchmarks.quantum_volume.quantum_volume.cumulative_hop", "iqm.benchmarks.quantum_volume.quantum_volume.cumulative_std", "iqm.benchmarks.quantum_volume.quantum_volume.get_ideal_heavy_outputs", "iqm.benchmarks.quantum_volume.quantum_volume.get_rem_hops", "iqm.benchmarks.quantum_volume.quantum_volume.heavy_projector", "iqm.benchmarks.quantum_volume.quantum_volume.is_successful", "iqm.benchmarks.quantum_volume.quantum_volume.plot_hop_threshold", "iqm.benchmarks.quantum_volume.quantum_volume.qv_analysis", "iqm.benchmarks.randomized_benchmarking", "iqm.benchmarks.randomized_benchmarking.clifford_rb", "iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb", "iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.CliffordRBConfiguration", "iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.CliffordRandomizedBenchmarking", "iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.clifford_rb_analysis", "iqm.benchmarks.randomized_benchmarking.direct_rb", "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb", "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.DirectRBConfiguration", "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.DirectRandomizedBenchmarking", "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.direct_rb_analysis", "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.generate_drb_circuits", "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.generate_fixed_depth_parallel_drb_circuits", "iqm.benchmarks.randomized_benchmarking.eplg", "iqm.benchmarks.randomized_benchmarking.eplg.eplg", "iqm.benchmarks.randomized_benchmarking.eplg.eplg.EPLGBenchmark", "iqm.benchmarks.randomized_benchmarking.eplg.eplg.EPLGConfiguration", "iqm.benchmarks.randomized_benchmarking.eplg.eplg.eplg_analysis", "iqm.benchmarks.randomized_benchmarking.eplg.eplg.plot_layered_fidelities_graph", "iqm.benchmarks.randomized_benchmarking.interleaved_rb", "iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb", "iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.InterleavedRBConfiguration", "iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.InterleavedRandomizedBenchmarking", "iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.interleaved_rb_analysis", "iqm.benchmarks.randomized_benchmarking.mirror_rb", "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb", "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRBConfiguration", "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRandomizedBenchmarking", "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.compute_polarizations", "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.generate_fixed_depth_mrb_circuits", "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.generate_pauli_dressed_mrb_circuits", "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.list_to_numcircuit_times_numpauli_matrix", "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.mrb_analysis", "iqm.benchmarks.randomized_benchmarking.multi_lmfit", "iqm.benchmarks.randomized_benchmarking.multi_lmfit.create_multi_dataset_params", "iqm.benchmarks.randomized_benchmarking.multi_lmfit.eval_func_single_dataset", "iqm.benchmarks.randomized_benchmarking.multi_lmfit.get_param_names_from_func_signature", "iqm.benchmarks.randomized_benchmarking.multi_lmfit.multi_dataset_residual", "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common", "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.compute_inverse_clifford", "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.edge_grab", "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.estimate_survival_probabilities", "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.exponential_rb", "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.fit_decay_lmfit", "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.generate_all_rb_circuits", "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.generate_fixed_depth_parallel_rb_circuits", "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.generate_random_clifford_seq_circuits", "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.get_survival_probabilities", "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.import_native_gate_cliffords", "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.lmfit_minimizer", "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.plot_rb_decay", "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.relabel_qubits_array_from_zero", "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.submit_parallel_rb_job", "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.submit_sequential_rb_jobs", "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.survival_probabilities_parallel", "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.validate_irb_gate", "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.validate_rb_qubits", "iqm.benchmarks.readout_mitigation", "iqm.benchmarks.readout_mitigation.M3IQM", "iqm.benchmarks.readout_mitigation.apply_readout_error_mitigation", "iqm.benchmarks.readout_mitigation.readout_error_m3", "iqm.benchmarks.utils", "iqm.benchmarks.utils.bootstrap_counts", "iqm.benchmarks.utils.count_2q_layers", "iqm.benchmarks.utils.count_native_gates", "iqm.benchmarks.utils.extract_fidelities", "iqm.benchmarks.utils.generate_state_tomography_circuits", "iqm.benchmarks.utils.get_Pauli_expectation", "iqm.benchmarks.utils.get_active_qubits", "iqm.benchmarks.utils.get_iqm_backend", "iqm.benchmarks.utils.get_measurement_mapping", "iqm.benchmarks.utils.get_neighbors_of_edges", "iqm.benchmarks.utils.get_tomography_matrix", "iqm.benchmarks.utils.marginal_distribution", "iqm.benchmarks.utils.median_with_uncertainty", "iqm.benchmarks.utils.perform_backend_transpilation", "iqm.benchmarks.utils.random_hamiltonian_path", "iqm.benchmarks.utils.reduce_to_active_qubits", "iqm.benchmarks.utils.remove_directed_duplicates_to_list", "iqm.benchmarks.utils.retrieve_all_counts", "iqm.benchmarks.utils.retrieve_all_job_metadata", "iqm.benchmarks.utils.set_coupling_map", "iqm.benchmarks.utils.sort_batches_by_final_layout", "iqm.benchmarks.utils.split_into_disjoint_pairs", "iqm.benchmarks.utils.split_sequence_in_chunks", "iqm.benchmarks.utils.submit_execute", "iqm.benchmarks.utils.timeit", "iqm.benchmarks.utils.xrvariable_to_counts", "iqm.benchmarks.utils_plots", "iqm.benchmarks.utils_plots.GraphPositions", "iqm.benchmarks.utils_plots.calculate_node_radii", "iqm.benchmarks.utils_plots.draw_graph_edges", "iqm.benchmarks.utils_plots.evaluate_hamiltonian_paths", "iqm.benchmarks.utils_plots.plot_layout_fidelity_graph", "iqm.benchmarks.utils_plots.rx_to_nx_graph", "iqm.benchmarks.utils_shadows", "iqm.benchmarks.utils_shadows.CUE", "iqm.benchmarks.utils_shadows.get_local_shadow", "iqm.benchmarks.utils_shadows.get_negativity", "iqm.benchmarks.utils_shadows.local_shadow_tomography", "Changelog", "Development", "2-Qubit Clifford Group Decomposition", "How to make your own benchmark?", "Devices", "Benchmarking IQM Spark", "Benchmarking IQM Star", "Clifford Randomized Benchmarking (CRB)", "Circuit Layer Operations Per Second (CLOPS)", "Coherence experiments", "Error Per Layered Gate (EPLG)", "IQM Benchmarks: Summary Notebook", "Greenberger\u2013Horne\u2013Zeilinger (GHZ) State Fidelity", "Graph State Bipartite Entanglement", "Compressive Gate Set Tomography (GST)", "Interleaved Randomized Benchmarking (IRB)", "Mirror Randomized Benchmarking (MRB)", "Q-Score", "Quantum Volume (QV)", "Examples", "IQM Benchmarks", "License", "IQM Benchmarks"], "terms": {"": [1, 25, 26, 29, 91, 134, 137, 138, 149, 155, 163, 165, 170, 183, 213, 214, 216, 217, 218, 221, 229, 230], "python": 1, "librari": [1, 116, 129, 134, 163, 208, 210, 222], "suit": [1, 230], "qcvv": [1, 37, 211, 228, 230], "subpackag": [1, 19, 28, 47, 76, 89, 108, 109, 114, 121, 127, 132], "modul": [1, 5, 15, 19, 28, 47, 75, 76, 89, 108, 109, 114, 121, 127, 132, 228], "gener": [2, 3, 18, 21, 29, 30, 31, 39, 42, 47, 49, 50, 54, 55, 56, 57, 58, 59, 63, 64, 66, 78, 86, 91, 94, 97, 106, 112, 116, 119, 120, 123, 124, 129, 130, 134, 137, 138, 141, 142, 148, 152, 153, 154, 159, 162, 169, 170, 174, 184, 197, 200, 201, 204, 208, 213, 214, 215, 218, 219, 220, 221, 222, 223, 229], "class": [2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 16, 17, 18, 20, 21, 22, 29, 30, 31, 33, 48, 49, 50, 62, 63, 64, 77, 78, 79, 90, 91, 92, 96, 97, 98, 110, 111, 112, 115, 116, 117, 122, 123, 124, 128, 129, 130, 133, 134, 135, 152, 165, 166, 196, 197, 208, 210, 211, 229, 230], "inherit": [2, 3, 5, 15, 20, 29, 48, 62, 77, 90, 96, 110, 115, 122, 128, 133, 165, 196], "benchmarkbas": [2, 4, 230], "abc": [2, 3, 5, 6, 20, 29, 48, 62, 77, 90, 96, 110, 115, 122, 128, 133], "benchmarkconfigurationbas": [2, 3, 6, 20, 22, 29, 31, 33, 48, 50, 62, 64, 77, 79, 90, 92, 96, 98, 110, 111, 115, 116, 122, 124, 128, 129, 133, 134, 230], "pydant": [2, 4, 20, 22, 29, 31, 48, 50, 62, 64, 77, 79, 90, 92, 96, 98, 110, 111, 115, 116, 122, 124, 128, 129, 133, 134], "main": [2, 7, 8, 20, 29, 30, 48, 62, 77, 90, 96, 110, 115, 122, 128, 133, 213], "basemodel": [2, 4, 20, 29, 48, 62, 77, 90, 96, 110, 115, 122, 128, 133], "backend": [3, 6, 21, 27, 29, 30, 31, 32, 34, 38, 49, 50, 57, 63, 66, 69, 70, 71, 72, 73, 78, 86, 91, 92, 97, 98, 106, 112, 117, 119, 120, 123, 124, 126, 130, 135, 137, 138, 148, 152, 153, 160, 161, 163, 164, 166, 167, 168, 172, 173, 177, 183, 185, 189, 190, 193, 199, 200, 202, 208, 211, 220, 230], "iqmbackendbas": [3, 6, 21, 30, 49, 63, 66, 78, 91, 97, 112, 117, 119, 120, 123, 130, 135, 137, 138, 148, 152, 153, 154, 160, 161, 163, 164, 167, 172, 177, 183, 189, 193, 200], "configur": [3, 4, 6, 21, 22, 30, 31, 33, 34, 36, 38, 41, 42, 44, 46, 49, 50, 63, 64, 78, 79, 91, 92, 97, 98, 105, 111, 112, 116, 117, 123, 124, 129, 130, 134, 135, 208, 229, 230], "base": [3, 4, 5, 6, 7, 8, 9, 10, 16, 17, 18, 21, 22, 23, 30, 31, 49, 50, 52, 59, 63, 64, 78, 79, 81, 91, 92, 97, 98, 111, 112, 116, 117, 123, 124, 129, 130, 134, 135, 146, 166, 197, 198, 208, 209, 213, 214, 229], "The": [3, 6, 7, 12, 16, 17, 18, 21, 22, 23, 25, 26, 29, 30, 31, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45, 46, 49, 50, 51, 52, 53, 54, 57, 59, 60, 61, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 78, 79, 82, 88, 91, 92, 94, 97, 98, 100, 101, 103, 104, 111, 112, 116, 117, 118, 120, 123, 124, 125, 126, 129, 130, 134, 135, 136, 137, 147, 148, 158, 162, 168, 170, 172, 173, 174, 175, 176, 177, 178, 179, 183, 184, 185, 187, 188, 191, 192, 193, 194, 197, 199, 201, 202, 207, 213, 214, 215, 220, 221, 222, 226, 227, 229, 230], "implement": [3, 5, 6, 49, 50, 53, 220], "all": [3, 4, 6, 7, 16, 17, 18, 21, 27, 31, 36, 39, 40, 42, 49, 50, 59, 61, 63, 78, 85, 91, 95, 97, 99, 100, 101, 104, 105, 111, 112, 116, 117, 123, 129, 130, 135, 152, 158, 160, 161, 166, 173, 174, 179, 180, 187, 188, 208, 211, 213, 214, 215, 217, 219, 220, 223, 225, 226, 227, 229, 230], "from": [3, 6, 7, 11, 21, 30, 31, 36, 38, 41, 42, 44, 45, 46, 49, 50, 57, 59, 60, 65, 74, 82, 88, 94, 95, 97, 99, 104, 106, 124, 134, 136, 144, 158, 159, 162, 166, 168, 170, 173, 175, 176, 177, 178, 180, 184, 186, 187, 188, 189, 195, 199, 200, 201, 204, 208, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 230], "which": [3, 6, 7, 8, 21, 24, 25, 26, 28, 31, 33, 38, 39, 40, 46, 49, 50, 57, 60, 64, 67, 78, 79, 87, 89, 91, 92, 93, 97, 107, 111, 112, 113, 116, 119, 120, 129, 130, 131, 134, 135, 137, 138, 140, 148, 152, 158, 162, 166, 173, 207, 213, 214, 216, 220, 221, 222, 229, 230], "thei": [3, 17, 41, 222], "method": [3, 4, 6, 7, 8, 9, 10, 16, 17, 18, 21, 22, 28, 30, 31, 49, 50, 52, 63, 64, 78, 79, 91, 92, 97, 98, 111, 112, 116, 117, 119, 120, 123, 124, 129, 130, 134, 135, 137, 138, 166, 183, 197, 208, 213, 214, 219, 220, 222, 226], "paramet": [3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 112, 113, 116, 117, 118, 119, 120, 123, 124, 125, 126, 129, 130, 131, 134, 135, 136, 137, 138, 139, 140, 142, 144, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 213, 214, 216, 218, 219, 220, 222], "abstract": [3, 6, 222], "classmethod": [3, 6, 7], "name": [3, 6, 7, 8, 16, 17, 18, 27, 31, 32, 33, 61, 69, 70, 71, 72, 73, 86, 94, 106, 116, 126, 129, 134, 144, 151, 152, 168, 173, 174, 177, 197, 199, 201, 207, 208, 210, 211, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 226, 229], "return": [3, 6, 9, 11, 12, 13, 16, 17, 18, 21, 23, 24, 25, 26, 27, 30, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 93, 94, 95, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 112, 113, 117, 118, 119, 120, 123, 125, 126, 130, 131, 135, 136, 137, 138, 139, 140, 143, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 210, 211], "execute_full_benchmark": 3, "execut": [3, 4, 6, 9, 16, 17, 18, 21, 29, 30, 46, 49, 59, 63, 64, 72, 73, 76, 78, 86, 89, 91, 92, 97, 98, 99, 106, 111, 112, 116, 117, 123, 129, 130, 134, 135, 136, 149, 155, 160, 161, 162, 183, 185, 193, 194, 195, 208, 211, 213, 214, 215, 216, 218, 219, 221, 223, 224, 226, 229, 230], "full": [3, 28, 29, 31, 92, 98, 222, 230], "given": [3, 6, 7, 11, 21, 31, 39, 49, 50, 54, 55, 56, 57, 58, 59, 60, 61, 66, 71, 72, 73, 76, 78, 79, 84, 89, 91, 97, 104, 105, 126, 127, 136, 153, 154, 175, 179, 180, 184, 190, 192, 197, 199, 205, 206, 213, 214, 220, 222, 230], "static": [3, 6, 21, 30, 49, 63, 78, 91, 97, 112, 117, 123, 130, 135, 197], "check_requir": 3, "all_benchmark": 3, "ordereddict": 3, "str": [3, 4, 6, 7, 8, 9, 11, 16, 17, 18, 22, 23, 26, 27, 31, 32, 33, 36, 37, 39, 45, 49, 50, 52, 53, 63, 64, 66, 69, 70, 71, 72, 73, 74, 79, 81, 82, 83, 86, 88, 91, 92, 94, 95, 97, 98, 99, 102, 103, 104, 106, 111, 112, 116, 117, 119, 120, 123, 124, 126, 129, 130, 134, 135, 136, 137, 138, 148, 149, 151, 152, 153, 154, 155, 156, 158, 160, 161, 162, 163, 164, 166, 167, 168, 170, 172, 173, 174, 175, 177, 180, 181, 182, 183, 185, 187, 188, 193, 195, 197, 198, 199, 200, 201, 205, 207, 210, 211, 213, 219, 220, 222, 224, 226], "check": [3, 34, 85, 105, 210, 213, 214, 220], "whether": [3, 4, 22, 31, 50, 64, 79, 85, 86, 88, 91, 92, 97, 98, 105, 106, 111, 116, 120, 129, 153, 158, 159, 162, 170, 174, 183, 205, 207, 220, 223, 229], "requir": [3, 79, 174, 210, 220, 222, 229, 230], "ar": [3, 4, 7, 11, 16, 17, 18, 23, 27, 30, 31, 32, 34, 36, 40, 41, 46, 49, 50, 59, 60, 74, 97, 98, 123, 138, 158, 164, 173, 174, 175, 178, 180, 181, 197, 201, 207, 208, 210, 213, 214, 216, 217, 220, 222, 227, 229, 230], "met": 3, "valid": [3, 33, 123, 163, 164, 228, 230], "dictionari": [3, 4, 7, 11, 22, 23, 31, 38, 44, 50, 63, 64, 67, 69, 70, 71, 72, 73, 74, 79, 82, 91, 92, 95, 97, 98, 99, 102, 103, 104, 111, 116, 117, 119, 120, 124, 126, 129, 134, 135, 137, 138, 147, 148, 152, 153, 154, 156, 160, 161, 167, 168, 170, 172, 173, 174, 175, 178, 180, 181, 182, 190, 193, 195, 197, 198, 199, 200, 205, 207, 215, 218, 219, 222, 223], "type": [3, 4, 6, 8, 9, 11, 12, 13, 16, 17, 18, 21, 22, 23, 24, 26, 27, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 112, 113, 116, 117, 118, 119, 120, 123, 124, 125, 126, 129, 130, 131, 134, 135, 136, 137, 138, 139, 140, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 213, 222, 229], "generate_requir": 3, "none": [3, 4, 6, 7, 8, 16, 17, 18, 22, 27, 31, 37, 39, 50, 57, 60, 64, 69, 70, 71, 79, 86, 91, 92, 97, 98, 111, 116, 119, 120, 124, 126, 129, 134, 137, 138, 142, 147, 148, 151, 152, 153, 154, 156, 158, 160, 161, 163, 166, 170, 174, 183, 185, 187, 193, 197, 199, 201, 205, 207, 213, 214, 215, 216, 217, 218, 219, 221, 223, 224, 225, 226, 230], "attribut": [3, 4, 6, 7, 8, 9, 10, 16, 17, 18, 21, 22, 30, 31, 49, 50, 63, 64, 78, 79, 91, 92, 97, 98, 111, 112, 116, 117, 123, 124, 129, 130, 134, 135, 194, 197, 218, 222, 226, 229], "shot": [4, 22, 23, 31, 50, 64, 70, 71, 79, 92, 97, 98, 111, 116, 124, 129, 134, 160, 161, 166, 167, 193, 211, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 230], "int": [4, 9, 11, 16, 17, 21, 22, 23, 26, 27, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 78, 79, 81, 82, 83, 84, 86, 88, 91, 92, 94, 97, 98, 99, 102, 105, 106, 111, 116, 117, 119, 120, 124, 126, 129, 134, 135, 136, 137, 138, 139, 148, 149, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 164, 166, 167, 170, 171, 173, 174, 175, 176, 178, 179, 181, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 204, 205, 206, 207, 218, 220, 222], "256": [4, 64, 79, 92, 98, 111, 116, 124, 129, 134, 215, 219, 224], "max_gates_per_batch": [4, 22, 31, 50, 64, 79, 92, 98, 111, 116, 124, 129, 134, 160, 161, 193, 213, 214, 215, 218, 219, 221, 224, 226, 230], "max_circuits_per_batch": [4, 22, 31, 50, 64, 79, 92, 98, 111, 116, 124, 129, 134, 160, 161, 193, 208, 218, 221, 230], "calset_id": [4, 22, 31, 50, 64, 79, 92, 98, 111, 116, 124, 129, 134, 160, 161, 193, 213, 214, 215, 216, 218, 219, 221, 223, 224, 225, 226, 230], "routing_method": [4, 22, 31, 50, 64, 79, 92, 98, 111, 116, 119, 120, 124, 129, 134, 137, 138, 183, 213, 214, 215, 218, 219, 221, 224, 226, 230], "liter": [4, 22, 31, 50, 64, 69, 70, 71, 79, 92, 98, 111, 116, 119, 120, 124, 129, 134, 137, 138, 175, 189, 197, 205, 207], "basic": [4, 22, 31, 50, 64, 79, 92, 98, 111, 116, 119, 120, 124, 129, 134, 137, 138], "lookahead": [4, 22, 31, 50, 64, 79, 92, 98, 111, 116, 119, 120, 124, 129, 134], "stochast": [4, 22, 31, 50, 64, 79, 92, 98, 111, 116, 119, 120, 124, 129, 134], "sabr": [4, 22, 31, 50, 64, 79, 92, 98, 111, 116, 119, 120, 124, 129, 134, 183, 213, 214, 215, 219, 220, 222, 226, 230], "physical_layout": [4, 22, 31, 50, 64, 79, 92, 98, 111, 116, 124, 129, 134, 189, 213, 214, 215, 218, 219, 221, 224, 226, 230], "fix": [4, 22, 31, 38, 50, 64, 79, 92, 98, 111, 116, 117, 124, 129, 134, 135, 137, 153, 160, 162, 189, 208, 213, 214, 215, 219, 222, 226, 230], "batch": [4, 17, 22, 31, 50, 64, 79, 92, 98, 111, 116, 124, 129, 134, 160, 161, 189, 190, 193, 208, 215, 218, 219, 220, 221, 222, 223, 224, 226, 230], "use_dd": [4, 22, 31, 50, 64, 79, 92, 98, 111, 116, 124, 129, 134, 218, 221], "bool": [4, 22, 31, 36, 50, 64, 79, 85, 86, 88, 91, 92, 97, 98, 105, 106, 111, 116, 120, 124, 129, 134, 158, 159, 162, 166, 170, 173, 174, 183, 199], "fals": [4, 22, 31, 36, 50, 64, 79, 92, 98, 106, 111, 116, 120, 124, 129, 134, 158, 159, 162, 166, 170, 173, 183, 199, 213, 215, 218, 219, 226], "dd_strategi": [4, 22, 31, 50, 64, 79, 92, 98, 111, 116, 124, 129, 134, 218, 221], "ddstrategi": [4, 22, 31, 50, 64, 79, 92, 98, 111, 116, 124, 129, 134], "number": [4, 21, 23, 31, 32, 33, 36, 37, 40, 49, 50, 53, 54, 55, 56, 57, 58, 59, 61, 64, 69, 70, 71, 76, 78, 79, 81, 83, 84, 86, 88, 89, 92, 97, 98, 105, 106, 108, 111, 116, 117, 119, 120, 124, 129, 134, 135, 136, 137, 138, 139, 148, 149, 152, 153, 154, 155, 160, 161, 166, 167, 170, 171, 172, 182, 184, 185, 191, 193, 197, 199, 200, 206, 207, 213, 214, 219, 220, 222], "us": [4, 6, 9, 16, 22, 27, 28, 29, 30, 31, 36, 37, 38, 41, 42, 49, 50, 52, 53, 57, 59, 60, 61, 64, 66, 69, 70, 71, 72, 73, 75, 79, 86, 88, 91, 92, 98, 116, 120, 126, 134, 136, 151, 158, 166, 168, 174, 193, 197, 198, 201, 205, 207, 208, 210, 211, 213, 214, 217, 220, 222, 223, 227, 229], "circuit": [4, 7, 10, 15, 16, 17, 21, 29, 30, 31, 32, 33, 36, 46, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 63, 66, 78, 79, 82, 89, 91, 92, 97, 98, 99, 102, 105, 106, 111, 112, 116, 117, 119, 120, 123, 124, 129, 130, 134, 135, 136, 137, 138, 139, 147, 148, 149, 152, 153, 154, 155, 160, 161, 163, 166, 167, 171, 172, 174, 176, 178, 183, 185, 190, 193, 195, 207, 208, 210, 211, 215, 219, 220, 221, 222, 223, 224, 226, 227, 228], "default": [4, 6, 12, 22, 31, 36, 39, 50, 64, 69, 70, 71, 79, 92, 97, 98, 106, 111, 116, 119, 120, 124, 129, 134, 137, 138, 148, 154, 158, 159, 162, 166, 170, 173, 174, 189, 193, 199, 205, 207, 213, 215, 219, 222, 223, 225], "i": [4, 6, 7, 21, 22, 24, 28, 30, 31, 32, 33, 36, 37, 38, 39, 42, 50, 54, 57, 59, 61, 64, 69, 70, 71, 74, 78, 79, 85, 87, 88, 91, 92, 93, 97, 98, 105, 106, 107, 111, 112, 113, 116, 119, 120, 124, 129, 130, 131, 134, 135, 136, 137, 138, 139, 140, 143, 148, 156, 158, 159, 162, 163, 166, 170, 173, 174, 175, 183, 189, 193, 197, 198, 199, 201, 205, 206, 207, 208, 210, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 230], "2": [4, 21, 31, 32, 33, 37, 60, 79, 85, 98, 105, 116, 120, 124, 134, 153, 159, 171, 173, 191, 209, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230], "8": [4, 31, 159, 191, 210, 213, 214, 215, 217, 218, 219, 220, 221, 223, 224, 226, 229, 230], "maximum": [4, 40, 70, 71, 72, 73, 88, 124, 160, 161, 193, 200, 208, 213, 214, 222], "gate": [4, 22, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 44, 46, 49, 50, 54, 58, 59, 60, 67, 79, 89, 91, 92, 98, 108, 109, 112, 114, 116, 117, 119, 120, 121, 122, 123, 124, 127, 129, 130, 132, 134, 137, 138, 147, 148, 151, 152, 153, 154, 156, 158, 160, 161, 163, 171, 172, 174, 183, 193, 198, 200, 201, 205, 207, 208, 213, 220, 224, 227, 228, 230], "per": [4, 27, 31, 69, 70, 71, 89, 92, 98, 111, 116, 120, 121, 122, 134, 136, 137, 138, 139, 160, 161, 166, 167, 193, 206, 208, 222, 227, 228, 230], "option": [4, 29, 50, 60, 69, 70, 71, 79, 86, 97, 98, 116, 117, 119, 124, 126, 129, 134, 137, 138, 147, 148, 151, 153, 154, 156, 158, 160, 161, 163, 170, 174, 183, 185, 187, 193, 197, 198, 199, 201, 205, 207, 208, 211, 217, 218, 219, 220, 221, 222, 228], "calibr": [4, 6, 50, 60, 97, 98, 124, 160, 161, 166, 167, 173, 193, 200, 201, 208, 218, 219, 220, 223, 225], "id": [4, 193, 216, 219, 223, 225], "last": [4, 31], "avail": [4, 42, 229, 230], "qiskit": [4, 6, 22, 31, 38, 79, 92, 98, 116, 119, 120, 129, 134, 137, 138, 163, 183, 193, 208, 210, 211, 213, 222], "rout": [4, 92, 98, 116, 119, 120, 134, 137, 138, 183, 219, 220, 222, 226], "transpil": [4, 16, 22, 30, 49, 50, 52, 53, 79, 91, 92, 98, 116, 119, 120, 134, 137, 138, 152, 153, 163, 167, 172, 183, 190, 208, 211, 213, 216, 219, 220, 222, 226], "physic": [4, 31, 33, 39, 50, 64, 79, 91, 92, 97, 98, 102, 116, 120, 129, 134, 137, 189, 219, 222, 226, 228], "layout": [4, 8, 11, 16, 17, 31, 33, 50, 61, 64, 71, 79, 91, 92, 97, 98, 116, 117, 120, 126, 134, 135, 160, 161, 168, 173, 183, 189, 197, 201, 208, 213, 214, 219, 220, 222, 224, 226], "constrain": [4, 189, 230], "dure": [4, 13, 22, 32, 63, 97, 112, 130, 221], "select": [4, 31, 50, 79, 98, 104, 124, 201, 208, 220, 222], "qubit": [4, 8, 9, 11, 16, 17, 19, 21, 22, 23, 26, 27, 30, 31, 32, 33, 36, 38, 41, 42, 44, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 66, 67, 69, 70, 71, 72, 73, 76, 78, 79, 81, 82, 88, 89, 91, 92, 97, 98, 102, 106, 108, 111, 112, 116, 117, 119, 120, 123, 124, 126, 129, 134, 135, 136, 137, 138, 148, 149, 151, 152, 153, 154, 155, 158, 159, 160, 161, 162, 164, 166, 168, 171, 173, 174, 176, 178, 183, 185, 189, 190, 193, 197, 198, 199, 201, 204, 205, 206, 207, 208, 209, 211, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 226, 228], "initi": [4, 6, 25, 28, 29, 31, 36, 46, 50, 75, 168, 213, 222], "allow": [4, 208, 213, 214, 220, 230], "ani": [4, 8, 31, 32, 36, 52, 53, 63, 72, 73, 95, 97, 117, 129, 135, 139, 158, 160, 161, 167, 188, 192, 197, 210, 229, 230], "other": [4, 23, 30, 36, 50, 174, 193, 207, 208, 213, 214, 216, 229, 230], "accord": [4, 36, 49, 55, 56, 78, 116, 148, 189, 190, 200, 210, 219, 222, 226], "final": [4, 6, 41, 60, 92, 97, 98, 102, 116, 120, 134, 178, 183, 189, 190, 193, 213], "measur": [4, 23, 26, 27, 28, 29, 31, 36, 38, 42, 44, 49, 50, 52, 69, 70, 71, 78, 81, 91, 92, 97, 98, 102, 111, 116, 119, 120, 129, 134, 162, 167, 172, 174, 175, 178, 189, 190, 193, 207, 211, 213, 214, 220, 222], "boolean": [4, 50, 220], "flag": [4, 50, 199], "determin": [4, 31, 50, 220, 229], "enabl": [4, 191, 193, 208], "dynam": [4, 193, 208], "decoupl": [4, 193, 208], "model_config": [4, 22, 31, 50, 64, 79, 92, 98, 111, 116, 124, 129, 134], "classvar": [4, 22, 31, 50, 64, 79, 92, 98, 111, 116, 124, 129, 134], "configdict": [4, 22, 31, 50, 64, 79, 92, 98, 111, 116, 124, 129, 134], "model": [4, 22, 26, 31, 36, 50, 64, 79, 92, 98, 111, 116, 124, 129, 134, 151, 157, 158, 213, 222], "should": [4, 6, 8, 10, 22, 31, 49, 50, 57, 64, 74, 75, 79, 92, 98, 111, 116, 124, 129, 134, 153, 193, 208, 219, 220, 222, 229], "conform": [4, 22, 31, 37, 50, 64, 79, 92, 98, 111, 116, 124, 129, 134], "config": [4, 22, 31, 50, 64, 79, 92, 98, 111, 116, 124, 129, 134], "thi": [5, 6, 15, 16, 21, 26, 31, 32, 37, 42, 49, 50, 57, 61, 85, 92, 105, 124, 159, 168, 197, 209, 210, 211, 212, 213, 214, 216, 218, 220, 222, 227, 229, 230], "defin": [5, 6, 7, 33, 34, 57, 59, 92, 152, 199, 211, 213, 214, 220, 229, 230], "function": [5, 6, 20, 21, 24, 26, 29, 30, 31, 35, 43, 46, 48, 62, 63, 68, 74, 77, 78, 82, 87, 90, 91, 93, 96, 97, 107, 110, 112, 113, 115, 117, 118, 122, 123, 125, 128, 130, 131, 133, 135, 140, 141, 143, 144, 146, 147, 150, 151, 157, 159, 165, 169, 193, 194, 196, 203, 208, 222], "benchmarkobservationidentifi": [5, 8, 44, 208, 215, 217, 219, 223, 226], "benchmarkobserv": [5, 7, 26, 44, 61, 72, 73, 208, 215, 217, 219, 223, 226], "benchmarkrunresult": [5, 6, 7, 12, 21, 24, 30, 43, 49, 51, 63, 68, 78, 87, 91, 93, 97, 107, 112, 113, 117, 118, 123, 125, 130, 131, 135, 140, 208], "benchmarkanalysisresult": [5, 6, 12, 21, 24, 30, 43, 49, 51, 63, 68, 78, 87, 91, 93, 97, 107, 112, 113, 117, 118, 123, 125, 130, 131, 135, 140, 208], "kwarg": 6, "A": [6, 7, 9, 10, 11, 13, 16, 17, 21, 23, 24, 25, 26, 27, 30, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 54, 55, 56, 57, 58, 59, 60, 61, 63, 65, 66, 67, 69, 70, 71, 72, 73, 78, 87, 91, 93, 95, 97, 103, 104, 107, 112, 113, 116, 117, 119, 120, 126, 134, 135, 137, 138, 140, 147, 148, 151, 153, 154, 160, 161, 170, 173, 174, 175, 176, 178, 179, 180, 181, 183, 184, 185, 186, 189, 191, 192, 193, 195, 197, 199, 200, 206, 213, 220, 222, 229, 230], "run": [6, 7, 8, 10, 21, 24, 29, 30, 31, 33, 36, 43, 44, 49, 50, 51, 63, 68, 78, 82, 87, 91, 92, 93, 97, 107, 112, 113, 117, 118, 123, 125, 130, 131, 135, 140, 208, 211, 213, 214, 219, 222, 227, 230], "cortex": [6, 11], "experi": [6, 21, 22, 23, 24, 26, 27, 36, 38, 41, 42, 44, 46, 61, 63, 68, 69, 70, 71, 72, 73, 78, 86, 87, 91, 93, 94, 97, 98, 100, 101, 107, 112, 113, 116, 120, 126, 130, 131, 135, 140, 150, 157, 158, 162, 164, 174, 199, 219, 227, 228], "In": [6, 116, 213, 214, 218, 222, 229, 230], "order": [6, 31, 36, 60, 61, 151, 159, 173, 174, 208, 218, 220, 230], "write": [6, 166, 210, 211, 229], "new": [6, 7, 11, 185, 208, 211, 213, 214, 222, 230], "recommend": [6, 222, 229, 230], "deriv": [6, 229], "baseclass": 6, "addition": [6, 220], "custom": [6, 79, 98, 123, 124, 197, 213, 214, 219, 225, 226, 230], "analysi": [6, 7, 12, 21, 22, 24, 30, 31, 35, 43, 63, 68, 72, 73, 78, 87, 91, 93, 94, 97, 107, 112, 113, 117, 118, 123, 125, 130, 131, 135, 140, 208, 213, 222], "can": [6, 10, 16, 31, 39, 41, 50, 67, 76, 78, 89, 97, 116, 168, 173, 201, 208, 213, 214, 216, 218, 220, 222, 226, 230], "give": [6, 30, 82, 191, 208, 213, 217, 220, 222, 229], "pointer": 6, "analysis_funct": [6, 21, 30, 49, 63, 78, 91, 97, 112, 117, 123, 130, 135, 211], "field": [6, 229], "accept": [6, 31, 86, 208, 229], "analysisresult": [6, 7, 21, 24, 49, 51, 78, 87, 91, 93, 97, 107, 112, 113, 117, 118, 123, 125, 130, 131, 135, 140, 208, 211], "its": [6, 126, 144, 185, 208, 213, 214, 229], "input": [6, 11, 33, 65, 74, 92, 98, 117, 123, 139, 159, 163, 164, 168, 179, 182, 184, 189, 191, 192, 206, 217, 219, 222], "result": [6, 7, 8, 10, 11, 12, 21, 24, 29, 30, 31, 36, 37, 40, 41, 42, 43, 44, 45, 61, 76, 78, 81, 87, 88, 89, 91, 93, 97, 98, 105, 106, 107, 112, 113, 117, 118, 123, 125, 130, 131, 135, 140, 149, 155, 157, 189, 193, 208, 211, 213, 214, 219, 226, 229, 230], "onli": [6, 12, 32, 92, 98, 116, 173, 185, 197, 206, 213, 214, 216, 220, 222, 224, 229], "pass": [6, 12, 139, 161, 168, 183, 193, 211, 218, 219], "through": [6, 12, 53, 229], "iqmbackend": [6, 97, 117, 135, 160, 161], "iqmfacadebackend": 6, "dataset": [6, 7, 10, 11, 13, 21, 30, 36, 38, 40, 41, 42, 43, 44, 46, 49, 51, 52, 53, 61, 63, 72, 73, 78, 91, 94, 97, 112, 117, 123, 130, 135, 141, 143, 158, 195, 208, 211, 215, 218, 219, 222, 223, 226], "overridden": 6, "an": [6, 16, 17, 26, 28, 29, 30, 31, 40, 43, 44, 46, 49, 50, 51, 52, 78, 91, 120, 124, 130, 131, 159, 163, 167, 168, 175, 184, 198, 199, 204, 208, 210, 211, 213, 214, 220, 222, 229, 230], "xarrai": [6, 7, 11, 13, 21, 30, 36, 38, 42, 44, 46, 49, 52, 63, 78, 91, 97, 112, 117, 123, 130, 135, 195, 208, 211], "contain": [6, 7, 9, 10, 13, 15, 16, 17, 18, 23, 26, 33, 36, 37, 38, 40, 41, 42, 44, 46, 49, 51, 52, 53, 61, 63, 72, 73, 74, 117, 135, 148, 160, 161, 173, 185, 197, 198, 201, 208, 213, 214, 222, 226, 227, 229, 230], "inform": [6, 10, 60, 63, 75, 201, 229], "necessari": [6, 206, 213, 220, 230], "analys": 6, "calibration_set_id": [6, 217, 218, 221], "uuid": 6, "calibrationsetid": 6, "latest": [6, 193, 220, 228], "set": [6, 16, 17, 21, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 42, 46, 49, 65, 79, 92, 97, 98, 137, 139, 145, 148, 158, 172, 175, 179, 189, 193, 210, 213, 214, 220, 221, 223, 227, 228, 230], "runresult": [6, 7, 10, 21, 24, 49, 51, 78, 87, 91, 93, 97, 107, 112, 113, 130, 131, 135, 140, 208, 211], "analyz": [6, 10, 26, 49, 51, 171, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 225, 226, 230], "run_index": [6, 219, 226], "1": [6, 27, 31, 42, 64, 79, 83, 104, 116, 119, 120, 134, 137, 138, 148, 150, 153, 159, 173, 174, 183, 205, 206, 207, 210, 211, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 230], "intern": [6, 17], "perform": [6, 30, 42, 72, 73, 79, 92, 98, 151, 162, 174, 183, 207, 213, 222, 227, 229, 230], "make": [6, 97, 193, 208, 209, 213, 228, 229, 230], "shallow": 6, "copi": [6, 170, 210, 222, 229], "produc": [6, 29, 33, 40, 42, 60, 98, 222, 230], "therefor": [6, 85, 105], "chang": [6, 31, 208, 228, 229], "data": [6, 7, 11, 26, 29, 30, 31, 35, 36, 42, 49, 50, 52, 60, 69, 72, 73, 94, 106, 124, 142, 145, 151, 157, 166, 173, 200, 201, 211, 219, 220, 222, 226], "just": [6, 213], "structur": [6, 119, 213, 214], "arrai": [6, 25, 26, 29, 36, 38, 40, 42, 46, 91, 111, 116, 120, 123, 124, 129, 134, 158, 159, 164, 168, 198, 205, 222], "index": [6, 26, 49, 57, 59, 60, 91, 97, 116, 137, 226, 228], "construct": [6, 28, 50, 54, 205], "updat": [6, 30, 43, 72, 73, 74, 91, 92, 208, 213, 214, 219, 230], "core": 7, "circuit_contain": 7, "plot": [7, 27, 29, 30, 31, 43, 49, 51, 61, 69, 70, 71, 72, 73, 106, 126, 158, 196, 201, 208, 211, 213, 214, 215, 219, 220, 223, 230], "dict": [7, 11, 23, 27, 31, 32, 33, 52, 53, 63, 67, 69, 70, 71, 72, 73, 74, 81, 82, 88, 91, 94, 95, 97, 99, 102, 103, 104, 116, 117, 119, 120, 126, 134, 135, 136, 137, 138, 147, 148, 149, 152, 153, 154, 155, 156, 158, 160, 161, 162, 167, 168, 170, 172, 173, 174, 175, 178, 180, 181, 182, 187, 188, 190, 193, 195, 197, 198, 199, 200, 205, 207, 211], "matplotlib": [7, 27, 37, 201, 211, 213, 214, 221, 222], "figur": [7, 14, 27, 37, 40, 41, 42, 61, 69, 70, 71, 86, 94, 106, 126, 158, 199, 201, 211, 218, 219, 221, 222], "factori": [7, 16, 17, 18], "observ": [7, 8, 9, 26, 30, 43, 44, 49, 51, 61, 72, 73, 94, 158, 182, 208, 213, 214, 215, 217, 218, 219, 220, 221, 223, 225, 226], "list": [7, 9, 11, 13, 16, 17, 18, 21, 22, 23, 26, 27, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 49, 50, 52, 53, 57, 59, 60, 61, 65, 66, 67, 72, 73, 78, 80, 81, 82, 84, 86, 88, 91, 92, 97, 99, 100, 101, 102, 103, 105, 106, 116, 117, 119, 120, 134, 135, 136, 137, 138, 139, 148, 149, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 167, 168, 170, 171, 172, 173, 176, 179, 181, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 195, 198, 199, 200, 201, 207, 208, 210, 214, 217, 218, 220, 221, 222, 226, 229, 230], "object": [7, 8, 9, 10, 16, 17, 18, 26, 27, 33, 36, 37, 44, 49, 51, 61, 97, 117, 135, 142, 160, 161, 177, 187, 188, 193, 197, 199, 201, 222, 226, 229], "dataclass": [7, 8, 10], "store": [7, 8, 10, 30, 43, 61, 197, 208, 216, 230], "consist": [7, 28, 208, 220, 229], "map": [7, 30, 50, 57, 60, 67, 72, 73, 81, 82, 92, 98, 173, 178, 183, 186, 189, 190, 197, 199, 202, 208, 220], "kei": [7, 23, 69, 70, 71, 74, 81, 88, 91, 97, 102, 116, 119, 120, 126, 134, 137, 138, 148, 172, 174, 175, 178, 180, 181, 182, 190, 193, 200, 207, 210, 218, 221, 222, 226], "valu": [7, 8, 23, 25, 26, 31, 45, 49, 50, 53, 57, 67, 69, 70, 71, 74, 81, 82, 88, 91, 92, 116, 119, 120, 126, 134, 137, 138, 148, 150, 159, 172, 173, 174, 175, 178, 181, 182, 183, 190, 193, 198, 200, 208, 210, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226], "pair": [7, 45, 58, 60, 63, 67, 69, 70, 71, 72, 73, 91, 124, 126, 164, 173, 179, 186, 191, 213, 218], "plot_nam": 7, "plot_al": [7, 211, 213, 214, 216, 217, 218, 219, 220, 222, 225, 226], "from_run_result": 7, "creat": [7, 21, 24, 30, 32, 36, 41, 49, 50, 57, 58, 78, 82, 87, 91, 93, 97, 107, 112, 113, 130, 131, 135, 140, 201, 209, 211, 230], "identifi": [8, 9, 11, 36, 44, 63, 97, 117, 135, 151, 158, 160, 161, 163, 187, 193, 195, 208, 213, 215, 217, 218, 219, 220, 221, 222, 223, 226, 229], "uncertainti": [8, 26, 31, 45, 53, 69, 70, 71, 126, 182, 215, 217, 218, 219, 220, 221, 222, 223, 224, 226], "singl": [8, 10, 13, 16, 18, 22, 31, 45, 50, 61, 64, 79, 80, 91, 92, 97, 98, 120, 143, 148, 173, 175, 193, 198, 201, 204, 208, 213, 214, 220, 222, 230], "string": [8, 9, 11, 17, 18, 23, 26, 36, 39, 45, 74, 162, 174, 175, 180, 187, 205, 218, 230], "qubit_indic": [9, 16, 215, 217, 218, 219, 221, 223, 226], "eas": 9, "indic": [9, 21, 22, 23, 26, 27, 70, 71, 72, 73, 97, 102, 126, 181, 190, 197, 199, 201, 205, 220, 229], "wa": [9, 23, 34, 41, 70, 71, 85, 105, 162, 213, 214, 217, 229], "properti": [9, 16, 17, 19, 21], "string_identifi": [9, 213, 219, 220, 222], "version": [9, 141, 210, 213, 214, 217, 229, 230], "enough": [10, 220], "those": [10, 23, 97, 102, 189, 213, 214, 222, 229], "count": [11, 23, 31, 36, 38, 41, 42, 44, 46, 49, 50, 51, 74, 81, 82, 88, 97, 99, 136, 149, 155, 162, 167, 168, 170, 172, 175, 181, 187, 188, 195, 205, 208, 213, 215, 217, 218, 219, 220, 221, 222, 223, 224, 226], "add": [11, 17, 21, 30, 49, 59, 63, 78, 91, 97, 112, 117, 123, 130, 135, 148, 194, 208, 210, 229, 230], "job": [11, 91, 95, 97, 117, 135, 160, 161, 187, 211, 215, 216, 218, 219, 223, 224, 226], "If": [11, 27, 31, 36, 42, 50, 79, 116, 120, 123, 124, 134, 156, 162, 173, 175, 180, 197, 198, 201, 207, 213, 214, 218, 220, 222, 224, 229], "same": [11, 17, 60, 134, 173, 213, 214, 219, 220, 222, 229], "alreadi": [11, 215], "present": 11, "old": 11, "both": [11, 30, 98, 156, 213, 216, 218, 223, 230], "ad": [11, 25, 208, 215, 216, 218, 219, 221, 223, 224, 226], "togeth": [11, 230], "bitstr": [11, 23, 74, 81, 82, 83, 88, 104, 162, 175, 181], "current": [11, 36, 38, 39, 41, 42, 44, 46, 50, 91, 166, 173, 220, 222, 230], "instanc": [11, 16, 17, 30, 43, 52, 53, 71, 86, 126, 173, 208, 222], "xr": [11, 13, 21, 41, 49, 52, 53, 61, 63, 72, 73, 78, 91, 94, 97, 112, 117, 123, 130, 135, 158, 195, 211], "merg": [11, 13], "where": [11, 16, 17, 23, 31, 33, 34, 36, 46, 50, 138, 178, 201, 208, 213, 214, 220, 222, 229], "dataset_merg": 11, "recurs": 13, "minim": [13, 31, 50, 57, 59, 66, 157, 191, 220], "size": [13, 31, 37, 50, 57, 76, 78, 86, 88, 156, 191, 192, 204, 211, 213, 219, 220, 225, 230], "dateset": 13, "fig": [14, 61, 211, 220], "show": [14, 201, 211, 213, 214, 216, 219, 220], "close": [14, 31, 211], "easili": [15, 208, 230], "interact": [15, 208], "quantum": [15, 30, 31, 32, 33, 49, 50, 52, 54, 55, 56, 57, 58, 78, 89, 91, 92, 96, 97, 98, 99, 102, 105, 107, 137, 148, 149, 153, 154, 155, 166, 167, 171, 172, 174, 176, 178, 183, 185, 193, 197, 201, 207, 208, 218, 220, 222, 227, 228, 230], "circuitgroup": [15, 16, 49, 208], "benchmarkcircuit": [15, 18, 30, 208], "circuit_group": [16, 218, 221], "group": [16, 17, 21, 72, 73, 112, 209, 213, 218, 221, 228], "purpos": [16, 17, 229], "typic": [16, 17, 213, 214], "repres": [16, 17, 23, 32, 37, 66, 67, 94, 106, 179, 181, 184, 186, 201, 229], "exampl": [16, 141, 191, 208, 209, 211, 212, 217, 220, 222, 228, 229, 230], "insid": [16, 208], "get_circuit_group_by_nam": 16, "get": [16, 29, 31, 144, 175, 177, 197, 219, 222, 224], "desir": [16, 17, 30, 184], "doe": [16, 50, 229], "exist": [16, 18, 197, 208, 213, 214, 230], "group_nam": [16, 218], "integ": [16, 17, 31, 33, 50, 66, 67, 97, 102, 137, 179, 186, 191], "qubit_layouts_by_index": [16, 17], "tupl": [16, 17, 21, 23, 26, 27, 30, 31, 32, 33, 36, 40, 41, 42, 45, 46, 50, 53, 57, 65, 69, 70, 71, 72, 73, 81, 82, 86, 88, 91, 92, 94, 97, 102, 106, 116, 117, 124, 126, 135, 151, 152, 153, 154, 156, 158, 160, 167, 173, 183, 184, 190, 191, 193, 197, 199, 200, 207], "qubit_layout": [16, 17, 31, 32, 33, 34, 36, 38, 40, 41, 42, 44, 49, 52, 53, 57, 59, 60, 61, 201, 213, 219, 220, 222], "qiskit_iqm": [17, 50, 208, 211, 213, 214, 217, 218, 219, 221], "iqm_circuit": 17, "iqmcircuit": [17, 32, 33, 49, 54, 55, 56, 57, 58, 91, 97, 102, 135, 137, 138, 147, 148, 152, 153, 154, 156, 160, 161, 163, 167, 171, 172, 174, 176, 178, 183, 185, 190, 193, 208], "It": [17, 116, 124, 210, 213, 214, 230], "common": [17, 146, 229], "activ": [17, 176, 185, 207, 230], "add_circuit": 17, "circuit_nam": 17, "get_circuits_by_nam": 17, "share": [17, 229, 230], "found": [17, 173, 213, 214, 220, 221, 230], "benchmark_circuit": [18, 218, 221], "get_benchmark_circuits_by_nam": [18, 218], "request": 18, "otherwis": [18, 229], "estim": [19, 21, 29, 31, 36, 40, 42, 46, 47, 49, 50, 52, 53, 63, 64, 76, 78, 92, 97, 112, 114, 117, 121, 123, 126, 130, 132, 135, 136, 162, 175, 208, 213, 214, 219, 220, 223], "comput": [19, 21, 36, 42, 49, 51, 57, 81, 82, 97, 99, 100, 101, 103, 147, 149, 155, 181, 182, 201, 206, 210, 213, 214, 218, 220, 222, 228, 229, 230], "reson": [19, 21, 208, 217, 220, 221, 223, 230], "coherencebenchmark": [20, 22, 217], "benchmark_definit": [20, 22, 29, 31, 48, 50, 62, 64, 77, 79, 90, 92, 96, 98, 110, 111, 115, 116, 122, 124, 128, 129, 133, 134, 211], "coherenceconfigur": [20, 21, 217], "backend_arg": [21, 63, 78, 91, 97, 112, 117, 119, 120, 123, 130, 135, 137, 138, 148, 152, 153, 154, 160, 161, 163, 164, 167, 172, 200], "correspond": [21, 24, 26, 32, 39, 67, 69, 70, 71, 74, 78, 87, 89, 91, 92, 93, 97, 102, 106, 107, 112, 113, 116, 117, 118, 119, 120, 123, 124, 125, 126, 130, 131, 134, 135, 136, 137, 138, 140, 148, 158, 162, 167, 174, 190, 193, 200, 202, 207, 208, 213, 214, 215, 218, 219, 220, 221, 223, 224, 226], "generate_coherence_circuit": 21, "nqubit": [21, 23], "quantumcircuit": [21, 31, 32, 33, 49, 54, 55, 56, 57, 58, 66, 78, 91, 97, 102, 117, 119, 120, 135, 138, 147, 148, 152, 153, 154, 160, 161, 167, 171, 174, 176, 178, 183, 185, 190, 193, 205, 207, 208, 210, 211, 222], "delai": [21, 22, 26, 27, 166, 217], "time": [21, 22, 23, 25, 26, 27, 30, 31, 36, 91, 94, 95, 97, 117, 135, 160, 161, 194, 208, 213, 214, 216, 219, 220, 222], "appli": [21, 22, 50, 54, 59, 67, 91, 98, 208, 219, 220, 224, 229], "add_all_meta_to_dataset": [21, 63, 78, 91, 97, 117, 123, 130, 135], "metadata": [21, 30, 49, 61, 63, 78, 91, 95, 97, 112, 117, 123, 130, 135, 188], "variabl": [21, 25, 33, 63, 78, 91, 97, 112, 117, 123, 130, 135, 151, 211, 220, 222, 230], "checkerboard_groups_from_coupl": 21, "coupling_map": [21, 60, 183, 213, 214, 218, 221], "assign": [21, 32, 91, 92, 116, 117, 124, 134, 170, 174, 207, 208, 213, 214, 216, 219], "b": [21, 151, 206, 210, 213, 229], "checkerboard": 21, "pattern": [21, 120], "infer": [21, 74, 213], "connect": [21, 50, 59, 164, 201, 208, 220], "graph": [21, 47, 57, 59, 60, 62, 63, 64, 65, 66, 68, 71, 78, 79, 80, 81, 82, 83, 85, 86, 88, 126, 179, 184, 197, 199, 200, 201, 202, 208, 213, 214, 220, 227, 228, 230], "assum": [21, 50, 61, 159, 175, 229], "grid": [21, 220], "like": [21, 25, 39, 44, 168, 210, 213, 214, 216, 230], "edg": [21, 59, 60, 65, 67, 81, 82, 83, 148, 179, 184, 186, 199, 200, 201, 208, 213, 214, 218, 220], "group_b": 21, "group_a": 21, "1000": [22, 50, 79, 98, 167, 211, 213, 214, 217, 219, 220, 222, 225, 226], "iqm_client": [22, 31, 50, 64, 79, 92, 98, 111, 116, 124, 129, 134, 217], "float": [22, 23, 25, 26, 27, 30, 31, 37, 45, 60, 69, 70, 71, 72, 73, 74, 78, 80, 81, 83, 84, 85, 86, 88, 91, 94, 95, 99, 100, 101, 102, 103, 104, 105, 106, 116, 119, 120, 126, 129, 134, 136, 137, 138, 148, 149, 150, 151, 155, 158, 162, 163, 166, 168, 172, 173, 175, 180, 181, 182, 197, 198, 206], "optimize_sqg": [22, 50, 79, 91, 92, 98, 183, 213, 214, 217, 219, 226, 230], "true": [22, 31, 36, 50, 52, 79, 92, 97, 98, 116, 120, 158, 162, 173, 174, 183, 210, 213, 214, 217, 218, 219, 220, 222, 223, 225, 226, 230], "qiskit_optim_level": [22, 50, 79, 92, 98, 116, 119, 120, 134, 137, 138, 183, 213, 214, 217, 218, 219, 224, 226, 230], "3": [22, 31, 50, 79, 92, 98, 105, 116, 159, 173, 191, 210, 211, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 230], "coherence_exp": [22, 23, 26, 27, 217], "t1": [22, 23, 26, 27, 208, 217], "qubits_to_plot": [22, 217], "optim": [22, 29, 31, 40, 42, 50, 91, 92, 98, 116, 119, 120, 134, 137, 138, 183, 208, 213, 214, 219, 220, 222, 225, 226, 230], "level": [22, 44, 50, 79, 92, 98, 116, 119, 120, 134, 137, 138, 208, 213, 214, 219, 220, 226], "specifi": [22, 31, 32, 33, 36, 46, 50, 65, 92, 97, 98, 116, 117, 119, 120, 124, 129, 134, 135, 137, 138, 148, 156, 160, 161, 164, 172, 175, 179, 180, 181, 189, 191, 193, 198, 205, 208, 213, 214, 217, 218, 224, 230], "either": [22, 31, 116, 151, 156, 168, 172, 173, 181, 197, 201, 205, 207, 210, 220, 222, 229, 230], "echo": 22, "calcul": [23, 25, 59, 80, 86, 102, 145, 171, 194, 198, 208, 213, 214], "0": [23, 31, 49, 57, 59, 60, 78, 85, 98, 116, 119, 134, 137, 138, 148, 159, 173, 183, 189, 191, 206, 210, 211, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 230], "each": [23, 27, 36, 38, 46, 59, 61, 67, 70, 71, 86, 100, 101, 102, 106, 116, 126, 129, 134, 136, 138, 142, 159, 162, 167, 172, 173, 198, 201, 205, 207, 215, 218, 219, 220, 222, 223, 224, 229, 230], "provid": [23, 26, 50, 84, 197, 198, 209, 211, 212, 213, 214, 217, 218, 219, 220, 221, 229], "outcom": [23, 36, 38, 46, 167, 213, 214, 222], "being": [23, 26, 67, 69, 85, 91, 97, 102, 105, 106, 116, 119, 120, 134, 136, 137, 138, 148, 149, 155, 172, 174, 180, 181, 193, 200, 207, 213, 214, 220], "occurr": 23, "total": [23, 50, 64, 124, 145, 210, 213, 214, 216, 220], "t": [25, 27, 71, 197, 208, 221, 229], "c": [25, 26, 27, 210, 213, 218, 221, 229], "exponenti": [25, 31, 150, 213], "decai": [25, 26, 27, 150, 158, 208, 213], "evalu": [25, 143, 200, 213, 214], "amplitud": [25, 26, 27, 129, 150, 213, 219, 223, 230], "constant": [25, 213], "dictat": 25, "rate": [25, 213], "offset": [25, 26, 27, 129, 150, 213, 219, 223, 230], "prob": 26, "ndarrai": [26, 36, 38, 40, 42, 46, 69, 91, 150, 151, 157, 180, 198, 204, 205, 206, 207], "fit": [26, 27, 41, 44, 129, 141, 142, 143, 145, 150, 151, 157, 158, 208, 222, 229], "probabl": [26, 27, 36, 38, 46, 100, 101, 103, 104, 116, 119, 120, 134, 137, 138, 148, 149, 155, 162, 181, 213, 214, 224, 230], "along": [26, 36, 46, 229], "were": [26, 159, 162, 195, 208], "t2_echo": [26, 27, 217], "t_fit": [26, 27], "t_fit_err": [26, 27], "backend_nam": [27, 69, 70, 72, 73, 86, 106, 215, 218, 221, 224, 226], "qubit_set": [27, 148, 151], "qubit_prob": 27, "timestamp": [27, 69, 70, 71, 72, 73, 86, 106, 126, 199, 215, 224], "qubit_to_plot": 27, "subplot": 27, "amplitude_list": 27, "involv": [27, 91, 213, 214], "p": [27, 150, 213], "differ": [27, 30, 33, 36, 49, 94, 134, 197, 213, 216, 217, 220, 222, 226, 227, 229, 230], "label": [27, 31, 32, 33, 37, 39, 50, 69, 70, 71, 74, 92, 106, 126, 129, 137, 147, 154, 158, 174, 175, 183, 189, 205, 207, 208, 210, 211, 213, 216, 220], "error": [27, 29, 31, 34, 36, 40, 41, 42, 44, 45, 50, 52, 79, 97, 98, 103, 121, 122, 124, 158, 168, 201, 208, 213, 219, 220, 222, 227, 228, 230], "specif": [27, 130, 183, 197, 210, 212, 213, 214, 219, 222, 226, 227, 229], "logic": 27, "filenam": 27, "save": [27, 36, 37, 41, 222], "compress": [28, 29, 30, 31, 35, 43, 208, 227, 228, 230], "gst": [28, 30, 31, 36, 37, 38, 41, 42, 43, 44, 208, 227, 228], "self": [28, 30, 154, 211], "character": [28, 30, 213, 228], "process": [28, 29, 36, 98, 213, 214, 215, 218, 219, 223, 224, 226], "matric": [28, 40, 221, 222], "well": [28, 30, 42, 43], "parametr": [28, 36, 82, 89, 91, 92, 213, 214, 219, 222], "state": [28, 31, 36, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 62, 63, 64, 66, 68, 70, 71, 73, 149, 155, 174, 208, 211, 222, 227, 228, 229, 230], "povm": [28, 36, 40, 46, 222], "low": [28, 222], "rank": [28, 31, 40, 42, 208, 222], "matrix": [28, 29, 40, 69, 139, 180, 204, 206, 210, 213, 214], "reduc": [28, 31, 50, 185], "post": [28, 98, 215, 218, 219, 223, 224, 226], "overhead": 28, "tomographi": [29, 35, 64, 69, 70, 71, 72, 73, 174, 203, 207, 227, 228, 230], "follow": [29, 120, 213, 214, 218, 220, 222, 229, 230], "step": 29, "said": 29, "convers": [29, 229], "ideal": [29, 99, 136, 213, 214, 221], "numpi": [29, 38, 40, 42, 170, 198, 205, 207, 210, 213, 214, 217, 218, 219, 222, 223], "mgst": [29, 31, 38, 45, 46, 208, 222, 229, 230], "first": [29, 31, 36, 46, 59, 78, 91, 116, 134, 220, 222, 224, 226, 227], "gaug": [29, 40, 42, 222], "target": [29, 31, 36, 42, 46, 66, 183, 222], "pygsti": [29, 36], "rerun": [29, 220], "bootstrap": [29, 31, 36, 41, 42, 64, 70, 71, 170, 208, 222], "bar": [29, 36, 41, 42, 158, 211, 216, 222], "tabl": [29, 31, 37, 40, 41, 42, 213, 222], "reconstruct": [29, 31, 36, 46, 180, 221, 222], "compressivegst": [29, 31, 222], "gstconfigur": [29, 30, 33, 222], "spam": [30, 36, 41, 44, 213], "robust": [30, 213], "generate_meas_circuit": 30, "random": [30, 31, 49, 50, 64, 69, 70, 71, 79, 91, 108, 110, 115, 116, 117, 120, 124, 128, 129, 133, 134, 138, 146, 148, 153, 154, 170, 184, 204, 205, 207, 208, 210, 214, 220, 222, 225, 227, 228, 230], "distribut": [30, 103, 104, 181, 210, 213, 214, 229], "among": [30, 120, 193, 213, 230], "depth": [30, 31, 50, 54, 55, 56, 57, 66, 79, 97, 106, 116, 117, 119, 120, 124, 134, 135, 137, 138, 150, 153, 157, 160, 162, 213, 214, 215, 218, 219, 220, 223, 224], "rang": [30, 195, 208, 210, 211, 213, 214, 215, 217, 219, 221, 222, 223, 224, 230], "l_min": 30, "l_max": 30, "seq_len_list": [30, 31], "No": 30, "than": [30, 50, 213, 214, 220, 224, 230], "need": [30, 31, 37, 49, 91, 168, 213, 214, 218, 220, 222, 230], "axactli": 30, "describ": [30, 229], "meaning": [30, 76, 78, 89, 97, 98], "untranspiled_circuit": 30, "untranspil": [30, 97, 102, 119, 120, 152, 183, 208], "circuit_gen_transp_tim": 30, "took": 30, "transpiled_circuit": [30, 161, 167, 218], "add_configuration_to_dataset": [30, 49], "sourc": [30, 222, 228, 229], "further": [30, 49, 208], "storag": [30, 49, 208], "routin": [30, 37, 49, 50, 79, 98, 151], "1024": [31, 50], "gate_set": [31, 32, 33, 222], "num_circuit": [31, 36, 46, 92, 98, 213, 214, 216, 219, 222, 226, 230], "gate_label": [31, 222], "14": [31, 210, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 230], "from_init": 31, "max_init": 31, "20": [31, 124, 210, 211, 215, 218, 219, 223], "opt_method": 31, "auto": 31, "max_iter": 31, "convergence_criteria": 31, "4": [31, 91, 159, 174, 180, 210, 211, 213, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 230], "0001": [31, 211], "batch_siz": 31, "bootstrap_sampl": [31, 222], "test": [31, 208, 213, 214, 230], "parallel_execut": [31, 111, 116, 129, 213, 215, 218, 219, 223, 230], "ghzbenchmark": [31, 48, 50, 213, 214, 219, 220], "sequenc": [31, 38, 50, 64, 65, 66, 69, 79, 92, 97, 98, 111, 116, 117, 119, 120, 124, 129, 134, 135, 136, 148, 149, 152, 153, 154, 155, 160, 174, 179, 182, 183, 189, 191, 192, 199, 205, 207, 213, 215, 219, 222, 223], "e": [31, 32, 33, 36, 46, 50, 116, 129, 134, 159, 162, 174, 175, 195, 208, 213, 214, 216, 219, 220, 222, 226], "g": [31, 50, 116, 129, 134, 159, 162, 174, 184, 195, 208, 210, 213, 214, 219, 220, 222, 226], "meant": [31, 33, 50], "cirucuit": 31, "one": [31, 92, 124, 159, 162, 211, 213, 214, 220, 222, 224, 229, 230], "predefin": [31, 32, 197, 201, 220, 222], "1qxyi": [31, 222], "2qxycz": [31, 222], "2qxycz_extend": [31, 222], "3qxycz": [31, 222], "tomograph": [31, 180], "complet": 31, "mean": [31, 64, 69, 70, 71, 85, 162, 172, 201, 210, 213, 214, 222, 229], "vacuum": 31, "abl": [31, 218], "prepar": [31, 46, 49, 66, 119, 174, 204, 207, 211, 213, 220, 222, 229], "form": [31, 148, 218, 229], "frame": [31, 222], "space": [31, 162], "practic": [31, 230], "suffici": [31, 206, 220], "condit": [31, 85, 105, 206, 220, 229], "combin": [31, 39, 213, 214, 229], "local": [31, 64, 205, 207, 220], "pauli": [31, 39, 42, 74, 134, 136, 137, 138, 139, 174, 175, 180, 210, 222], "eigenst": 31, "union": [31, 168, 222, 229], "how": [31, 49, 209, 212, 222, 227, 228, 229, 230], "mani": [31, 49, 91, 208, 220], "guidelin": [31, 208], "choos": [31, 39, 50, 78, 214, 220, 229], "At": 31, "least": [31, 98, 213, 214, 222, 229], "50": [31, 64, 211, 213, 214, 218, 219, 221, 222, 223, 224, 229], "400": [31, 210, 215, 219, 221], "two": [31, 116, 120, 134, 148, 173, 210, 211, 213, 220, 222], "6": [31, 40, 159, 210, 215, 217, 218, 219, 220, 221, 223, 224, 229, 230], "2000": [31, 214, 222], "three": [31, 213, 214], "9": [31, 210, 211, 213, 215, 216, 217, 218, 219, 220, 221, 223, 224, 229, 230], "expect": [31, 74, 81, 82, 88, 116, 119, 120, 134, 137, 138, 148, 175, 180, 208, 213], "grow": 31, "linearli": [31, 50], "krau": [31, 36, 40, 42, 46, 222], "coher": [31, 49, 50, 52, 198, 201, 208, 213, 214, 219, 220, 227, 228], "dim": 31, "control": [31, 37, 208, 220, 229], "maxim": [31, 58, 213, 214], "middl": 31, "cutoff": 31, "below": [31, 116, 213, 214, 220, 222, 229, 230], "possibl": [31, 50, 184, 220, 226, 229], "algorithm": [31, 46, 50, 59, 148, 197, 201, 213, 214, 220], "point": [31, 158, 182, 220], "tri": [31, 124, 200], "limit": [31, 210, 229], "amount": [31, 47, 64, 194, 195, 208], "retri": 31, "gd": 31, "sfn": 31, "gradient": 31, "descent": 31, "saddl": 31, "free": [31, 229], "newton": 31, "respect": [31, 50, 69, 116, 119, 134, 136, 174, 200, 208, 213], "automat": [31, 41, 134, 137, 138, 218, 220, 230], "iter": [31, 168, 181], "while": [31, 166, 220, 222, 229], "second": [31, 36, 46, 89, 91, 116, 217, 227, 228], "when": [31, 98, 197, 208, 213, 216, 220, 230], "termin": [31, 229, 230], "multipli": [31, 83], "cost": [31, 213, 214], "threshold": [31, 85, 86, 98, 105, 106, 213, 214], "nois": [31, 213], "consid": [31, 92, 98, 124, 189, 205, 217], "success": [31, 85, 105, 213, 214], "10": [31, 92, 124, 162, 200, 210, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 230], "usual": [31, 42], "sensibl": 31, "rel": 31, "between": [31, 58, 59, 138, 159, 166, 201, 213, 214, 216, 220], "consecut": [31, 50], "1e": [31, 222], "hyperparamt": 31, "converg": [31, 222], "behaviour": 31, "smaller": [31, 49, 50, 57, 213, 220, 230], "runtim": [31, 208], "lead": [31, 208, 220, 222], "errat": 31, "jump": 31, "lack": 31, "repeat": [31, 213, 214], "fake": [31, 208], "via": [31, 49, 50, 213, 214, 220, 222], "parallel": [31, 50, 59, 67, 89, 111, 116, 120, 124, 129, 153, 160, 162, 171, 208, 213, 214, 219, 220, 223], "num_qubit": [32, 33, 53, 54, 55, 56, 58, 78, 79, 97, 136, 149, 155, 197, 214, 217, 218, 221], "transipil": 32, "so": [32, 41, 208, 213, 214, 222], "stage": [32, 208], "mai": [32, 210, 213, 214, 216, 229], "actual": [32, 213, 214, 217], "gate_labels_dict": [32, 33], "rx_pi_2": [32, 33], "pi": [32, 33, 210, 219, 223], "rotat": [32, 33, 42, 210, 211], "around": [32, 33, 213, 214], "x": [32, 33, 36, 46, 64, 83, 143, 145, 158, 174, 175, 197, 204, 208, 210, 211, 218, 221, 222, 224, 226], "axi": [32, 33, 36, 46, 158, 208], "num_gat": [32, 33], "handl": [33, 230], "correct": [34, 106, 136, 166, 167, 208, 213, 214, 222], "properli": [34, 40, 42, 44, 213, 214], "rais": [34, 123, 124, 139, 148, 156, 164, 166, 175, 180, 183, 189, 197, 198, 207], "code": [35, 213, 214, 222, 228, 229, 230], "y": [36, 38, 46, 174, 175, 197, 210], "k": [36, 46, 210, 213, 214, 216, 224, 226], "rho": [36, 46, 206, 222], "target_mdl": 36, "resampl": [36, 170], "repetit": 36, "newli": 36, "sampl": [36, 49, 64, 69, 70, 71, 82, 88, 98, 104, 116, 119, 120, 123, 124, 129, 134, 136, 137, 138, 139, 148, 152, 153, 154, 170, 222], "non": [36, 41, 44, 65, 150, 213, 214, 229], "corresp": 36, "num_povm": [36, 46], "subarrai": [36, 46], "oper": [36, 42, 46, 89, 108, 163, 172, 208, 210, 220, 222, 227, 228], "enumer": [36, 46, 173, 220, 221, 222], "3d": [36, 40, 42, 222], "cpt": [36, 46], "superoper": [36, 46, 222], "standard": [36, 37, 39, 40, 42, 46, 86, 98, 101, 110, 158, 172, 208, 222, 230], "basi": [36, 39, 42, 46, 163, 183, 210, 213, 214, 222, 229], "stack": [36, 46], "els": [36, 210, 218], "x_arrai": 36, "tensor": [36, 208], "e_arrai": 36, "rho_arrai": 36, "df_g_arrai": 36, "qualiti": [36, 41, 44, 49, 213, 214], "df_o_arrai": 36, "df": 37, "datafram": [37, 40, 41, 42, 44], "row_label": 37, "col_width": 37, "fontsiz": 37, "12": [37, 210, 215, 217, 218, 219, 221, 222, 223, 224, 226], "turn": [37, 38, 40, 41, 42, 213], "panda": [37, 40, 41, 42, 44], "file": [37, 208, 229, 230], "row": 37, "cell": [37, 213, 214], "width": [37, 208, 213, 214, 220], "font": [37, 221], "text": [37, 213, 214, 222, 229], "obtain": [38, 210, 213, 214, 229, 230], "format": [38, 40, 41, 42, 44, 45, 173, 213, 229], "2d": [38, 40], "j": [38, 210, 213, 214, 220, 222], "column": 38, "pdim": 39, "dimens": [39, 211, 222], "ii": [39, 210, 211, 229], "ix": 39, "xx": 39, "df_g": [40, 42, 44], "x_opt": [40, 42], "e_opt": 40, "rho_opt": 40, "max_ev": 40, "arbitrari": [40, 124], "them": [40, 42, 59, 67, 211, 230], "after": [40, 42, 153, 230], "conta": 40, "element": [40, 78], "densiti": [40, 69, 116, 119, 120, 134, 137, 138, 148, 158, 180, 206, 213, 214, 221], "optmiz": 40, "eigenvalu": 40, "choi": 40, "df_g_evals_fin": 40, "fig_g": [40, 42], "fidel": [40, 42, 49, 50, 51, 52, 53, 59, 60, 61, 92, 108, 109, 112, 114, 117, 121, 123, 124, 126, 127, 130, 132, 135, 136, 151, 158, 173, 198, 200, 201, 208, 222, 227, 228, 230], "etc": [40, 42, 216], "fig_choi": 40, "df_g_final": [40, 42], "df_o": [41, 44], "also": [41, 42, 168, 208, 218, 220, 222, 226, 229, 230], "metric": [41, 42, 92, 173, 198, 201, 213, 214, 222, 223], "df_o_fin": 41, "k_target": [42, 46], "includ": [42, 86, 94, 170, 199, 208, 213, 214, 216, 219, 220, 229], "hamiltonian": [42, 124, 184, 200, 208, 222], "diamond": [42, 222], "distanc": [42, 50, 59, 222], "4d": 42, "df_g_rotat": 42, "fig_rot": 42, "convert": [44, 45, 139, 202, 210], "high": [44, 50, 213, 214, 220], "simpl": [44, 211, 213, 230], "observation_list": 44, "result_str": 45, "err": 45, "interv": 45, "floar": 45, "wrapper": [46, 49], "alg": 46, "x_target": 46, "e_target": 46, "rho_target": 46, "ghz": [47, 208, 227, 228, 230], "verifi": [47, 163, 210], "greenberg": [47, 49, 213, 214, 227, 228], "horn": [47, 49, 213, 214, 227, 228], "zeiling": [47, 49, 213, 214, 227, 228], "bipartit": [47, 63, 208, 227, 228, 230], "nativ": [47, 49, 60, 63, 66, 120, 123, 153, 154, 156, 163, 172, 174, 205, 207, 208, 213], "ghzconfigur": [48, 49, 213, 214, 219, 220], "generate_native_ghz": 49, "qubit_count": [49, 50], "topologi": [49, 173, 183, 185, 189, 197, 201, 208, 213], "subset": [49, 52, 53, 57, 59, 60, 67], "system": [49, 50, 52, 53, 57, 59, 60, 156, 166, 197, 213, 214, 222, 229, 230], "protocol": [49, 52, 53, 57, 59, 60, 213, 214, 227], "equal": [49, 57, 97, 208, 213, 214], "generate_coherence_meas_circuit": 49, "take": [49, 50, 183, 194, 208, 213, 214, 222, 230], "output": [49, 75, 99, 100, 101, 102, 103, 104, 105, 159, 166, 191, 208, 210, 213, 214, 218, 222, 226, 230], "mult": 49, "q": [49, 76, 78, 79, 85, 116, 219, 222, 227, 228, 230], "qc_list_transpil": 49, "append_rm": 49, "num_rm": [49, 50, 220], "append": [49, 91, 207, 210, 211, 222], "1q": [49, 116, 119, 120, 134, 137, 138, 148, 156, 205, 207, 208, 213], "clifford": [49, 109, 110, 111, 112, 113, 116, 119, 120, 128, 129, 130, 134, 137, 138, 147, 148, 152, 153, 154, 156, 163, 164, 205, 207, 208, 209, 218, 223, 227, 228, 230], "uniformli": [49, 116, 119, 120, 134, 137, 138, 148, 213], "param": [49, 54, 55, 56, 58, 91, 100, 112, 130, 139, 143, 145, 147, 149, 160, 161, 164, 181, 187, 188, 206], "origin": [49, 65, 97, 102, 170, 183, 185, 229], "generate_readout_circuit": 49, "creation": [49, 220], "all_circuits_list": 49, "state_generation_routin": [50, 213, 214, 219, 220], "tree": [50, 57, 59, 213, 219, 220], "custom_qubits_arrai": [50, 78, 79, 98, 124, 208, 213, 214, 218, 219, 220, 225, 226, 230], "fidelity_routin": [50, 213, 214, 219, 220], "100": [50, 64, 92, 98, 170, 213, 214, 216, 217, 218, 219, 221, 222, 225, 230], "rem": [50, 52, 79, 98, 106, 167, 208, 213, 214, 219, 220, 225, 226, 230], "mit_shot": [50, 79, 97, 98, 167, 213, 214, 219, 220, 225, 226, 230], "cal_url": [50, 173, 201, 218, 220], "log": [50, 55, 56, 57, 59, 220], "coupl": [50, 57, 60, 67, 92, 98, 173, 183, 186, 189, 199, 202, 213, 220], "cz": [50, 58, 59, 60, 120, 153, 172, 173, 183, 205, 207, 210, 213, 220], "account": [50, 79, 183, 222, 230], "span": [50, 57, 59], "largest": [50, 213, 214, 220], "weight": [50, 59, 60, 104], "applic": [50, 59, 148, 210, 220, 229], "cx": [50, 54, 59, 91], "scale": [50, 213, 214], "logarithm": [50, 220], "naiv": [50, 79, 220], "textbook": [50, 220], "NOT": 50, "support": [50, 60, 229], "denot": 50, "here": [50, 136, 211, 213, 214, 222], "ha": [50, 79, 159, 213, 214, 215, 222, 224, 229, 230], "small": [50, 208], "architectur": 50, "iqm_transpil": 50, "optimize_single_qubit_g": 50, "multipl": [50, 52, 64, 120, 141, 208, 213, 214, 220], "moonei": [50, 52, 213, 214, 220], "2021": [50, 52, 213, 214, 220, 230], "randomized_measur": [50, 220], "outlin": 50, "http": [50, 53, 55, 56, 141, 182, 210, 211, 217, 218, 219, 220, 221, 222, 229, 230], "arxiv": [50, 53, 55, 56, 92, 120, 148, 210, 220, 230], "org": [50, 53, 55, 56, 210, 220, 222, 229], "ab": [50, 53, 55, 56, 210, 220, 221], "1812": [50, 53], "02624": [50, 53], "chosen": [50, 79, 213, 214, 220, 222], "readout": [50, 52, 79, 97, 98, 103, 165, 166, 168, 198, 201, 208, 219, 220], "mitig": [50, 52, 79, 97, 98, 103, 165, 166, 167, 168, 208, 219, 220], "url": [50, 124, 173, 200, 201, 213, 214, 218, 230], "retriev": [50, 91, 95, 124, 187, 188, 195, 200, 201, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226], "priorit": 50, "ideal_prob": 53, "cross": [53, 213, 214, 229], "correl": [53, 220], "rm": [53, 207], "eq": [53, 210], "34": [53, 211, 215, 218, 219, 221, 226], "hadamard": [54, 210], "seri": 54, "linear": [54, 124, 199, 218], "fashion": 54, "symmetr": 54, "halv": 54, "1807": [55, 220], "05572": [55, 220], "2101": [56, 220], "08946": [56, 220], "n_state": [57, 213], "networkx": [57, 59, 60, 78, 80, 81, 82, 83, 184, 202, 213, 214], "n": [57, 79, 112, 135, 180, 184, 200, 204, 210, 213, 214, 218, 220, 221], "participating_qubit": 57, "qc": [57, 91, 174, 176, 207, 210, 211, 230], "move": [58, 208], "cx_map": 59, "particip": 59, "2qb": 59, "subgraph": 59, "Then": [59, 230], "find": [59, 65, 124, 213, 214, 220], "most": [59, 222], "central": 59, "posit": [59, 197, 201, 208], "next": 59, "start": [59, 78, 159, 173, 213, 219, 220, 222, 230], "smallest": 59, "layer": [59, 67, 80, 84, 88, 89, 91, 92, 97, 114, 116, 117, 119, 120, 121, 122, 123, 124, 126, 132, 134, 135, 137, 138, 148, 160, 171, 199, 208, 219, 227, 228, 230], "couplingmap": [60, 67, 71, 126, 186, 189, 199, 202], "edges_c": 60, "fidelities_c": 60, "have": [60, 153, 175, 213, 214, 229, 230], "wai": [60, 173, 208, 213, 214], "v": [61, 86, 91, 93, 213, 214, 219, 223], "user": [61, 216, 218, 221, 230], "identif": [61, 229], "graphstatebenchmark": [62, 64, 221], "graphstateconfigur": [62, 63, 221], "entangel": 63, "neg": [63, 69, 70, 71, 72, 73, 206, 208], "add_all_circuits_to_dataset": [63, 97, 112, 130], "generate_all_circuit_info_for_graph_state_benchmark": 63, "associ": [63, 104, 219, 229], "disjoint": [63, 124, 191, 199, 218], "neighbor": [63, 65, 69, 72, 73, 179, 221], "project": [63, 69, 74, 104, 230], "node": [63, 65, 67, 79, 81, 82, 86, 88, 179, 184, 197, 198, 201, 213, 214, 220, 225], "cover": 63, "state_tomographi": [64, 69, 70, 71, 221], "shadow_tomographi": [64, 69, 70, 71], "num_bootstrap": [64, 70, 71, 221], "n_random_unitari": [64, 221], "n_median_of_mean": [64, 221], "shadow": [64, 70, 71, 72, 203, 205, 207], "haar": [64, 204, 205, 207], "unitari": [64, 204, 205, 207, 213, 214, 222], "over": [64, 105, 166, 181, 213], "median": [64, 69, 70, 71, 182, 213, 214], "nb": [64, 175, 206, 213, 215, 216, 219], "call": [64, 166, 208], "factor": [64, 216], "overlap": [65, 67, 208], "cp_map": [67, 186], "sort": [67, 159, 190, 218, 224, 226], "arrang": 67, "item": [67, 213, 221], "2q": [67, 116, 119, 120, 121, 123, 124, 137, 138, 148, 156, 158, 200, 213, 219], "qubit_pair": 69, "num_rm_sampl": [69, 70, 71], "num_moms_sampl": [69, 70, 71], "np": [69, 91, 150, 157, 180, 204, 205, 206, 207, 210, 213, 214, 217, 218, 219, 220, 221, 222, 223], "gather": 69, "qubit_nam": [70, 71, 126, 199, 218, 221], "num_shot": [70, 71, 92, 213, 214, 216, 219], "max": [70, 71, 79, 191, 213, 214, 221, 230], "backend_coupling_map": [71, 126, 199, 202, 218], "station": [71, 124, 126, 197, 199, 201, 208, 211, 218, 230], "won": 71, "displai": [71, 208, 210, 213, 214, 215, 218, 219, 222, 223, 229], "titl": [71, 158, 229], "all_qubit_pairs_per_group": [72, 73], "all_qubit_neighbors_per_group": [72, 73], "all_unprojected_qubit": [72, 73, 221], "execution_timestamp": [72, 73, 215, 218, 221, 224, 226], "experiment": [72, 73], "unproject": [72, 73], "pauli_expect": [74, 180], "projected_count": 74, "nonid_pauli_label": 74, "helper": [74, 159], "outermost": [74, 172], "innermost": 74, "ident": [74, 210], "z": [74, 175, 183], "instead": [74, 208, 230], "logger": [75, 194], "everi": 75, "warn": [75, 210, 213, 214, 217, 218, 221], "score": [76, 78, 79, 85, 219, 227, 228, 230], "combinatori": [76, 78, 213, 214], "problem": [76, 78, 80, 81, 82, 83, 85, 86, 213, 214, 230], "qscorebenchmark": [77, 79, 213, 214, 219, 225], "qscoreconfigur": [77, 78, 213, 214, 219, 225], "generate_maxcut_ansatz": 78, "theta": 78, "ansatz": [78, 80, 82, 84, 88], "qaoa": [78, 79, 80, 84, 88], "maxcut": [78, 80, 81, 82, 83, 84, 88, 213, 214, 219], "end": [78, 91, 97, 210, 229], "variat": [78, 213, 214], "gamma": [78, 80], "beta": [78, 80, 85, 86, 213, 214, 219], "choose_qubits_na": 78, "sequenti": [78, 116, 161, 215, 219], "choose_qubits_custom": 78, "match": [78, 197, 220], "num_inst": [79, 86, 213, 214, 219, 225], "num_qaoa_lay": [79, 213, 214, 219, 225], "min_num_nod": [79, 213, 214, 219, 225], "max_num_nod": [79, 213, 214, 219, 225], "use_virtual_nod": [79, 86, 213, 214, 219, 225], "use_classically_optimized_angl": [79, 86, 213, 214, 219, 225], "choose_qubits_routin": [79, 98, 213, 214, 219, 225, 226, 230], "min_num_qubit": 79, "seed": [79, 213, 214, 219, 225], "min": [79, 166, 213, 214], "taken": [79, 213, 214], "increas": [79, 159, 174, 222], "potenti": 79, "pre": 79, "optimis": 79, "tune": 79, "minumum": 79, "virtual_nod": [79, 81, 82, 88], "upon": [79, 92, 98], "angl": [80, 84, 86, 88], "qubit_to_nod": [81, 82], "val": 81, "virtual": [81, 82, 86, 88, 183], "cut": [81, 82, 83, 88, 213, 214], "avg": [81, 219, 222], "callabl": [82, 151, 157], "minu": [83, 124], "sign": 83, "solut": [83, 213, 214], "obj": 83, "num_lay": 84, "approximation_ratio": 85, "approxim": [85, 86, 213, 214, 219], "ratio": [85, 86, 213, 214, 219], "abov": [85, 105, 213, 214, 222, 229], "beta_ratio": 86, "beta_std": 86, "deviat": [86, 98, 101, 158, 172], "classic": [86, 88, 97, 174, 175, 178, 207], "graph_phys": 88, "qubit_nod": [88, 198], "use_classical_angl": 88, "qaoa_lay": 88, "solv": [88, 213, 214], "averag": [88, 100, 105, 106, 112, 130, 132, 136, 151, 208, 213, 214, 220, 222], "presenc": 88, "volum": [89, 96, 97, 98, 107, 208, 227, 228, 230], "reflect": [89, 91, 97, 108, 109, 127], "deepest": [89, 97], "clop": [89, 208, 227, 228, 230], "speed": [89, 91, 213, 214], "clops_v": [89, 219], "qv": [89, 91, 92, 97, 98, 100, 101, 105, 106, 208, 213, 214, 219, 227, 228], "clops_h": [89, 92, 219], "squar": [89, 213, 214, 222], "clopsbenchmark": [90, 92, 213, 214, 216, 219], "clopsconfigur": [90, 91, 213, 214, 216, 219], "h": [91, 93], "append_parameterized_unitari": 91, "q0": 91, "q1": 91, "decompos": [91, 213], "su": 91, "belong": [91, 120, 162], "generate_single_circuit": [91, 97], "generate_circuit_list": [91, 97], "generate_random_paramet": 91, "templat": [91, 213, 214, 216, 219], "float64": 91, "assign_random_parameters_to_al": 91, "dict_parametrized_circ": 91, "clops_cycl": 91, "sorted_transpiled_qc_list": [91, 97, 193], "cycl": 91, "elaps": [91, 94, 95, 194, 216, 219], "submiss": [91, 97, 117, 135, 160, 161, 213, 214, 216, 229], "generate_transpiled_clops_templ": 91, "num_upd": [92, 213, 214, 216, 219], "clops_h_bool": [92, 219], "establish": [92, 219], "By": [92, 216, 219], "definit": [92, 213, 214, 216, 219, 229], "2110": [92, 230], "14108": [92, 230], "quant": [92, 148, 230], "ph": [92, 148, 230], "rigor": [92, 222], "loos": 92, "www": [92, 210, 229], "ibm": [92, 166], "com": [92, 182, 217, 218, 220, 221], "blog": 92, "restrict": [92, 98, 189, 219, 226], "clops_data": 94, "job_meta": 95, "quantumvolumebenchmark": [96, 98, 213, 214, 219, 226], "quantumvolumeconfigur": [96, 97, 213, 214, 219, 226, 230], "classical_permut": 97, "permut": 97, "avoid": 97, "swap": [97, 210], "get_rem_quasidistro": 97, "sorted_qc_list_indic": [97, 102], "execution_result": [97, 99], "quasicollect": [97, 103, 167], "quasiprob": [97, 103, 167, 168], "qubii": 97, "submit_single_qv_job": 97, "submit": [97, 117, 135, 160, 161, 193, 215, 216, 218, 219, 220, 221, 222, 223, 224, 226, 229], "organ": [97, 193], "vanilla": [97, 106, 135, 160, 161], "dd": [97, 106, 135, 160, 161], "num_sigma": [98, 105, 106, 213, 214, 219, 226, 230], "criteria": [98, 123], "consensu": 98, "unmitig": 98, "1_000": [98, 213, 214, 219, 226, 230], "ideal_heavy_output": [99, 103], "hop": [99, 100, 101, 105, 106, 208], "heavi": [99, 100, 101, 102, 103, 104, 105, 213, 214], "cumul": [100, 101], "individu": [100, 101, 158, 205, 208, 213, 220, 222, 229, 230], "trial": [100, 101], "qc_list": [102, 183], "bitrstr": 102, "all_rem_quasidistro": 103, "noiseless": [103, 219, 221, 226], "onto": 104, "heavy_output_prob": [105, 226], "within": [105, 199, 229, 230], "sigma": [105, 106], "qv_result": [106, 213, 214, 226], "qv_results_typ": [106, 226], "in_volumetr": 106, "plot_rem": 106, "come": [106, 136, 168, 175], "context": 106, "volumetr": 106, "rb": [109, 111, 112, 113, 114, 116, 117, 118, 119, 127, 129, 130, 131, 132, 134, 135, 149, 150, 151, 153, 155, 157, 158, 161, 162, 164, 208, 210, 213, 215, 218, 219, 223], "cliffordrandomizedbenchmark": [110, 111, 213, 215, 219], "cliffordrbconfigur": [110, 112, 213, 215, 219], "qubits_arrai": [111, 116, 120, 129, 134, 153, 158, 160, 162, 164, 213, 215, 218, 219, 223, 224, 230], "sequence_length": [111, 129, 152, 153, 213, 215, 219, 223, 230], "num_circuit_sampl": [111, 116, 120, 129, 134, 152, 213, 215, 218, 219, 223, 224, 230], "length": [111, 124, 129, 136, 139, 152, 153, 154, 210, 213, 215, 219, 223], "add_all_metadata_to_dataset": 112, "direct": [114, 115, 116, 117, 118, 119, 218, 229], "canon": [114, 117, 119, 120, 135, 137, 138, 160], "directrandomizedbenchmark": [115, 116], "directrbconfigur": [115, 117], "is_eplg": [116, 120, 158, 199, 218], "two_qubit_gate_ensembl": [116, 119, 134, 137, 138, 148, 218, 219, 224, 230], "densities_2q_g": [116, 218], "clifford_sqg_prob": [116, 119, 134, 137, 138, 148, 218], "sqg_gate_ensembl": [116, 119, 134, 137, 138, 148, 218], "drb": [116, 117, 118, 119, 120, 123, 124, 125], "regist": [116, 159, 162, 174, 175, 207], "case": [116, 213, 214], "done": [116, 208, 210, 216], "eplg": [116, 120, 158, 199, 208, 227, 228], "subroutin": 116, "overrid": 116, "czgate": [116, 129, 134, 210, 213, 219, 222, 223, 224, 230], "5": [116, 159, 173, 210, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 229, 230], "igat": 116, "mrb": [116, 117, 134, 135, 137, 140, 151, 158, 160, 161, 208, 219, 227, 228], "ensembl": [116, 120, 132, 134, 135, 148, 158, 204], "cxgate": [116, 134], "len": [116, 134, 210, 213, 214, 222], "25": [116, 119, 134, 137, 138, 148, 213, 215, 218, 219, 221, 223, 224, 226, 230], "leav": 116, "uniform": 116, "assign_inputs_to_qubit": 117, "submit_single_drb_job": 117, "sorted_transpiled_circuit_dict": [117, 135, 160], "circ_sampl": [119, 137, 218], "density_2q_g": [119, 134, 137, 138, 148, 219, 224, 230], "stabil": [119, 134, 137, 138, 147, 154, 208], "randomli": 119, "assigned_density_2q_g": 120, "assigned_two_qubit_gate_ensembl": 120, "assigned_clifford_sqg_prob": 120, "assigned_sqg_gate_ensembl": 120, "cliffords_1q": [120, 153, 205, 207], "cliffords_2q": [120, 153], "barrier": [120, 172, 210, 211], "taylor": 120, "2311": [120, 230], "05933": [120, 230], "interleav": [120, 127, 128, 129, 130, 131, 134, 138, 150, 151, 152, 153, 154, 158, 208, 215, 227, 228, 230], "invers": [120, 147, 213], "term": [120, 153, 175, 205, 207, 210, 222, 229], "r": [120, 153, 172, 183, 205, 207, 210, 221, 222], "simultan": [120, 129, 151], "eplgbenchmark": [122, 124, 218], "eplgconfigur": [122, 123, 218], "validate_custom_qubits_arrai": 123, "validate_random_chain_input": 123, "chain": [123, 124, 199, 218], "valueerror": [123, 139, 148, 156, 164, 175, 180, 183, 189, 197, 198, 207], "beyond": 123, "drb_depth": [124, 218], "drb_circuit_sampl": [124, 218], "chain_length": [124, 218], "chain_path_sampl": [124, 218], "num_disjoint_lay": [124, 218], "max_hamiltonian_path_tri": [124, 218], "calibration_url": [124, 218], "proce": 124, "highest": [124, 221], "path": [124, 166, 184, 200], "must": [124, 197, 213, 214, 229, 230], "eplg_estim": 126, "interleavedrandomizedbenchmark": [128, 129, 213, 219, 223], "interleavedrbconfigur": [128, 130, 213, 219, 223, 230], "interleaved_g": [129, 152, 153, 154, 158, 213, 219, 223, 230], "interleaved_gate_param": [129, 213, 219, 223, 230], "simultaneous_fit": [129, 213, 219, 223, 230], "irb": [129, 151, 208, 227, 228], "ygate": 129, "enter": [129, 151, 153], "mirror": [132, 133, 134, 135, 138, 208, 227, 228, 230], "mirrorrandomizedbenchmark": [133, 134, 219, 224, 230], "mirrorrbconfigur": [133, 135, 219, 224, 230], "depths_arrai": [134, 219, 224, 230], "num_pauli_sampl": [134, 136, 139, 219, 224, 230], "simulation_method": [134, 137, 138], "statevector": [134, 137, 138], "extended_stabil": [134, 137, 138], "matrix_product_st": [134, 137, 138], "aer": [134, 137, 138], "simul": [134, 136, 137, 138, 166, 208, 219, 224, 226], "submit_single_mrb_job": 135, "noisy_count": 136, "ideal_count": 136, "num_circ_sampl": [136, 139, 154], "polar": [136, 151], "noisi": 136, "rescal": 136, "few": [136, 213, 214, 220], "effect": [136, 159, 213, 214], "real": [136, 230], "pauli_samples_per_circ": [137, 138], "dress": [137, 138, 139], "input_list": 139, "flat": 139, "shape": 139, "lmfit": [141, 142, 151], "extend": [141, 208], "shown": [141, 213, 214, 220, 221, 222], "document": [141, 193, 213, 214, 229, 230], "github": [141, 230], "io": 141, "py": [141, 217, 218, 221, 230], "example_fit_multi_dataset": 141, "html": [141, 182, 230], "sphx": 141, "glr": 141, "multi": [141, 213, 214], "func": [142, 143, 144, 145, 151, 157], "initial_guess": 142, "constraint": [142, 230], "simultaneously_fit_var": 142, "line": 142, "signatur": 144, "residu": 145, "sever": [145, 208, 213, 214, 216], "techniqu": 146, "qc_inv": 147, "clifford_dictionari": 147, "invert": 147, "de": [147, 154], "n_layer": 148, "grab": [148, 166], "see": [148, 193, 208, 210, 213, 220, 222, 229], "2204": 148, "07568": 148, "subsequ": [148, 229], "do": [148, 166, 223, 229], "up": [148, 213, 230], "uniti": 148, "ground": [149, 155, 211], "depolarization_prob": 150, "depolar": 150, "rb_identifi": 151, "simultaneous_fit_var": 151, "interleaved_gate_str": 151, "0th": 151, "ap": [151, 222], "m": [151, 213, 214, 215, 219, 221, 223, 224, 230], "stdrb": 151, "clifford_dict": [152, 154], "fir": 152, "num_sampl": [153, 154], "befor": [153, 213], "seq_length": 154, "system_s": 156, "import": [156, 208, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 230], "load": [156, 215, 216], "1q_dict": 156, "2q_dict": 156, "fit_paramet": 157, "fit_data": 157, "minimizerresult": 157, "violin": 158, "scatter": 158, "shade_stdev": 158, "shade_meanerror": 158, "logscal": 158, "mrb_2q_densiti": 158, "mrb_2q_ensembl": 158, "shade": 158, "arr": 159, "separate_regist": [159, 162], "reversed_arr": 159, "relabel": 159, "increasingli": 159, "zero": [159, 208, 213, 214], "7": [159, 210, 213, 215, 217, 218, 219, 220, 221, 223, 224, 229, 230], "note": [159, 168, 206, 208, 220, 222, 230], "clbit": [159, 162], "separ": [159, 162, 166, 208, 226, 229], "skip": 159, "sublist": 159, "revers": [159, 218], "circuit_compilation_opt": [161, 193], "circuitcompilationopt": [161, 193], "compil": [161, 193, 208, 213, 216, 222, 229], "submit_execut": 161, "margin": [162, 166, 181], "surviv": [162, 213], "bit": [162, 178, 181, 205], "00": [162, 213, 214, 218, 219, 220, 221, 222, 224, 226], "anoth": [162, 211], "gate_id": 163, "gate_param": 163, "m3": [165, 166, 167], "modif": [165, 229], "qpu": [165, 208, 213, 217], "m3iqm": [165, 168], "mthree": [165, 168], "m3mitig": [165, 166], "iter_threshold": 166, "4096": 166, "modifi": [166, 208, 213, 214, 229], "work": [166, 168, 208, 213, 214, 229, 230], "devic": [166, 208, 213, 214, 228, 230], "cals_from_system": 166, "initial_reset": 166, "rep_delai": 166, "cals_fil": 166, "async_c": 166, "cal_id": 166, "array_lik": 166, "1e4": 166, "max_shot": 166, "balanc": 166, "hardwar": [166, 216, 228], "independ": [166, 213], "reset": 166, "begin": [166, 210], "json": [166, 222], "async": 166, "thread": 166, "m3error": 166, "progress": 166, "against": [167, 229], "mit": [168, 229], "processor": [168, 208, 213, 214], "argument": [168, 208, 220, 230], "util": [168, 196, 203, 208, 220, 221], "final_measurement_map": 168, "qubit_name_to_index": 168, "quasiprobabilti": 168, "we": [168, 211, 213, 214, 218, 222, 229], "could": 168, "would": [168, 221], "out": [168, 229], "box": 168, "u": 168, "sinc": [168, 213, 214, 216, 222], "annot": [168, 229], "original_count": 170, "num_bootstrap_sampl": 170, "rgen": 170, "include_original_count": 170, "default_rng": 170, "circuit_list": 171, "transpiled_qc_list": 172, "all_metr": 173, "under": [173, 208, 210, 213, 222, 229], "list_fid": 173, "list_coupl": 173, "chip": [173, 197, 201], "star": [173, 183, 189, 197, 208, 212, 213, 220, 228], "crystal": [173, 197, 208], "qubit_map": 173, "For": [173, 198, 206, 217, 220, 222, 229, 230], "metrics_dict": 173, "metric_nam": 173, "qubit_1": 173, "qubit_2": 173, "active_qubit": [174, 207], "measure_oth": [174, 207], "measure_other_nam": [174, 207], "tomograhi": 174, "xy": 174, "pauli_label": 175, "charact": [175, 229], "extract": [176, 178, 195, 213, 230], "backend_label": 177, "prob_dist_or_count": 181, "prob_dist": 181, "propag": 182, "refer": [182, 199, 213, 214, 216, 222, 228, 230], "mathworld": 182, "wolfram": 182, "statisticalmedian": 182, "basis_g": 183, "drop_final_rz": 183, "optimization_level": [183, 211, 213], "sqg": [183, 219, 220, 226], "drop": 183, "rz": 183, "emploi": 183, "vertic": [184, 186, 200], "empti": 184, "backend_topologi": 185, "backend_num_qubit": [185, 199, 218], "remov": [186, 208], "duplic": 186, "iqm_job": [187, 188], "iqmjob": [187, 188, 193], "relev": 188, "transpiled_circuit_list": 190, "sorted_indic": [190, 221], "sorted_circuit": 190, "split": [191, 192, 218, 230], "13": [191, 210, 215, 217, 218, 219, 220, 221, 223, 224, 230], "17": [191, 210, 215, 216, 218, 219, 220, 221, 223, 224, 226, 230], "18": [191, 210, 215, 216, 218, 219, 220, 221, 223, 224, 230], "todo": 191, "pylint": 191, "disabl": 191, "fixm": 191, "sequence_in": 192, "split_siz": 192, "chunk": 192, "normal": [193, 229], "sent": [193, 229], "manag": [193, 229, 230], "abil": 193, "f": [194, 210, 211, 213, 214, 217, 218, 219, 220, 221, 222], "decor": 194, "statement": [194, 229], "counts_rang": 195, "visual": [196, 201, 208, 213, 220], "graphposit": 196, "variou": [197, 198, 227], "garnet_posit": 197, "garnet": [197, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 230], "deneb_posit": 197, "deneb": [197, 208, 215, 216, 219, 223, 224, 225, 226], "predefined_st": 197, "create_posit": 197, "pygraph": 197, "coordin": [197, 211], "get_posit": 197, "doesn": 197, "known": 197, "metric_dict": 198, "sq_metric": [198, 201, 220], "radii": 198, "idl": [198, 220, 222], "durat": 198, "radiu": [198, 220], "unsupport": 198, "edge_list": 199, "disjoint_lay": [199, 218], "draw": [199, 210, 213, 214, 218, 221], "respectv": 199, "path_sampl": 200, "max_tri": 200, "product": [200, 210, 229], "address": 200, "thick": [201, 208], "thinner": [201, 220], "better": [201, 220], "highlight": 201, "orang": [201, 220], "rustworkx": [202, 208], "random_gen": 204, "randomst": 204, "drawn": 204, "circuilar": 204, "unitary_arg": 205, "subsystem_bit_indic": 205, "clifford_or_haar": [205, 207], "initialis": [205, 207], "subsystem": [205, 206], "na": 206, "entangl": [206, 208, 213, 214, 219, 220, 227, 228, 230], "more": [206, 208, 213, 214, 229, 230], "mere": [206, 229], "nu": 207, "compos": [207, 210], "emerald": [208, 217], "visibl": 208, "improv": [208, 229], "t2": 208, "benchmark": [208, 209, 210, 212, 217, 221, 222, 225, 226, 227], "qscore": [208, 213, 214], "deprec": 208, "colormap": 208, "usag": 208, "optimise_single_qubit_g": 208, "relax": 208, "numba": 208, "depend": [208, 216, 220, 222, 228], "easier": [208, 229], "interoper": 208, "client": [208, 217], "iqm": [208, 209, 210, 211, 212, 217, 220, 221, 222, 223, 227, 229], "ensur": [208, 213], "bug": 208, "incorrect": 208, "jupyt": 208, "tutori": 208, "report": [208, 213, 216], "explicit": 208, "offlin": [208, 216], "spent": [208, 216], "header": 208, "example_graphst": [208, 221], "notebook": [208, 211, 213, 214, 222, 227, 228], "page": [208, 228, 229], "render": [208, 230], "wrong": 208, "aid": 208, "don": [208, 229], "bottom": 208, "top": 208, "instal": [208, 213, 222, 228], "command": [208, 230], "develop": [208, 210, 228], "mode": [208, 210, 230], "folder": [208, 229, 230], "doc": [208, 230], "spark": [208, 212, 228], "compat": 208, "adapt": [208, 230], "behavior": 208, "publish": 208, "ci": 208, "secur": [208, 230], "scan": [208, 230], "lockfil": [208, 230], "relat": [208, 213, 216], "modulenotfounderror": 208, "pyrit": [208, 225], "about": [208, 220], "revert": 208, "ones": [208, 213, 214, 230], "now": [208, 215, 219, 220, 221, 222, 223], "port": 208, "subclass": 208, "place": [208, 229], "miscellan": 208, "api": [208, 218, 220, 228, 230], "build": [208, 230], "overwrit": 208, "minor": 208, "longer": [208, 213], "renam": 208, "rebas": 208, "randomizedbenchmark": 208, "quantumvolum": 208, "serial": 208, "some": [208, 213, 214, 220], "available_benchmark": 208, "__init__": 208, "public": 208, "hint": 208, "docstr": 208, "messag": 208, "prevent": 208, "exclus": [208, 229], "section": [209, 212, 227, 229], "guidanc": [209, 212], "packag": [209, 213, 217, 218, 221, 227, 230], "your": [209, 213, 214, 216, 217, 228, 229, 230], "own": [209, 228, 229, 230], "decomposit": [209, 228], "1402": 210, "4848": 210, "copyright": [210, 229], "2024": [210, 215, 229], "licens": [210, 228], "apach": [210, 229], "you": [210, 213, 214, 217, 218, 223, 229, 230], "except": [210, 211, 229], "complianc": [210, 229], "unless": [210, 229], "law": [210, 229], "agre": [210, 229], "softwar": [210, 229], "AS": [210, 229], "without": [210, 213, 214, 216, 220, 229], "warranti": [210, 229], "OR": [210, 229], "OF": [210, 229], "kind": [210, 229], "express": [210, 229], "impli": [210, 229], "languag": [210, 229], "govern": [210, 229], "permiss": [210, 229], "quantum_info": 210, "qi": 210, "c0": 210, "_": [210, 213, 220, 222], "24": [210, 215, 218, 219, 222, 223], "half": 210, "x2": 210, "to_gat": 210, "y2": 210, "x2m": 210, "y2m": 210, "inplac": 210, "2pi": 210, "11": [210, 211, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 228, 230], "15": [210, 213, 215, 216, 217, 218, 219, 221, 223, 224], "16": [210, 215, 218, 219, 220, 221, 222, 223, 224, 226], "19": [210, 216, 217, 218, 219, 220, 221, 222, 223, 224], "21": [210, 218, 219, 220, 221, 223], "22": [210, 218, 219, 221, 222, 223, 224], "23": [210, 215, 218, 219, 220, 223, 224, 226], "clifford_sqg": 210, "s1": 210, "s1x2": 210, "s1y2": 210, "displaystyl": 210, "sum_": [210, 222], "prime": 210, "left": 210, "mathrm": [210, 213, 214, 220], "tr": [210, 222], "u_": 210, "dagger": [210, 213, 222], "u_k": 210, "right": [210, 229], "s2": 210, "satisfi": [210, 217, 222], "c_kei": 210, "aux": 210, "total_triangl": 210, "c1": 210, "adjoint": 210, "c2": 210, "c3": 210, "to_matrix": 210, "trace": [210, 222], "print": [210, 213, 216, 218, 219, 220, 221, 222, 224, 226, 229], "0f": 210, "diagon": [210, 213, 214], "nsum": 210, "sum": 210, "clifford_2qg": 210, "c2q_0": 210, "c2q": 210, "counter": 210, "to_label": 210, "sqg_class_": 210, "cnot": [210, 220], "sy2": 210, "cnot_class_": 210, "iswap": 210, "sy1": 210, "sx2": 210, "i_swap_class_": 210, "swap_class_": 210, "clifford_1qg": 210, "open": 210, "clifford_1q": 210, "pkl": 210, "wb": 210, "clifford_2q": 210, "loaded_dict": 210, "def": [210, 211], "count_rcz": 210, "c_list": 210, "no_cz": 210, "no_r": 210, "count_op": 210, "num_2qcz": 210, "num_2qr": 210, "num_1qcz": 210, "num_1qr": 210, "875": [210, 213, 223, 226], "200": [210, 218, 221], "randint": [210, 213, 214, 219, 225], "11520": 210, "mpl": [210, 218, 221], "style": [210, 221], "iqp": [210, 221], "fold": [210, 218, 221], "ninvers": 210, "qc_aux": 210, "qcinv": 210, "op_seq": 210, "ncomposit": 210, "modulo": 210, "phase": 210, "equiv": 210, "latex": 210, "composit": 210, "bmatrix": 210, "520": [210, 219], "132": [210, 219, 223], "710": [210, 219], "suffic": 210, "triangular": 210, "part": [210, 229], "howev": [210, 229, 230], "still": [210, 222], "op": 210, "adj": 210, "prod": 210, "100000": 210, "ndone": 210, "defit": 211, "excit": 211, "add_counts_to_dataset": 211, "pyplot": [211, 213, 214, 222], "plt": [211, 213, 214, 218, 222], "generate_readout_test_circuit": 211, "n_qubit": [211, 218], "qb_to_measur": 211, "qc_transpil": 211, "plot_histogram": [211, 213], "try": 211, "state_": 211, "counts_": 211, "break": 211, "xtick": 211, "90": [211, 218, 221], "legend": 211, "readout_analysi": 211, "histogram": [211, 213], "readouttest": 211, "default_opt": 211, "n_shot": 211, "2048": 211, "staticmethod": 211, "readout_test": 211, "iqmprovid": [211, 213, 214, 217, 218, 219, 221, 230], "iqm_server_url": [211, 217], "fi": [211, 230], "coco": [211, 217, 218, 221, 230], "get_backend": [211, 213, 214, 217, 218, 219, 221, 230], "480b": 211, "state_0": 211, "state_1": 211, "u4": 211, "144b": 211, "0000": 211, "0010": 211, "1010": 211, "1100": 211, "176b": 211, "0011": 211, "0101": 211, "0110": 211, "1101": 211, "1110": 211, "1111": 211, "counts_0": 211, "int64": 211, "72b": 211, "1924": 211, "26": [211, 218, 219, 221, 222, 223], "39": [211, 218, 219, 221, 222, 223], "counts_1": 211, "88b": 211, "72": [211, 221], "48": [211, 218, 219, 222, 223], "78": [211, 218, 221], "36": [211, 218, 219, 221, 222], "1801": 211, "sure": [213, 230], "pip": [213, 230], "ipykernel": 213, "o": [213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 230], "environ": [213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 230], "iqm_tokens_fil": [213, 214], "token": [213, 214, 217, 220, 221, 223, 230], "iqm_url": [213, 214, 218, 219, 221], "access": [213, 214, 230], "everyth": [213, 214], "nx": [213, 214], "add_edges_from": [213, 214], "po": [213, 214], "spring_layout": [213, 214], "42": [213, 214, 218, 219, 221, 222, 223], "with_label": [213, 214], "node_color": [213, 214], "lightblu": [213, 214], "edge_color": [213, 214], "grai": [213, 214], "node_s": [213, 214], "font_siz": [213, 214], "linewidth": [213, 214], "ignor": [213, 214], "critic": [213, 214], "filterwarn": [213, 214], "action": [213, 214], "superposit": [213, 214], "rangl": [213, 214], "frac": [213, 214, 222], "sqrt": [213, 214], "otim": [213, 214], "act": [213, 214, 229], "wit": [213, 214], "genuin": [213, 214, 220], "cannot": [213, 214, 229], "explain": [213, 214], "great": [213, 214], "rho_": [213, 214], "langl": [213, 214], "pure": [213, 214], "entri": [213, 214, 222], "written": [213, 214, 229], "corner": [213, 214], "simplifi": [213, 214], "four": [213, 214], "compon": [213, 214, 216], "formula": [213, 214], "nullifi": [213, 214], "To": [213, 214, 215, 218, 220, 222, 229, 230], "off": [213, 214], "want": [213, 214, 217, 230], "pleas": [213, 214], "generate_ghz_spanning_tre": 213, "get_edg": 213, "ghz_circuit": 213, "qc_transp": 213, "re": [213, 223], "10000": [213, 225], "get_count": 213, "benchmark_ghz": [213, 214, 219, 220], "run_ghz": [213, 214, 219, 220], "result_ghz": [213, 214], "introduc": [213, 214], "2019": [213, 214, 220, 230], "successfulli": [213, 214, 215, 218, 219, 223, 224, 226], "occcur": [213, 214], "greater": [213, 214], "ask": [213, 214], "confid": [213, 214], "higher": [213, 214], "97": [213, 214, 218], "85": [213, 214, 221, 230], "asymptot": [213, 214], "log_2": [213, 214], "v_q": [213, 214], "underset": [213, 214], "argmax": [213, 214], "d": [213, 214, 220, 229], "leq": [213, 214], "achiev": [213, 214, 221], "quantum_volum": [213, 214, 216, 219, 226, 230], "due": [213, 216], "topmost": 213, "500": [213, 214, 219, 224, 226, 230], "40_000": [213, 221], "minut": [213, 214, 222], "benchmark_qv": [213, 214, 219, 226], "run_qv": [213, 214], "result_qv": [213, 214], "That": [213, 214], "wack": [213, 214], "constitut": [213, 214, 229], "_time": [213, 214], "notic": [213, 214, 229], "plot_tim": [213, 214], "benchmark_clop": [213, 214, 216, 219], "run_clop": [213, 214, 216, 219], "result_clop": [213, 214, 216, 219], "idea": 213, "behind": 213, "crb": [213, 227, 228], "certain": [213, 214], "langle0": 213, "c_": 213, "inv": 213, "c_m": 213, "cdot": 213, "_2c_1": 213, "sim": 213, "c_1": 213, "c_2": 213, "ldot": 213, "c_1c_2": 213, "_m": 213, "leq1": 213, "isol": 213, "magesan": 213, "2012": [213, 230], "assumpt": 213, "markovian": 213, "stationari": 213, "theori": [213, 229], "fact": 213, "design": [213, 229, 230], "fulli": [213, 222], "our": 213, "overlin": 213, "intend": 213, "becaus": 213, "eventu": 213, "mention": 213, "barend": 213, "2014": 213, "approx": 213, "alwai": [213, 220], "slightli": 213, "care": 213, "compar": 213, "spec": 213, "randomized_benchmark": [213, 215, 218, 219, 223, 224, 230], "clifford_rb": [213, 215, 219], "benchmark_clifford_rb": [213, 215, 219], "run_clifford_rb": [213, 215, 219], "result_clifford_rb": [213, 215, 219], "previou": 213, "aim": [213, 220], "interest": 213, "sole": [213, 229], "made": [213, 229], "wish": 213, "interleaved_rb": [213, 219, 223, 230], "irb_cz": 213, "benchmark_irb_cz": 213, "run_irb_cz": 213, "result_irb_cz": 213, "martiel": [213, 214], "erd\u0151": [213, 214], "r\u00e9nyi": [213, 214], "geq": [213, 214, 222], "60": [213, 214, 221], "999999": [213, 214, 219, 225], "benchmark_qscor": [213, 214, 219, 225], "run_qscor": [213, 214, 219], "result_qscor": [213, 214, 219], "summar": 213, "obs_ghz": [213, 214], "round": [213, 214], "obs_qv": [213, 214], "obs_clop": [213, 214], "obs_crb": 213, "f_crb": 213, "obs_irb": 213, "f_irb": 213, "average_gate_fidelity_czg": 213, "obs_q": [213, 214], "argmin": [213, 214], "mean_approximation_ratio": [213, 214, 219], "3000": 213, "999": [213, 215, 219, 222], "98": [213, 218], "30": [213, 215, 217, 218, 219, 221, 223, 230], "num": [213, 218], "chosen_layout": 214, "60_000": [214, 219, 226, 230], "load_ext": [215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226], "autoreload": [215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226], "extens": 215, "reload": 215, "reload_ext": 215, "fakeadoni": [215, 216, 219, 221, 223, 224, 225, 226], "fakeapollo": [215, 216, 218, 219, 220, 221, 223, 224, 225, 226], "iqm_token": [215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 230], "example_crb": [215, 219], "56": [215, 218, 219, 221, 222], "750": [215, 218, 219, 221], "logging_config": [215, 217, 218, 219, 220, 221, 222, 223, 224, 226], "info": [215, 217, 218, 219, 220, 221, 222, 223, 224, 226], "Will": [215, 218, 219, 222, 223, 224, 226, 230], "31": [215, 218, 219, 221, 223, 224], "63": [215, 218, 219, 221, 223], "831": [215, 219, 223], "992": [215, 219], "341": [215, 219], "040": [215, 219, 223], "469": [215, 219], "291": [215, 219], "292": [215, 219, 223], "349": 215, "541": [215, 219, 224], "600": [215, 219], "756": [215, 219, 221], "837": [215, 219, 223, 226], "025": 215, "171": [215, 217, 219], "905": [215, 219], "544": [215, 219], "899": [215, 218, 219], "32": [215, 218, 219, 221, 224], "624": [215, 219], "004": [215, 223], "43": [215, 218, 219, 222, 223], "319": [215, 219], "569": [215, 218, 219, 224], "777": [215, 219], "840": [215, 219], "44": [215, 218, 219, 222, 223, 228], "048": [215, 218, 219, 223], "098": [215, 219], "qubits_": [215, 218, 219, 224], "_depth_1": [215, 218, 219, 223], "323": [215, 219], "45": [215, 218, 219, 221, 223, 224], "186": [215, 223], "_depth_3": [215, 218, 219, 223], "225": [215, 219], "_depth_7": [215, 219, 223], "267": [215, 218, 219], "_depth_15": [215, 219, 223], "314": [215, 219], "_depth_31": [215, 219, 223], "315": [215, 219], "364": [215, 219, 224], "_depth_63": [215, 219, 223], "416": [215, 219], "417": [215, 219], "476": [215, 218], "542": [215, 218, 219, 224], "615": [215, 218, 219], "616": 215, "697": [215, 219], "789": [215, 219, 223], "890": [215, 219, 223], "conclud": [215, 218, 219, 221, 223, 224, 226], "931": [215, 219], "938": [215, 219], "945": [215, 218, 219, 224], "952": [215, 219, 223], "959": [215, 219], "966": [215, 219], "972": [215, 219], "979": [215, 218], "986": [215, 218, 219], "993": [215, 224], "46": [215, 218, 219, 221, 222], "006": 215, "013": [215, 219], "946844466999168": 215, "9429197366921651": 215, "attr": [215, 216, 218, 221, 222, 224, 226], "session_timestamp": [215, 218, 221, 224, 226], "20241217": 215, "115553": 215, "backend_configuration_nam": [215, 218, 221, 224, 226], "iqmfakeapollobackend": [215, 219, 220, 222, 226], "depth_1": 215, "time_circuit_gener": [215, 221, 224, 226], "541001081466675": 215, "time_submit": [215, 224, 226], "0006990432739257812": 215, "time_retriev": [215, 224, 226], "22491073608398438": 215, "all_job_metadata": [215, 224, 226], "batch_job_1": [215, 224], "job_id": [215, 224], "8f305755": 215, "e038": 215, "4596": 215, "8617": 215, "d96ba3f42ca9": 215, "aer_simul": [215, 224], "statu": [215, 224], "circuits_in_batch": [215, 224], "depth_3": 215, "05647683143615723": 215, "0005230903625488281": 215, "2fe0b406": 215, "8977": 215, "4567": 215, "bba0": 215, "d4168f0883ed": 215, "depth_7": 215, "19257187843322754": 215, "0004839897155761719": 215, "8299918c": 215, "be26": 215, "40d5": 215, "8778": 215, "9ea4468a1df2": 215, "depth_15": 215, "05831408500671387": 215, "0004811286926269531": 215, "174640c4": 215, "9ff3": 215, "4ca3": 215, "9ffc": 215, "d6aa5be304f3": 215, "depth_31": 215, "1564040184020996": 215, "0006189346313476562": 215, "7bb739f2": 215, "31bc": 215, "40af": 215, "8dbf": 215, "1d60a9310391": 215, "depth_63": 215, "08135986328125": 215, "0004200935363769531": 215, "f414a2c1": 215, "75c8": 215, "4d5a": 215, "9e4b": 215, "ccce29903f5f": 215, "147684812545776": 215, "0005502700805664062": 215, "00039887428283691406": 215, "8832576a": 215, "6d6e": 215, "4abe": 215, "8cfa": 215, "5001e6bb98e": 215, "08015298843383789": 215, "00039315223693847656": 215, "ecc1bcea": 215, "ef4c": 215, "4f35": 215, "9284": 215, "ab49af0c5b9f": 215, "16936397552490234": 215, "0003960132598876953": 215, "5582c842": 215, "0f07": 215, "46b6": 215, "96be": 215, "2fb3925b19d9": 215, "20774221420288086": 215, "0004191398620605469": 215, "6423b02b": 215, "8417": 215, "4300": 215, "b7ac": 215, "84d59f87a51f": 215, "0635080337524414": 215, "0004169940948486328": 215, "0b324804": 215, "44fe": 215, "4c16": 215, "83eb": 215, "08e5cd67aa79": 215, "20784401893615723": 215, "0004961490631103516": 215, "6c633640": 215, "d4b4": 215, "47de": 215, "a46d": 215, "d3ae4c84d212": 215, "avg_gate_fidel": [215, 224], "0012220693932290373": 215, "001545469960991071": 215, "xxxxxxxxxxxxxxx": 216, "example_clop": [216, 219], "operation_count": [216, 226], "breakdown": 216, "unit": 216, "remot": 216, "aspect": 216, "wall": 216, "experienc": 216, "encompass": 216, "compris": 216, "latenc": 216, "vari": 216, "significantli": 216, "extern": 216, "circumst": 216, "aggreg": 216, "finish": 216, "receiv": [216, 229], "xxxxx": 217, "xxxxxxx": 217, "xxxxxxxx": 217, "replac": [217, 229], "siriu": 217, "meetiqm": [217, 218, 220, 221], "opt": 217, "anaconda3": [217, 218, 221], "env": [217, 218, 221], "lib": [217, 218, 221], "python3": 217, "site": [217, 218, 221], "142": [217, 219], "userwarn": [217, 218, 221], "27": [217, 218, 219, 220, 221, 222, 223], "built": 217, "server": 217, "might": [217, 220], "encount": 217, "issu": [217, 229], "best": [217, 220], "29": [217, 218, 219, 221, 223, 226], "version_incompatibility_msg": 217, "linspac": 217, "100e": 217, "iqm_provid": [217, 218, 219, 221], "unknown": [217, 218, 221], "unknown_opt": [217, 218, 221], "2025": [217, 218, 219, 220, 221, 222, 223, 224, 226, 228], "07": [217, 218, 219, 220, 221, 222, 223, 224], "202": [217, 219, 221], "7679157313590913e": 217, "05": [217, 218, 219, 222, 223, 224], "332763060487301e": 217, "2792580706714276e": 217, "1769872662543327e": 217, "06": [217, 218, 219, 221, 222, 224], "1690066792698488e": 217, "835859627497227e": 217, "9581411901572643e": 217, "5349341834275828e": 217, "7667960136510046e": 217, "650295798103166e": 217, "6166287001435286e": 217, "030620409848378e": 217, "902668232550718e": 217, "5752540482660701e": 217, "4079502861210074e": 217, "147131957835361e": 217, "4348794798121514e": 217, "839674906118737e": 217, "2879434275022574e": 217, "1510692110946111e": 217, "093928084952773e": 217, "5406298673381294e": 217, "8343162723982355e": 217, "4633111527445746e": 217, "4235245531448773e": 217, "914289199220578e": 217, "136033724339335e": 217, "110324524018475e": 217, "354338443470585e": 217, "7889199123019837e": 217, "9013724266285726e": 217, "6803076530869265e": 217, "xxxxxxxxxxxxxxxxxxxxxx": 218, "proxi": 218, "manual": 218, "necessarili": [218, 229], "simpli": 218, "resonance_st": 218, "v1": [218, 220], "example_eplg": 218, "geomspac": 218, "endpoint": 218, "dtype": 218, "tolist": 218, "benchmark_eplg": 218, "run_eplg": 218, "04": [218, 219, 221, 222, 223, 224], "358": [218, 219], "28": [218, 219, 221, 223, 226], "742": [218, 219], "745": [218, 219, 223], "111": [218, 219, 226], "61": [218, 221, 222], "748": [218, 221], "pedrofigueroaromero": [218, 221], "bench": [218, 221], "177": [218, 219, 221, 224], "571": [218, 219], "227": [218, 219], "523": [218, 219, 224], "539": [218, 219], "40": [218, 219, 221], "580": [218, 219], "333": [218, 219, 223], "52": [218, 219, 221, 222, 223, 224], "692": [218, 219, 223], "57": [218, 219, 221, 223], "059": [218, 219], "816": [218, 219, 221], "03": [218, 219, 221, 223, 224], "812": [218, 219], "057": [218, 219], "672": [218, 219], "08": [218, 219, 221, 222, 223, 224, 228], "826": [218, 219], "097": [218, 219, 224], "112": 218, "454": [218, 219], "888": [218, 219], "556": 218, "537": [218, 221], "547": [218, 219], "054": [218, 219], "805": [218, 219], "51": [218, 219, 221, 222, 223], "921": [218, 219], "066": [218, 219], "649": [218, 219], "33": [218, 219, 221, 224], "101": [218, 219], "37": [218, 219, 221], "712": [218, 219], "41": [218, 219, 223, 224], "280": [218, 219], "252": [218, 219, 226], "704": [218, 219, 221, 223], "536": 218, "49": [218, 219, 221, 222, 223], "689": [218, 219], "204": [218, 219, 223, 226], "53": [218, 219, 221, 223], "802": [218, 219], "54": [218, 219, 221, 223], "303": [218, 219, 221], "55": [218, 219, 221, 222, 224], "205": [218, 219, 221, 223], "813": [218, 219], "511": 218, "224": [218, 219], "136": [218, 219], "164": [218, 219], "236": 218, "920": [218, 219], "59": [218, 219, 220, 221, 223, 224], "124": 218, "126": [218, 219], "02": [218, 219, 220, 221, 222, 224], "019": [218, 219], "833": [218, 219], "724": [218, 219], "631": [218, 219, 223], "09": [218, 219, 220, 221, 223, 226], "861": [218, 219, 223], "955": [218, 219], "658": [218, 219], "819": [218, 219, 221, 223, 224], "161": [218, 219], "033": [218, 219, 223, 226], "050": [218, 219, 224, 226], "357": [218, 219, 224], "785": [218, 219, 223], "147": [218, 219, 222, 224], "289": [218, 219, 223], "253": [218, 219], "567": [218, 219], "914": [218, 219], "694": [218, 219], "282": [218, 219, 223], "408": [218, 222], "38": [218, 219, 221, 223], "721": [218, 219, 221], "738": [218, 219], "298": [218, 219], "395": [218, 219, 221, 223], "913": [218, 219], "828": [218, 219, 223], "830": [218, 219], "129": [218, 219, 230], "852": [218, 219, 221], "_depth_200": 218, "307": [218, 224], "_depth_111": 218, "58": [218, 219, 220, 221, 223], "471": [218, 219], "900": [218, 219], "_depth_61": 218, "525": [218, 219, 221], "067": [218, 219, 223], "_depth_34": 218, "832": [218, 219], "255": [218, 219, 223], "_depth_18": 218, "851": 218, "246": [218, 219], "_depth_10": 218, "460": [218, 219], "843": [218, 219], "_depth_5": 218, "279": [218, 219], "154": [218, 219], "641": [218, 219], "455": [218, 219], "950": [218, 220, 223], "568": [218, 219], "163": [218, 219, 223], "798": [218, 219, 221], "382": [218, 219], "636": [218, 219, 223], "322": [218, 219], "35": [218, 219, 221], "273": [218, 219], "036": [218, 219], "769": [218, 219], "681": [218, 219, 223], "751": [218, 219, 223], "774": 218, "788": [218, 219, 223], "632": [218, 219], "546": [218, 220, 223, 224], "487": [218, 219, 221], "094": [218, 219, 223], "528": [218, 219], "594": [218, 219], "437": [218, 219], "01": [218, 219, 220, 221, 222, 223, 224, 226], "817": [218, 219], "873": [218, 219], "598": [218, 219, 224], "917": [218, 219], "901": [218, 219], "363": [218, 219], "895": [218, 219], "806": [218, 222, 226], "329": [218, 219], "585": [218, 219, 221], "412": [218, 219, 221], "593": [218, 219, 223], "499": [218, 219, 221], "904": [218, 219], "814": 218, "401": [218, 219], "178": [218, 219], "863": [218, 219], "516": [218, 219, 221], "708": [218, 219, 221], "321": [218, 219], "656": [218, 219], "47": [218, 219, 222, 223], "576": [218, 219, 220], "rcparam": [218, 221], "dpi": [218, 221], "175": [218, 219], "result_eplg": 218, "030": 218, "082": [218, 219, 226], "302": [218, 219], "893": [218, 219], "014": [218, 219], "108": [218, 219], "176": [218, 219, 224], "497": [218, 219], "683": [218, 219, 221], "935": 218, "173": [218, 219, 223], "290": [218, 219, 223, 226], "367": [218, 219], "442": [218, 219, 223], "827": [218, 219], "069": 218, "194": 218, "308": [218, 219], "405": [218, 219, 221], "526": [218, 219], "575": [218, 219], "820": [218, 219, 223], "857": [218, 219], "946": [218, 219], "031": [218, 219], "116": [218, 219, 224], "185": [218, 219], "241": [218, 219], "334": [218, 219, 221], "375": [218, 219, 224], "dict_kei": [218, 221, 222], "parallel_all_0": 218, "parallel_all_1": 218, "parallel_all_2": 218, "parallel_all_3": 218, "2f": [218, 221], "2e": [218, 221], "average_gate_fidel": 218, "77": [218, 221], "96": 218, "95": [218, 221], "71": [218, 221], "81": [218, 221], "87": [218, 221], "75": [218, 221, 226], "70": [218, 221], "62": 218, "68": [218, 221], "80": [218, 221], "layer_fidel": 218, "88": 218, "eplg_circ_nam": 218, "circ_group_idx": 218, "circuit_to_draw": 218, "idle_wir": 218, "877": [219, 223], "127": [219, 223], "091": 219, "517": 219, "508": [219, 221], "507": [219, 221], "168": [219, 223], "188": [219, 223], "754": 219, "807": 219, "932": [219, 223], "052": 219, "447": 219, "448": [219, 224], "707": 219, "967": 219, "284": 219, "578": 219, "_depth_127": [219, 223], "324": [219, 221, 223], "557": [219, 224], "590": [219, 221], "602": [219, 220], "611": 219, "626": [219, 221, 224], "example_irb_1q": [219, 223], "rgate": [219, 222, 223], "benchmark_irb_1q": [219, 223], "run_irb_1q": [219, 223], "021": [219, 226], "599": 219, "wxecut": 219, "047": 219, "588": 219, "423": 219, "348": [219, 223], "427": 219, "491": [219, 223], "445": 219, "219": 219, "479": 219, "482": [219, 221], "550": 219, "589": [219, 224], "623": [219, 223], "558": [219, 221], "218": 219, "328": 219, "810": [219, 220], "871": 219, "340": 219, "411": 219, "453": [219, 226], "876": [219, 223], "249": 219, "909": 219, "430": [219, 222], "233": 219, "519": 219, "530": [219, 223], "790": [219, 223, 224], "187": 219, "635": [219, 223], "783": [219, 226], "793": 219, "829": [219, 223], "933": [219, 223], "049": [219, 223], "778": 219, "008": [219, 223], "095": [219, 223], "260": 219, "881": [219, 223], "028": 219, "153": 219, "883": [219, 223, 224], "330": [219, 221, 224], "579": 219, "620": 219, "133": [219, 223, 224], "210": [219, 226], "709": 219, "310": 219, "549": 219, "326": [219, 221], "529": [219, 224], "679": [219, 223, 224], "515": 219, "169": 219, "083": 219, "779": [219, 223], "009": 219, "732": 219, "560": 219, "943": 219, "071": 219, "182": 219, "976": 219, "553": [219, 223], "781": [219, 223, 226], "703": [219, 223], "554": 219, "639": [219, 220], "823": [219, 221], "179": 219, "859": 219, "114": 219, "338": [219, 222, 223], "425": 219, "480": 219, "821": [219, 221, 223], "070": 219, "475": [219, 223], "000": [219, 223], "120": [219, 223], "250": [219, 222], "775": 219, "259": [219, 220, 222], "352": 219, "648": 219, "044": 219, "874": [219, 223], "991": [219, 223], "229": 219, "690": 219, "149": [219, 224], "011": [219, 221, 222], "770": 219, "782": 219, "565": 219, "739": [219, 223], "199": [219, 221], "346": [219, 223], "024": 219, "850": 219, "clifford_qubits_": [219, 223], "299": 219, "570": 219, "088": [219, 226], "377": 219, "379": 219, "698": 219, "700": 219, "150": [219, 221, 224], "_depth_255": [219, 223], "388": 219, "389": 219, "659": [219, 221], "110": 219, "118": [219, 223], "369": 219, "371": 219, "058": [219, 223], "650": [219, 223], "490": [219, 223], "834": 219, "682": [219, 223], "450": [219, 224], "240": 219, "189": 219, "231": 219, "660": 219, "018": 219, "939": [219, 223], "755": [219, 221], "759": 219, "484": 219, "970": [219, 224], "760": 219, "interleaved_qubits_": [219, 223], "109": [219, 230], "720": 219, "726": 219, "498": 219, "504": 219, "937": 219, "320": 219, "270": 219, "702": [219, 224], "181": [219, 224], "687": 219, "761": [219, 221], "148": [219, 222, 223], "010": 219, "468": 219, "919": 219, "562": [219, 221], "370": 219, "884": [219, 220, 224], "172": 219, "075": [219, 222], "609": [219, 224], "053": 219, "983": [219, 224], "076": 219, "342": [219, 224], "849": [219, 224], "297": 219, "result_irb_1q": [219, 223], "894": 219, "452": 219, "677": 219, "772": 219, "996": [219, 224], "203": 219, "538": [219, 223], "762": 219, "969": 219, "080": 219, "208": [219, 221, 223], "627": 219, "734": [219, 223], "942": 219, "165": 219, "272": [219, 220, 224], "675": [219, 223], "882": [219, 223], "977": 219, "106": 219, "201": [219, 224], "431": 219, "666": 219, "776": 219, "887": [219, 224], "985": [219, 220], "206": [219, 223], "318": [219, 220], "545": [219, 224], "653": [219, 224], "766": [219, 224], "989": [219, 222, 223], "221": 219, "335": 219, "691": [219, 223], "809": 219, "936": 219, "286": [219, 223], "398": [219, 221], "780": [219, 223, 224, 226], "892": [219, 224], "612": 219, "avg_gate_fidelity_interleav": [219, 223], "9979183032433894": 219, "144505494191281e": 219, "avg_gate_fidelity_clifford": [219, 223], "9958115103388792": 219, "17823609003449e": 219, "avg_gate_fidelity_n": 219, "9977661388474022": 219, "361722520237145e": 219, "997958281196824": 219, "00010535448906517988": 219, "996185705320257": 219, "354178172452585e": 219, "9979657095041371": 219, "9888883256457185e": 219, "9976806659229207": 219, "00010662386983132284": 219, "9958525686447902": 219, "031666798234228e": 219, "9977880366105548": 219, "816884091625878e": 219, "9977658880315101": 219, "00013395088590563366": 219, "996010014510697": 219, "00011462572813413851": 219, "9978720077390384": 219, "113374307582606e": 219, "9978184054322468": 219, "00011216064141600791": 219, "9957406711482065": 219, "837832701601442e": 219, "9977283579457101": 219, "246845828393341e": 219, "example_irb_2q": [219, 223], "benchmark_irb_2q": [219, 223], "run_irb_2q": [219, 223], "304": 219, "543": [219, 220], "034": [219, 222, 223], "729": 219, "930": [219, 221], "974": 219, "243": 219, "081": 219, "139": 219, "160": 219, "277": 219, "514": [219, 221], "728": 219, "665": 219, "824": [219, 221], "951": [219, 223], "131": [219, 223], "633": 219, "392": 219, "835": 219, "138": 219, "572": [219, 220, 221], "897": 219, "039": [219, 223], "407": 219, "439": [219, 220, 221], "555": 219, "003": [219, 222, 223], "668": 219, "752": [219, 223], "180": [219, 224], "608": 219, "743": 219, "564": 219, "730": 219, "403": 219, "337": 219, "134": [219, 224], "676": [219, 224], "093": 219, "800": [219, 222, 230], "926": 219, "394": [219, 223], "860": [219, 223], "269": 219, "368": 219, "846": 219, "995": [219, 222], "477": [219, 221], "016": 219, "078": [219, 220], "158": [219, 223], "614": 219, "866": 219, "035": 219, "213": 219, "419": 219, "815": 219, "838": 219, "478": 219, "574": 219, "144": 219, "744": [219, 223], "803": [219, 222], "261": 219, "796": 219, "713": 219, "844": 219, "073": 219, "271": [219, 224], "736": 219, "196": [219, 223, 226], "198": 219, "652": [219, 223, 224], "384": 219, "032": [219, 226], "912": 219, "896": 219, "007": [219, 223], "152": [219, 224], "306": 219, "060": 219, "062": 219, "610": 219, "084": 219, "456": [219, 224], "026": 219, "117": [219, 224], "141": 219, "501": [219, 221], "278": 219, "714": [219, 221], "079": [219, 224], "617": 219, "190": 219, "678": [219, 224], "432": [219, 223], "285": [219, 223], "228": 219, "result_irb_2q": [219, 223], "481": 219, "655": 219, "971": 219, "130": 219, "209": 219, "288": 219, "510": 219, "629": 219, "685": [219, 223], "764": [219, 223], "907": 219, "987": [219, 221], "353": 219, "512": [219, 221, 224], "591": 219, "686": 219, "797": 219, "927": 219, "162": 219, "606": [219, 224], "928": 219, "492": [219, 220, 221, 223], "example_irb_iswap": [219, 223], "iswapg": [219, 223, 224, 230], "benchmark_irb_iswap": [219, 223], "run_irb_iswap": [219, 223], "166": [219, 220, 223], "156": 219, "077": 219, "923": 219, "735": 219, "068": 219, "918": 219, "325": 219, "234": 219, "531": 219, "688": [219, 223, 226], "811": 219, "226": 219, "074": [219, 223], "263": [219, 220], "669": 219, "673": 219, "002": [219, 222, 223], "327": 219, "577": [219, 223], "015": 219, "099": 219, "965": 219, "029": 219, "045": 219, "296": [219, 224], "607": [219, 223], "911": 219, "313": 219, "664": [219, 223], "113": 219, "988": 219, "532": [219, 220], "451": 219, "262": 219, "982": [219, 223, 224], "595": [219, 223], "336": 219, "result_irb_iswap": [219, 223], "953": 219, "140": 219, "191": 219, "223": [219, 223], "287": [219, 223], "355": [219, 223], "462": [219, 222], "621": 219, "667": 219, "701": 219, "747": [219, 221], "795": 219, "041": 219, "mirror_rb": [219, 224, 230], "example_mrb": [219, 224, 230], "benchmark_mrb": [219, 224], "run_mrb": [219, 224], "10x5": [219, 224], "64": [219, 221, 222, 224], "128": [219, 224], "622": 219, "865": 219, "305": 219, "671": [219, 223], "055": 219, "485": [219, 223], "391": [219, 222], "584": [219, 221], "230": 219, "449": [219, 224], "242": 219, "472": 219, "509": [219, 220, 221, 223], "022": [219, 223], "436": [219, 223], "628": 219, "980": 219, "418": 219, "603": 219, "808": 219, "051": 219, "293": 219, "157": [219, 223], "268": 219, "858": 219, "527": [219, 221], "486": 219, "898": 219, "107": [219, 223], "540": 219, "244": [219, 224], "661": 219, "885": [219, 220, 223], "765": [219, 223], "193": 219, "465": [219, 220], "910": 219, "643": 219, "104": [219, 220, 221], "438": [219, 220], "613": 219, "470": 219, "581": 219, "693": 219, "266": 219, "488": 219, "662": 219, "870": 219, "506": 219, "207": [219, 223], "638": 219, "245": 219, "872": 219, "046": 219, "963": 219, "426": 219, "975": 219, "878": 219, "275": 219, "251": 219, "440": [219, 223], "964": [219, 221, 223], "922": 219, "309": 219, "981": [219, 223], "583": [219, 223], "413": [219, 224], "998": [219, 222], "906": [219, 223], "444": [219, 220], "891": 219, "217": [219, 226], "409": 219, "457": 219, "311": 219, "446": 219, "695": 219, "924": 219, "941": 219, "625": [219, 221, 226], "727": 219, "184": [219, 224], "012": [219, 221], "090": [219, 223], "372": 219, "642": [219, 220], "489": 219, "696": 219, "949": 219, "238": 219, "839": 219, "596": [219, 223, 224], "684": 219, "753": [219, 221], "535": 219, "415": 219, "354": 219, "345": 219, "604": 219, "968": [219, 223], "502": 219, "768": 219, "380": [219, 223], "220": 219, "283": [219, 226], "773": [219, 223], "867": [219, 224], "123": 219, "381": [219, 223], "767": [219, 224], "072": 219, "551": 219, "741": 219, "958": 219, "845": [219, 221, 223], "222": 219, "239": 219, "065": [219, 223], "903": 219, "869": 219, "552": 219, "757": [219, 226], "915": [219, 223], "043": 219, "125": [219, 221, 224], "429": 219, "984": 219, "618": 219, "344": 219, "663": 219, "216": [219, 223], "717": [219, 223], "258": 219, "421": 219, "647": 219, "420": 219, "410": 219, "390": 219, "566": [219, 221, 223], "718": 219, "645": 219, "587": [219, 221], "281": 219, "397": 219, "017": [219, 221], "592": [219, 221], "192": 219, "122": 219, "362": 219, "862": 219, "784": [219, 223], "483": 219, "350": [219, 221], "339": [219, 223], "257": [219, 221], "383": [219, 223], "619": 219, "822": 219, "886": 219, "063": 219, "404": 219, "836": [219, 223], "573": 219, "424": [219, 221], "855": 219, "085": 219, "644": [219, 222], "902": 219, "461": [219, 221], "563": 219, "522": [219, 223, 224], "723": 219, "957": 219, "791": [219, 224], "908": 219, "195": [219, 221], "170": 219, "505": [219, 221], "294": [219, 223], "458": 219, "317": 219, "089": 219, "360": 219, "559": [219, 221], "399": 219, "159": [219, 221], "247": 219, "103": [219, 223], "119": [219, 224], "994": [219, 222], "496": [219, 221, 223], "001": [219, 222], "848": 219, "435": 219, "725": 219, "197": [219, 221, 223], "023": 219, "818": [219, 223], "151": [219, 221], "473": [219, 221], "854": 219, "680": 219, "841": 219, "374": 219, "533": 219, "605": [219, 224], "086": 219, "211": 219, "758": [219, 221, 222, 223, 224], "792": 219, "719": [219, 221], "548": 219, "235": 219, "997": 219, "534": 219, "916": [219, 223], "137": 219, "654": 219, "_depth_2": [219, 224], "_depth_4": [219, 224], "763": 219, "_depth_8": [219, 224], "_depth_16": [219, 224], "_depth_32": [219, 224], "_depth_64": [219, 224], "_depth_128": [219, 224], "_depth_256": [219, 224], "_depth_512": [219, 224], "295": 219, "674": 219, "result_mrb": [219, 224], "061": 219, "597": [219, 224], "145": 219, "1600x1200": 219, "ax": 219, "all_qubit_layout": [219, 224], "key_mrb_plot": [219, 224], "example_qv": [219, 226, 230], "run0_qv": [219, 226], "637": 219, "subbatch": [219, 226], "264": [219, 224], "387": [219, 223, 224], "result0_qv": [219, 226], "722": 219, "run1_qv": [219, 226], "result1_qv": [219, 226], "466": 219, "422": [219, 224], "948": [219, 224], "733": 219, "630": 219, "493": 219, "There": 219, "6353": 219, "19060": 219, "minimal_ghz": [219, 220], "237": 219, "183": 219, "example_qscor": [219, 225], "10_000": 219, "880": 219, "4721": 219, "1866": 219, "301": [219, 224], "5760": 219, "3202": 219, "5666": 219, "6277": 219, "5362": 219, "1528": 219, "4720649335834727": 219, "264883828589849": 219, "is_succes": [219, 226], "qscore_result": 219, "5759620786516855": 219, "13942395641806907": 219, "5666397249858852": 219, "09938021346738757": 219, "536231071484655": 219, "13823427614487907": 219, "multipartit": 220, "One": [220, 226], "larger": [220, 222], "leibfri": 220, "et": 220, "al": 220, "six": 220, "atom": 220, "schr\u00f6dinger": 220, "cat": 220, "natur": 220, "2005": 220, "offer": [220, 229], "verif": [220, 228, 230], "superconduct": 220, "phy": [220, 230], "commun": [220, 229], "095004": 220, "elben": 220, "statist": 220, "toolbox": 220, "probe": 220, "bodi": 220, "rev": [220, 230], "99": 220, "052323": 220, "ciruit": 220, "hadamrd": 220, "addit": [220, 222, 229, 230], "log_depth": 220, "cruz": 220, "yield": 220, "lower": [220, 222], "hous": 220, "reli": 220, "dai": 220, "thu": 220, "comparison": 220, "gme": 220, "prefer": [220, 229], "whenev": 220, "mitgat": 220, "arang": 220, "think": 220, "help": 220, "your_token": [220, 230], "mark": [220, 229], "w_": 220, "ij": [220, 222], "mathcal": 220, "until": 220, "nice": 220, "latter": 220, "utils_plot": 220, "plot_layout_fidelity_graph": 220, "711": [220, 221], "731": 220, "879": 220, "463": 220, "960": 220, "248": 220, "961": 220, "fidelitii": 220, "filter": 220, "descript": [220, 229], "l0": 220, "l1": 220, "xxxxxxxxxxxxxxxx": 221, "get_iqm_backend": 221, "300": [221, 222], "graph_stat": 221, "benchmark_graphst": 221, "run_graphst": 221, "749": 221, "396": [221, 223], "402": 221, "332": 221, "020": 221, "155": 221, "705": 221, "result_graphst": 221, "042": 221, "fetch": 221, "ok": 221, "font_manag": 221, "findfont": 221, "famili": 221, "stixgener": 221, "fall": 221, "back": 221, "dejavu": 221, "san": 221, "stixnonunicod": 221, "494": 221, "stixsizeonesym": 221, "stixsizetwosym": 221, "stixsizethreesym": 221, "stixsizefoursym": 221, "stixsizefivesym": 221, "cmsy10": 221, "cmr10": 221, "cmtt10": 221, "518": 221, "cmmi10": 221, "521": 221, "cmb10": 221, "524": 221, "cmss10": 221, "cmex10": 221, "mono": 221, "351": 221, "percentag": 221, "idx": 221, "max_neg": 221, "84": 221, "86": 221, "74": 221, "79": 221, "73": 221, "66": 221, "65": 221, "83": 221, "69": 221, "94": 221, "76": 221, "82": [221, 222], "91": 221, "max_negativities_iqm_backend_20250325": 221, "160833": 221, "max_negativities_graph_20250325": 221, "lowest": 221, "resconstruct": 221, "observation_dict": 221, "ob": 221, "argsort": 221, "lowest_negativity_pair": 221, "highest_negativity_pair": 221, "all_projected_qubit": 221, "all_pair_group": 221, "all_neighbor_group": 221, "all_tomography_st": 221, "all_neg": 221, "bootstrapped_averag": 221, "adjust": 221, "06e": 221, "3206842864916416": 221, "31010765308352356": 221, "93e": 221, "3542183495445777": 221, "3539253716950112": 221, "53e": 221, "3888948376922817": 221, "38736774049571426": 221, "40e": 221, "43361445043616353": 221, "4196633945881397": 221, "41e": 221, "43662497937638245": 221, "42249850678510703": 221, "90e": 221, "37169789059353975": 221, "36979367489991855": 221, "54e": 221, "38686144121566973": 221, "379324805728086": 221, "79e": 221, "39594160382229693": 221, "3931510385413373": 221, "97e": 221, "4092514317610637": 221, "4086540198375821": 221, "50e": 221, "36885658775672914": 221, "35382192582939426": 221, "08e": 221, "33451241682265326": 221, "32543228989306544": 221, "36671508133810615": 221, "36709383454659233": 221, "77e": 221, "32608570801001885": 221, "3213134253456277": 221, "29e": 221, "3566393931240753": 221, "3543493221398908": 221, "81e": 221, "3767486702923495": 221, "35860149933340935": 221, "3341624640356816": 221, "33262962066733953": 221, "00e": 221, "3486521211655147": 221, "3186675847362068": 221, "71e": 221, "39469814069723197": 221, "39099102345993036": 221, "13e": 221, "32804598413012276": 221, "3219124989220279": 221, "24e": 221, "3668085274286376": 221, "36257096650435117": 221, "62e": 221, "3732632016003694": 221, "35702785889177086": 221, "91e": 221, "3465755742920084": 221, "3416698385772142": 221, "17e": 221, "32654059296341725": 221, "30487999669484334": 221, "35e": 221, "39553971118808906": 221, "38203311102738585": 221, "3803202427020316": 221, "37715389665511634": 221, "76e": 221, "37343498488547655": 221, "35586222167388737": 221, "60e": 221, "41534546787652044": 221, "3993565114966017": 221, "45e": 221, "4134082416427767": 221, "398899780892523": 221, "55e": 221, "3810499300589416": 221, "3755024431288029": 221, "34e": 221, "37452627891460544": 221, "3671820250131137": 221, "q_0": 221, "\u03c0": [221, 222], "q_1": 221, "q_2": 221, "q_3": 221, "q_4": 221, "q_5": 221, "q_6": 221, "q_7": 221, "q_8": 221, "q_9": 221, "q_10": 221, "q_11": 221, "q_12": 221, "q_13": 221, "q_14": 221, "q_15": 221, "q_16": 221, "q_17": 221, "q_18": 221, "q_19": 221, "tomo_qubit": 221, "introduct": 222, "what": [222, 223], "background": 222, "journal": 222, "prxquantum": 222, "1103": 222, "010325": [222, 230], "compressive_gst": 222, "iqmfakeadoni": 222, "iqmfakeapollo": 222, "k_i": 222, "trigger": 222, "benefit": 222, "less": [222, 224], "captur": 222, "domin": 222, "trustworthi": 222, "veri": 222, "consum": 222, "minimal_1q_gst": 222, "minimal_2q_gst": 222, "Be": 222, "extra": 222, "434": 222, "20it": 222, "criterion": 222, "56e": 222, "deepcopi": 222, "benchmark_rk1": 222, "result_rk1": 222, "83it": 222, "99e": 222, "uncertaintit": 222, "restult": 222, "qb1": 222, "99693": 222, "nan": 222, "00703": 222, "unitar": 222, "98781": 222, "rx": 222, "99918": 222, "0013": 222, "99674": 222, "ry": 222, "99509": 222, "01332": 222, "98074": 222, "tvd": 222, "00698": 222, "03296": 222, "dist": 222, "00601": 222, "04366": 222, "results_layout_": 222, "raw_kraus_oper": 222, "raw_gat": 222, "raw_povm": 222, "raw_stat": 222, "gauge_opt_g": 222, "gauge_opt_gates_pauli_basi": 222, "gauge_opt_povm": 222, "gauge_opt_st": 222, "main_mgst_tim": 222, "gauge_optimization_tim": 222, "choi_ev": 222, "full_metr": 222, "raw": 222, "raw_result": 222, "array_str": 222, "precis": 222, "suppress_smal": 222, "002j": 222, "005": [222, 223], "003j": 222, "004j": 222, "These": 222, "diplai": 222, "disc": 222, "represent": 222, "sinlg": 222, "g_": 222, "p_i": 222, "p_j": 222, "layout_": 222, "_gate_metr": 222, "_choi_eigenvalu": 222, "_other_metr": 222, "_process_matrix_0": 222, "_process_matrix_1": 222, "_process_matrix_2": 222, "_spam_matrices_r": 222, "_spam_matrices_imag": 222, "_hamiltonian_paramet": 222, "altern": 222, "ourselv": 222, "xyi": 222, "instruct": 222, "gate_list": 222, "indentif": 222, "custom_1q_gst": 222, "verbos": 222, "42e": 222, "008j": 222, "001j": 222, "064": 223, "121": 223, "146": 223, "954": 223, "376": 223, "9975073376613797": 223, "9957157328789242": 223, "9976959612386156": 223, "9957310522299055": 223, "752861001879659e": 223, "028839025109517e": 223, "64196778583225e": 223, "243656712565855e": 223, "know": 223, "640": 223, "842": [223, 224], "740": 223, "9798030906041997": 223, "9431232937255942": 223, "9840858225184934": 223, "945382422883015": 223, "174": 223, "038": 223, "215": [223, 224], "706": 223, "441": 223, "9344679810705316": 223, "9463377694591251": 223, "9267928870925659": 223, "943379008472002": 223, "947": 224, "646": 224, "365": 224, "428": 224, "940": 224, "944": 224, "331": 224, "096": 224, "889": 224, "651": 224, "343": 224, "214": 224, "attr_kei": [224, 226], "depth_2": 224, "14302134513855": 224, "007565975189208984": 224, "06883907318115234": 224, "f8d9d789": 224, "0e9a": 224, "4086": 224, "ab36": 224, "685064a7b66": 224, "depth_4": 224, "0004930496215820312": 224, "0007040500640869141": 224, "87e367b7": 224, "c3ae": 224, "4457": 224, "8a2d": 224, "7b169c528033": 224, "depth_8": 224, "0004889965057373047": 224, "0005979537963867188": 224, "d84330c9": 224, "101f": 224, "40ff": 224, "bea8": 224, "f5e4c0b41527": 224, "depth_16": 224, "0004627704620361328": 224, "0006148815155029297": 224, "1f58b4a0": 224, "fb16": 224, "4d12": 224, "a9e8": 224, "c9263da52418": 224, "depth_32": 224, "00047278404235839844": 224, "0005419254302978516": 224, "4e43834b": 224, "5694": 224, "4c6d": 224, "8a83": 224, "796913d67e40": 224, "depth_64": 224, "000469207763671875": 224, "0005609989166259766": 224, "036e1dd": 224, "ca95": 224, "42a1": 224, "ab68": 224, "30a243f6b4ba": 224, "depth_128": 224, "0004668235778808594": 224, "0005328655242919922": 224, "13a59ca8": 224, "2ab0": 224, "4de8": 224, "a643": 224, "5b3f318f03d4": 224, "depth_256": 224, "0004749298095703125": 224, "e673defd": 224, "039c": 224, "4c37": 224, "9ef3": 224, "d4734436f39a": 224, "depth_512": 224, "0005099773406982422": 224, "0005548000335693359": 224, "d83ac439": 224, "2929": 224, "4d78": 224, "b52b": 224, "f297873c3e44": 224, "9710221314803044": 224, "001462493086363885": 224, "9473471466489307": 224, "00285118172031131": 224, "xxxxxxxxxxxxxx": 225, "put": 225, "run0_qscor": 225, "result0_qscor": 225, "rem_quasidistribut": 226, "time_transpil": 226, "time_batch": 226, "cumulative_average_heavy_output_prob": 226, "cumulative_stddev_heavy_output_prob": 226, "rem_cumulative_average_heavy_output_prob": 226, "rem_cumulative_stddev_heavy_output_prob": 226, "rem_heavy_output_prob": 226, "60546875": 226, "71875": 226, "578125": 226, "74609375": 226, "6328125": 226, "546875": 226, "56640625": 226, "76953125": 226, "75390625": 226, "67578125": 226, "6171875": 226, "55078125": 226, "64453125": 226, "6875": 226, "7109375": 226, "82421875": 226, "76171875": 226, "6484375": 226, "6015625": 226, "73828125": 226, "63671875": 226, "69140625": 226, "61328125": 226, "734375": 226, "57421875": 226, "6953125": 226, "55859375": 226, "69921875": 226, "609375": 226, "671875": 226, "77734375": 226, "6796875": 226, "62890625": 226, "6640625": 226, "66796875": 226, "62109375": 226, "703125": 226, "68359375": 226, "58984375": 226, "71484375": 226, "59375": 226, "79296875": 226, "66015625": 226, "65234375": 226, "59765625": 226, "65625": 226, "84765625": 226, "5859375": 226, "5625": 226, "72265625": 226, "640625": 226, "58203125": 226, "54296875": 226, "8203125": 226, "78515625": 226, "7265625": 226, "53515625": 226, "5703125": 226, "5546875": 226, "5390625": 226, "828125": 226, "80859375": 226, "765625": 226, "81640625": 226, "5234375": 226, "73046875": 226, "87890625": 226, "7890625": 226, "7734375": 226, "7421875": 226, "70703125": 226, "50390625": 226, "7578125": 226, "52734375": 226, "78125": 226, "8125": 226, "average_heavy_output_prob": 226, "649203125": 226, "021341903733745705": 226, "672703125": 226, "020984452845629994": 226, "rem_average_heavy_output_prob": 226, "67954478782619": 226, "020869291754367154": 226, "rem_is_succes": 226, "rem_qv_result": 226, "710149650958595": 226, "020289757228807877": 226, "vanilla_4_qubits_": 226, "vanilla_rem_4_qubits_": 226, "Or": 226, "onc": [226, 230], "collect": 227, "demonstr": 227, "rest": 227, "summari": [227, 228], "releas": 228, "date": [228, 229], "finland": 228, "tool": [228, 230], "changelog": 228, "search": 228, "januari": 229, "2004": 229, "AND": 229, "FOR": 229, "reproduct": 229, "shall": 229, "licensor": 229, "owner": 229, "entiti": 229, "author": 229, "grant": 229, "legal": 229, "power": 229, "indirect": 229, "caus": 229, "contract": 229, "ownership": 229, "fifti": 229, "percent": 229, "outstand": 229, "iii": 229, "benefici": 229, "exercis": 229, "mechan": 229, "transform": 229, "translat": 229, "media": 229, "authorship": 229, "attach": 229, "appendix": 229, "editori": 229, "revis": 229, "elabor": 229, "whole": 229, "remain": 229, "link": 229, "bind": 229, "interfac": 229, "thereof": 229, "contribut": 229, "intention": 229, "inclus": 229, "behalf": 229, "electron": 229, "verbal": 229, "mail": 229, "track": 229, "discuss": 229, "exclud": 229, "conspicu": 229, "Not": 229, "contributor": 229, "whom": 229, "been": 229, "incorpor": 229, "subject": 229, "herebi": 229, "perpetu": 229, "worldwid": 229, "charg": 229, "royalti": 229, "irrevoc": 229, "reproduc": 229, "publicli": 229, "sublicens": 229, "patent": 229, "sell": 229, "transfer": 229, "claim": 229, "infring": 229, "alon": 229, "institut": 229, "litig": 229, "counterclaim": 229, "lawsuit": 229, "alleg": 229, "contributori": 229, "redistribut": 229, "medium": 229, "meet": 229, "recipi": 229, "carri": 229, "promin": 229, "retain": 229, "trademark": 229, "pertain": 229, "readabl": 229, "wherev": 229, "third": 229, "parti": 229, "appear": 229, "content": 229, "alongsid": 229, "addendum": 229, "constru": 229, "compli": 229, "explicitli": 229, "notwithstand": 229, "noth": 229, "herein": 229, "supersed": 229, "agreement": 229, "regard": 229, "trade": 229, "servic": [229, 230], "reason": 229, "customari": 229, "disclaim": 229, "merchant": 229, "particular": 229, "respons": 229, "appropri": 229, "risk": 229, "liabil": 229, "event": 229, "tort": 229, "neglig": 229, "deliber": [229, 230], "grossli": 229, "liabl": 229, "damag": 229, "special": 229, "incident": 229, "consequenti": 229, "aris": 229, "inabl": 229, "loss": 229, "goodwil": 229, "stoppag": 229, "failur": 229, "malfunct": 229, "commerci": 229, "even": 229, "advis": 229, "fee": 229, "indemn": 229, "oblig": 229, "indemnifi": 229, "defend": 229, "hold": 229, "harmless": 229, "incur": 229, "assert": 229, "boilerpl": 229, "enclos": 229, "bracket": 229, "comment": 229, "syntax": 229, "archiv": 229, "repositori": [229, 230], "licenc": 229, "src": 229, "raphael": 229, "brieger": 229, "ingo": 229, "roth": 229, "martin": 229, "kliesch": 229, "comprehens": 230, "modular": 230, "easi": 230, "042311": 230, "lett": 230, "080505": 230, "prx": 230, "2023": 230, "150502": 230, "2022": 230, "holist": 230, "032328": 230, "0712": 230, "0921": 230, "2007": 230, "adv": 230, "technol": 230, "2100061": 230, "ieee": 230, "tran": 230, "eng": 230, "legaci": 230, "wrap": 230, "benchmarkexperi": 230, "uv": 230, "highli": 230, "With": 230, "machin": 230, "venv": 230, "read": 230, "prompt": 230, "suppli": 230, "txt": 230, "lock": 230, "directli": 230, "repo": 230, "pypi": 230, "lint": 230, "cicd": 230, "clone": 230, "directori": 230, "edit": 230, "docbuild": 230, "pyproject": 230, "toml": 230, "commit": 230, "upgrad": 230, "transit": 230, "cloud": 230, "prem": 230, "platform": 230, "authent": 230, "example_irb": 230, "example_experi": 230, "setup": 230, "weekli": 230, "daili": 230, "gitlab": 230, "scheduled_experi": 230}, "objects": {"iqm": [[1, 0, 0, "-", "benchmarks"]], "iqm.benchmarks": [[2, 0, 0, "-", "benchmark"], [5, 0, 0, "-", "benchmark_definition"], [15, 0, 0, "-", "circuit_containers"], [19, 0, 0, "-", "coherence"], [28, 0, 0, "-", "compressive_gst"], [47, 0, 0, "-", "entanglement"], [75, 0, 0, "-", "logging_config"], [76, 0, 0, "-", "optimization"], [89, 0, 0, "-", "quantum_volume"], [108, 0, 0, "-", "randomized_benchmarking"], [165, 0, 0, "-", "readout_mitigation"], [169, 0, 0, "-", "utils"], [196, 0, 0, "-", "utils_plots"], [203, 0, 0, "-", "utils_shadows"]], "iqm.benchmarks.benchmark": [[3, 1, 1, "", "BenchmarkBase"], [4, 1, 1, "", "BenchmarkConfigurationBase"]], "iqm.benchmarks.benchmark.BenchmarkBase": [[3, 2, 1, "", "check_requirements"], [3, 2, 1, "", "execute_full_benchmark"], [3, 2, 1, "", "generate_requirements"], [3, 2, 1, "", "name"]], "iqm.benchmarks.benchmark.BenchmarkConfigurationBase": [[4, 3, 1, "", "benchmark"], [4, 3, 1, "", "calset_id"], [4, 3, 1, "", "max_circuits_per_batch"], [4, 3, 1, "", "max_gates_per_batch"], [4, 3, 1, "", "model_config"], [4, 3, 1, "", "physical_layout"], [4, 3, 1, "", "routing_method"], [4, 3, 1, "", "shots"], [4, 3, 1, "", "use_dd"]], "iqm.benchmarks.benchmark_definition": [[6, 1, 1, "", "Benchmark"], [7, 1, 1, "", "BenchmarkAnalysisResult"], [8, 1, 1, "", "BenchmarkObservation"], [9, 1, 1, "", "BenchmarkObservationIdentifier"], [10, 1, 1, "", "BenchmarkRunResult"], [11, 5, 1, "", "add_counts_to_dataset"], [12, 5, 1, "", "default_analysis_function"], [13, 5, 1, "", "merge_datasets_dac"], [14, 5, 1, "", "show_figure"]], "iqm.benchmarks.benchmark_definition.Benchmark": [[6, 2, 1, "", "analysis_function"], [6, 2, 1, "", "analyze"], [6, 2, 1, "", "execute"], [6, 2, 1, "", "name"], [6, 2, 1, "", "run"]], "iqm.benchmarks.benchmark_definition.BenchmarkAnalysisResult": [[7, 2, 1, "", "from_run_result"], [7, 2, 1, "", "plot"], [7, 2, 1, "", "plot_all"]], "iqm.benchmarks.benchmark_definition.BenchmarkObservation": [[8, 3, 1, "", "identifier"], [8, 3, 1, "", "name"], [8, 3, 1, "", "uncertainty"], [8, 3, 1, "", "value"]], "iqm.benchmarks.benchmark_definition.BenchmarkObservationIdentifier": [[9, 3, 1, "", "qubit_indices"], [9, 4, 1, "", "string_identifier"]], "iqm.benchmarks.circuit_containers": [[16, 1, 1, "", "BenchmarkCircuit"], [17, 1, 1, "", "CircuitGroup"], [18, 1, 1, "", "Circuits"]], "iqm.benchmarks.circuit_containers.BenchmarkCircuit": [[16, 3, 1, "", "circuit_groups"], [16, 2, 1, "", "get_circuit_group_by_name"], [16, 4, 1, "", "group_names"], [16, 4, 1, "", "groups"], [16, 3, 1, "", "name"], [16, 4, 1, "", "qubit_indices"], [16, 4, 1, "", "qubit_layouts"], [16, 4, 1, "", "qubit_layouts_by_index"], [16, 4, 1, "", "qubits"]], "iqm.benchmarks.circuit_containers.CircuitGroup": [[17, 2, 1, "", "add_circuit"], [17, 4, 1, "", "circuit_names"], [17, 3, 1, "", "circuits"], [17, 2, 1, "", "get_circuits_by_name"], [17, 3, 1, "", "name"], [17, 4, 1, "", "qubit_layouts"], [17, 4, 1, "", "qubit_layouts_by_index"], [17, 4, 1, "", "qubits"]], "iqm.benchmarks.circuit_containers.Circuits": [[18, 3, 1, "", "benchmark_circuits"], [18, 2, 1, "", "get_benchmark_circuits_by_name"]], "iqm.benchmarks.coherence": [[20, 0, 0, "-", "coherence"]], "iqm.benchmarks.coherence.coherence": [[21, 1, 1, "", "CoherenceBenchmark"], [22, 1, 1, "", "CoherenceConfiguration"], [23, 5, 1, "", "calculate_probabilities"], [24, 5, 1, "", "coherence_analysis"], [25, 5, 1, "", "exp_decay"], [26, 5, 1, "", "fit_coherence_model"], [27, 5, 1, "", "plot_coherence"]], "iqm.benchmarks.coherence.coherence.CoherenceBenchmark": [[21, 2, 1, "", "add_all_meta_to_dataset"], [21, 2, 1, "", "analysis_function"], [21, 2, 1, "", "checkerboard_groups_from_coupling"], [21, 2, 1, "", "execute"], [21, 2, 1, "", "generate_coherence_circuits"]], "iqm.benchmarks.coherence.coherence.CoherenceConfiguration": [[22, 3, 1, "", "benchmark"], [22, 3, 1, "", "coherence_exp"], [22, 3, 1, "", "delays"], [22, 3, 1, "", "model_config"], [22, 3, 1, "", "optimize_sqg"], [22, 3, 1, "", "qiskit_optim_level"]], "iqm.benchmarks.compressive_gst": [[29, 0, 0, "-", "compressive_gst"], [35, 0, 0, "-", "gst_analysis"]], "iqm.benchmarks.compressive_gst.compressive_gst": [[30, 1, 1, "", "CompressiveGST"], [31, 1, 1, "", "GSTConfiguration"], [32, 5, 1, "", "create_predefined_gate_set"], [33, 5, 1, "", "parse_gate_set"], [34, 5, 1, "", "parse_layouts"]], "iqm.benchmarks.compressive_gst.compressive_gst.CompressiveGST": [[30, 2, 1, "", "add_configuration_to_dataset"], [30, 2, 1, "", "analysis_function"], [30, 2, 1, "", "execute"], [30, 2, 1, "", "generate_meas_circuits"]], "iqm.benchmarks.compressive_gst.compressive_gst.GSTConfiguration": [[31, 3, 1, "", "batch_size"], [31, 3, 1, "", "benchmark"], [31, 3, 1, "", "bootstrap_samples"], [31, 3, 1, "", "convergence_criteria"], [31, 3, 1, "", "from_init"], [31, 3, 1, "", "gate_labels"], [31, 3, 1, "", "gate_set"], [31, 3, 1, "", "max_inits"], [31, 3, 1, "", "max_iterations"], [31, 3, 1, "", "model_config"], [31, 3, 1, "", "num_circuits"], [31, 3, 1, "", "opt_method"], [31, 3, 1, "", "parallel_execution"], [31, 3, 1, "", "qubit_layouts"], [31, 3, 1, "", "rank"], [31, 3, 1, "", "seq_len_list"], [31, 3, 1, "", "shots"]], "iqm.benchmarks.compressive_gst.gst_analysis": [[36, 5, 1, "", "bootstrap_errors"], [37, 5, 1, "", "dataframe_to_figure"], [38, 5, 1, "", "dataset_counts_to_mgst_format"], [39, 5, 1, "", "generate_basis_labels"], [40, 5, 1, "", "generate_gate_results"], [41, 5, 1, "", "generate_non_gate_results"], [42, 5, 1, "", "generate_unit_rank_gate_results"], [43, 5, 1, "", "mgst_analysis"], [44, 5, 1, "", "pandas_results_to_observations"], [45, 5, 1, "", "result_str_to_floats"], [46, 5, 1, "", "run_mGST_wrapper"]], "iqm.benchmarks.entanglement": [[48, 0, 0, "-", "ghz"], [62, 0, 0, "-", "graph_states"]], "iqm.benchmarks.entanglement.ghz": [[49, 1, 1, "", "GHZBenchmark"], [50, 1, 1, "", "GHZConfiguration"], [51, 5, 1, "", "fidelity_analysis"], [52, 5, 1, "", "fidelity_ghz_coherences"], [53, 5, 1, "", "fidelity_ghz_randomized_measurements"], [54, 5, 1, "", "generate_ghz_linear"], [55, 5, 1, "", "generate_ghz_log_cruz"], [56, 5, 1, "", "generate_ghz_log_mooney"], [57, 5, 1, "", "generate_ghz_spanning_tree"], [58, 5, 1, "", "generate_ghz_star"], [59, 5, 1, "", "get_cx_map"], [60, 5, 1, "", "get_edges"], [61, 5, 1, "", "plot_fidelities"]], "iqm.benchmarks.entanglement.ghz.GHZBenchmark": [[49, 2, 1, "", "add_configuration_to_dataset"], [49, 2, 1, "", "analysis_function"], [49, 2, 1, "", "append_rms"], [49, 2, 1, "", "execute"], [49, 2, 1, "", "generate_coherence_meas_circuits"], [49, 2, 1, "", "generate_native_ghz"], [49, 2, 1, "", "generate_readout_circuit"]], "iqm.benchmarks.entanglement.ghz.GHZConfiguration": [[50, 3, 1, "", "benchmark"], [50, 3, 1, "", "cal_url"], [50, 3, 1, "", "custom_qubits_array"], [50, 3, 1, "", "fidelity_routine"], [50, 3, 1, "", "mit_shots"], [50, 3, 1, "", "model_config"], [50, 3, 1, "", "num_RMs"], [50, 3, 1, "", "optimize_sqg"], [50, 3, 1, "", "qiskit_optim_level"], [50, 3, 1, "", "qubit_counts"], [50, 3, 1, "", "rem"], [50, 3, 1, "", "state_generation_routine"]], "iqm.benchmarks.entanglement.ghz.GHZConfiguration.iqm.qiskit_iqm.iqm_transpilation": [[50, 3, 1, "", "optimize_single_qubit_gates"]], "iqm.benchmarks.entanglement.graph_states": [[63, 1, 1, "", "GraphStateBenchmark"], [64, 1, 1, "", "GraphStateConfiguration"], [65, 5, 1, "", "find_edges_with_disjoint_neighbors"], [66, 5, 1, "", "generate_graph_state"], [67, 5, 1, "", "generate_minimal_edge_layers"], [68, 5, 1, "", "negativity_analysis"], [69, 5, 1, "", "plot_density_matrix"], [70, 5, 1, "", "plot_max_negativities"], [71, 5, 1, "", "plot_max_negativities_graph"], [72, 5, 1, "", "shadow_tomography_analysis"], [73, 5, 1, "", "state_tomography_analysis"], [74, 5, 1, "", "update_pauli_expectations"]], "iqm.benchmarks.entanglement.graph_states.GraphStateBenchmark": [[63, 2, 1, "", "add_all_circuits_to_dataset"], [63, 2, 1, "", "add_all_meta_to_dataset"], [63, 2, 1, "", "analysis_function"], [63, 2, 1, "", "execute"], [63, 2, 1, "", "generate_all_circuit_info_for_graph_state_benchmark"]], "iqm.benchmarks.entanglement.graph_states.GraphStateConfiguration": [[64, 3, 1, "", "benchmark"], [64, 3, 1, "", "model_config"], [64, 3, 1, "", "n_median_of_means"], [64, 3, 1, "", "n_random_unitaries"], [64, 3, 1, "", "num_bootstraps"], [64, 3, 1, "", "qubits"], [64, 3, 1, "", "tomography"]], "iqm.benchmarks.optimization": [[77, 0, 0, "-", "qscore"]], "iqm.benchmarks.optimization.qscore": [[78, 1, 1, "", "QScoreBenchmark"], [79, 1, 1, "", "QScoreConfiguration"], [80, 5, 1, "", "calculate_optimal_angles_for_QAOA_p1"], [81, 5, 1, "", "compute_expectation_value"], [82, 5, 1, "", "create_objective_function"], [83, 5, 1, "", "cut_cost_function"], [84, 5, 1, "", "get_optimal_angles"], [85, 5, 1, "", "is_successful"], [86, 5, 1, "", "plot_approximation_ratios"], [87, 5, 1, "", "qscore_analysis"], [88, 5, 1, "", "run_QAOA"]], "iqm.benchmarks.optimization.qscore.QScoreBenchmark": [[78, 2, 1, "", "add_all_meta_to_dataset"], [78, 2, 1, "", "analysis_function"], [78, 2, 1, "", "choose_qubits_custom"], [78, 2, 1, "", "choose_qubits_naive"], [78, 2, 1, "", "execute"], [78, 2, 1, "", "generate_maxcut_ansatz"]], "iqm.benchmarks.optimization.qscore.QScoreConfiguration": [[79, 3, 1, "", "REM"], [79, 3, 1, "", "benchmark"], [79, 3, 1, "", "choose_qubits_routine"], [79, 3, 1, "", "custom_qubits_array"], [79, 3, 1, "", "max_num_nodes"], [79, 3, 1, "", "min_num_nodes"], [79, 3, 1, "", "min_num_qubits"], [79, 3, 1, "", "mit_shots"], [79, 3, 1, "", "model_config"], [79, 3, 1, "", "num_instances"], [79, 3, 1, "", "num_qaoa_layers"], [79, 3, 1, "", "optimize_sqg"], [79, 3, 1, "", "qiskit_optim_level"], [79, 3, 1, "", "seed"], [79, 3, 1, "", "use_classically_optimized_angles"], [79, 3, 1, "", "use_virtual_node"]], "iqm.benchmarks.quantum_volume": [[90, 0, 0, "-", "clops"], [96, 0, 0, "-", "quantum_volume"]], "iqm.benchmarks.quantum_volume.clops": [[91, 1, 1, "", "CLOPSBenchmark"], [92, 1, 1, "", "CLOPSConfiguration"], [93, 5, 1, "", "clops_analysis"], [94, 5, 1, "", "plot_times"], [95, 5, 1, "", "retrieve_clops_elapsed_times"]], "iqm.benchmarks.quantum_volume.clops.CLOPSBenchmark": [[91, 2, 1, "", "add_all_meta_to_dataset"], [91, 2, 1, "", "analysis_function"], [91, 2, 1, "", "append_parameterized_unitary"], [91, 2, 1, "", "assign_random_parameters_to_all"], [91, 2, 1, "", "clops_cycle"], [91, 2, 1, "", "execute"], [91, 2, 1, "", "generate_circuit_list"], [91, 2, 1, "", "generate_random_parameters"], [91, 2, 1, "", "generate_single_circuit"], [91, 2, 1, "", "generate_transpiled_clops_templates"]], "iqm.benchmarks.quantum_volume.clops.CLOPSConfiguration": [[92, 3, 1, "", "benchmark"], [92, 3, 1, "", "clops_h_bool"], [92, 3, 1, "", "model_config"], [92, 3, 1, "", "num_circuits"], [92, 3, 1, "", "num_shots"], [92, 3, 1, "", "num_updates"], [92, 3, 1, "", "optimize_sqg"], [92, 3, 1, "", "physical_layout"], [92, 3, 1, "", "qiskit_optim_level"], [92, 3, 1, "", "qubits"], [92, 3, 1, "", "routing_method"]], "iqm.benchmarks.quantum_volume.quantum_volume": [[97, 1, 1, "", "QuantumVolumeBenchmark"], [98, 1, 1, "", "QuantumVolumeConfiguration"], [99, 5, 1, "", "compute_heavy_output_probabilities"], [100, 5, 1, "", "cumulative_hop"], [101, 5, 1, "", "cumulative_std"], [102, 5, 1, "", "get_ideal_heavy_outputs"], [103, 5, 1, "", "get_rem_hops"], [104, 5, 1, "", "heavy_projector"], [105, 5, 1, "", "is_successful"], [106, 5, 1, "", "plot_hop_threshold"], [107, 5, 1, "", "qv_analysis"]], "iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeBenchmark": [[97, 2, 1, "", "add_all_circuits_to_dataset"], [97, 2, 1, "", "add_all_meta_to_dataset"], [97, 2, 1, "", "analysis_function"], [97, 2, 1, "", "execute"], [97, 2, 1, "", "generate_circuit_list"], [97, 2, 1, "", "generate_single_circuit"], [97, 2, 1, "", "get_rem_quasidistro"], [97, 2, 1, "", "submit_single_qv_job"]], "iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeConfiguration": [[98, 3, 1, "", "benchmark"], [98, 3, 1, "", "choose_qubits_routine"], [98, 3, 1, "", "custom_qubits_array"], [98, 3, 1, "", "mit_shots"], [98, 3, 1, "", "model_config"], [98, 3, 1, "", "num_circuits"], [98, 3, 1, "", "num_sigmas"], [98, 3, 1, "", "optimize_sqg"], [98, 3, 1, "", "physical_layout"], [98, 3, 1, "", "qiskit_optim_level"], [98, 3, 1, "", "rem"], [98, 3, 1, "", "routing_method"]], "iqm.benchmarks.randomized_benchmarking": [[109, 0, 0, "-", "clifford_rb"], [114, 0, 0, "-", "direct_rb"], [121, 0, 0, "-", "eplg"], [127, 0, 0, "-", "interleaved_rb"], [132, 0, 0, "-", "mirror_rb"], [141, 0, 0, "-", "multi_lmfit"], [146, 0, 0, "-", "randomized_benchmarking_common"]], "iqm.benchmarks.randomized_benchmarking.clifford_rb": [[110, 0, 0, "-", "clifford_rb"]], "iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb": [[111, 1, 1, "", "CliffordRBConfiguration"], [112, 1, 1, "", "CliffordRandomizedBenchmarking"], [113, 5, 1, "", "clifford_rb_analysis"]], "iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.CliffordRBConfiguration": [[111, 3, 1, "", "benchmark"], [111, 3, 1, "", "model_config"], [111, 3, 1, "", "num_circuit_samples"], [111, 3, 1, "", "parallel_execution"], [111, 3, 1, "", "qubits_array"], [111, 3, 1, "", "sequence_lengths"], [111, 3, 1, "", "shots"]], "iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.CliffordRandomizedBenchmarking": [[112, 2, 1, "", "add_all_circuits_to_dataset"], [112, 2, 1, "", "add_all_metadata_to_dataset"], [112, 2, 1, "", "analysis_function"], [112, 2, 1, "", "execute"]], "iqm.benchmarks.randomized_benchmarking.direct_rb": [[115, 0, 0, "-", "direct_rb"]], "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb": [[116, 1, 1, "", "DirectRBConfiguration"], [117, 1, 1, "", "DirectRandomizedBenchmarking"], [118, 5, 1, "", "direct_rb_analysis"], [119, 5, 1, "", "generate_drb_circuits"], [120, 5, 1, "", "generate_fixed_depth_parallel_drb_circuits"]], "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.DirectRBConfiguration": [[116, 3, 1, "", "benchmark"], [116, 3, 1, "", "clifford_sqg_probabilities"], [116, 3, 1, "", "densities_2q_gates"], [116, 3, 1, "", "depths"], [116, 3, 1, "", "is_eplg"], [116, 3, 1, "", "model_config"], [116, 3, 1, "", "num_circuit_samples"], [116, 3, 1, "", "parallel_execution"], [116, 3, 1, "", "qiskit_optim_level"], [116, 3, 1, "", "qubits_array"], [116, 3, 1, "", "routing_method"], [116, 3, 1, "", "shots"], [116, 3, 1, "", "sqg_gate_ensembles"], [116, 3, 1, "", "two_qubit_gate_ensembles"]], "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.DirectRandomizedBenchmarking": [[117, 2, 1, "", "add_all_meta_to_dataset"], [117, 2, 1, "", "analysis_function"], [117, 2, 1, "", "assign_inputs_to_qubits"], [117, 2, 1, "", "execute"], [117, 2, 1, "", "submit_single_drb_job"]], "iqm.benchmarks.randomized_benchmarking.eplg": [[122, 0, 0, "-", "eplg"]], "iqm.benchmarks.randomized_benchmarking.eplg.eplg": [[123, 1, 1, "", "EPLGBenchmark"], [124, 1, 1, "", "EPLGConfiguration"], [125, 5, 1, "", "eplg_analysis"], [126, 5, 1, "", "plot_layered_fidelities_graph"]], "iqm.benchmarks.randomized_benchmarking.eplg.eplg.EPLGBenchmark": [[123, 2, 1, "", "add_all_meta_to_dataset"], [123, 2, 1, "", "analysis_function"], [123, 2, 1, "", "execute"], [123, 2, 1, "", "validate_custom_qubits_array"], [123, 2, 1, "", "validate_random_chain_inputs"]], "iqm.benchmarks.randomized_benchmarking.eplg.eplg.EPLGConfiguration": [[124, 3, 1, "", "calibration_url"], [124, 3, 1, "", "chain_length"], [124, 3, 1, "", "chain_path_samples"], [124, 3, 1, "", "custom_qubits_array"], [124, 3, 1, "", "drb_circuit_samples"], [124, 3, 1, "", "drb_depths"], [124, 3, 1, "", "max_hamiltonian_path_tries"], [124, 3, 1, "", "model_config"], [124, 3, 1, "", "num_disjoint_layers"]], "iqm.benchmarks.randomized_benchmarking.interleaved_rb": [[128, 0, 0, "-", "interleaved_rb"]], "iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb": [[129, 1, 1, "", "InterleavedRBConfiguration"], [130, 1, 1, "", "InterleavedRandomizedBenchmarking"], [131, 5, 1, "", "interleaved_rb_analysis"]], "iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.InterleavedRBConfiguration": [[129, 3, 1, "", "interleaved_gate"], [129, 3, 1, "", "interleaved_gate_params"], [129, 3, 1, "", "model_config"], [129, 3, 1, "", "num_circuit_samples"], [129, 3, 1, "", "parallel_execution"], [129, 3, 1, "", "qubits_array"], [129, 3, 1, "", "sequence_lengths"], [129, 3, 1, "", "shots"], [129, 3, 1, "", "simultaneous_fit"]], "iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.InterleavedRandomizedBenchmarking": [[130, 2, 1, "", "add_all_circuits_to_dataset"], [130, 2, 1, "", "add_all_meta_to_dataset"], [130, 2, 1, "", "analysis_function"], [130, 2, 1, "", "execute"]], "iqm.benchmarks.randomized_benchmarking.mirror_rb": [[133, 0, 0, "-", "mirror_rb"]], "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb": [[134, 1, 1, "", "MirrorRBConfiguration"], [135, 1, 1, "", "MirrorRandomizedBenchmarking"], [136, 5, 1, "", "compute_polarizations"], [137, 5, 1, "", "generate_fixed_depth_mrb_circuits"], [138, 5, 1, "", "generate_pauli_dressed_mrb_circuits"], [139, 5, 1, "", "list_to_numcircuit_times_numpauli_matrix"], [140, 5, 1, "", "mrb_analysis"]], "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRBConfiguration": [[134, 3, 1, "", "benchmark"], [134, 3, 1, "", "clifford_sqg_probability"], [134, 3, 1, "", "density_2q_gates"], [134, 3, 1, "", "depths_array"], [134, 3, 1, "", "model_config"], [134, 3, 1, "", "num_circuit_samples"], [134, 3, 1, "", "num_pauli_samples"], [134, 3, 1, "", "qiskit_optim_level"], [134, 3, 1, "", "qubits_array"], [134, 3, 1, "", "routing_method"], [134, 3, 1, "", "shots"], [134, 3, 1, "", "simulation_method"], [134, 3, 1, "", "sqg_gate_ensemble"], [134, 3, 1, "", "two_qubit_gate_ensemble"]], "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRandomizedBenchmarking": [[135, 2, 1, "", "add_all_meta_to_dataset"], [135, 2, 1, "", "analysis_function"], [135, 2, 1, "", "execute"], [135, 2, 1, "", "submit_single_mrb_job"]], "iqm.benchmarks.randomized_benchmarking.multi_lmfit": [[142, 5, 1, "", "create_multi_dataset_params"], [143, 5, 1, "", "eval_func_single_dataset"], [144, 5, 1, "", "get_param_names_from_func_signature"], [145, 5, 1, "", "multi_dataset_residual"]], "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common": [[147, 5, 1, "", "compute_inverse_clifford"], [148, 5, 1, "", "edge_grab"], [149, 5, 1, "", "estimate_survival_probabilities"], [150, 5, 1, "", "exponential_rb"], [151, 5, 1, "", "fit_decay_lmfit"], [152, 5, 1, "", "generate_all_rb_circuits"], [153, 5, 1, "", "generate_fixed_depth_parallel_rb_circuits"], [154, 5, 1, "", "generate_random_clifford_seq_circuits"], [155, 5, 1, "", "get_survival_probabilities"], [156, 5, 1, "", "import_native_gate_cliffords"], [157, 5, 1, "", "lmfit_minimizer"], [158, 5, 1, "", "plot_rb_decay"], [159, 5, 1, "", "relabel_qubits_array_from_zero"], [160, 5, 1, "", "submit_parallel_rb_job"], [161, 5, 1, "", "submit_sequential_rb_jobs"], [162, 5, 1, "", "survival_probabilities_parallel"], [163, 5, 1, "", "validate_irb_gate"], [164, 5, 1, "", "validate_rb_qubits"]], "iqm.benchmarks.readout_mitigation": [[166, 1, 1, "", "M3IQM"], [167, 5, 1, "", "apply_readout_error_mitigation"], [168, 5, 1, "", "readout_error_m3"]], "iqm.benchmarks.readout_mitigation.M3IQM": [[166, 2, 1, "", "cals_from_system"]], "iqm.benchmarks.utils": [[170, 5, 1, "", "bootstrap_counts"], [171, 5, 1, "", "count_2q_layers"], [172, 5, 1, "", "count_native_gates"], [173, 5, 1, "", "extract_fidelities"], [174, 5, 1, "", "generate_state_tomography_circuits"], [175, 5, 1, "", "get_Pauli_expectation"], [176, 5, 1, "", "get_active_qubits"], [177, 5, 1, "", "get_iqm_backend"], [178, 5, 1, "", "get_measurement_mapping"], [179, 5, 1, "", "get_neighbors_of_edges"], [180, 5, 1, "", "get_tomography_matrix"], [181, 5, 1, "", "marginal_distribution"], [182, 5, 1, "", "median_with_uncertainty"], [183, 5, 1, "", "perform_backend_transpilation"], [184, 5, 1, "", "random_hamiltonian_path"], [185, 5, 1, "", "reduce_to_active_qubits"], [186, 5, 1, "", "remove_directed_duplicates_to_list"], [187, 5, 1, "", "retrieve_all_counts"], [188, 5, 1, "", "retrieve_all_job_metadata"], [189, 5, 1, "", "set_coupling_map"], [190, 5, 1, "", "sort_batches_by_final_layout"], [191, 5, 1, "", "split_into_disjoint_pairs"], [192, 5, 1, "", "split_sequence_in_chunks"], [193, 5, 1, "", "submit_execute"], [194, 5, 1, "", "timeit"], [195, 5, 1, "", "xrvariable_to_counts"]], "iqm.benchmarks.utils_plots": [[197, 1, 1, "", "GraphPositions"], [198, 5, 1, "", "calculate_node_radii"], [199, 5, 1, "", "draw_graph_edges"], [200, 5, 1, "", "evaluate_hamiltonian_paths"], [201, 5, 1, "", "plot_layout_fidelity_graph"], [202, 5, 1, "", "rx_to_nx_graph"]], "iqm.benchmarks.utils_plots.GraphPositions": [[197, 2, 1, "", "create_positions"], [197, 3, 1, "", "deneb_positions"], [197, 3, 1, "", "garnet_positions"], [197, 2, 1, "", "get_positions"], [197, 3, 1, "", "predefined_stations"]], "iqm.benchmarks.utils_shadows": [[204, 5, 1, "", "CUE"], [205, 5, 1, "", "get_local_shadow"], [206, 5, 1, "", "get_negativity"], [207, 5, 1, "", "local_shadow_tomography"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:attribute", "4": "py:property", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "property", "Python property"], "5": ["py", "function", "Python function"]}, "titleterms": {"api": 0, "refer": 0, "iqm": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 213, 214, 215, 216, 218, 219, 224, 225, 226, 228, 230], "benchmark": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 211, 213, 214, 215, 216, 218, 219, 220, 223, 224, 228, 230], "benchmarkbas": 3, "benchmarkconfigurationbas": 4, "benchmark_definit": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14], "benchmarkanalysisresult": 7, "benchmarkobserv": 8, "benchmarkobservationidentifi": 9, "benchmarkrunresult": 10, "add_counts_to_dataset": 11, "default_analysis_funct": 12, "merge_datasets_dac": 13, "show_figur": 14, "circuit_contain": [15, 16, 17, 18], "benchmarkcircuit": 16, "circuitgroup": 17, "circuit": [18, 213, 214, 216, 218], "coher": [19, 20, 21, 22, 23, 24, 25, 26, 27, 217], "coherencebenchmark": 21, "coherenceconfigur": 22, "calculate_prob": 23, "coherence_analysi": 24, "exp_decai": 25, "fit_coherence_model": 26, "plot_coher": 27, "compressive_gst": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46], "compressivegst": 30, "gstconfigur": 31, "create_predefined_gate_set": 32, "parse_gate_set": 33, "parse_layout": 34, "gst_analysi": [35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46], "bootstrap_error": 36, "dataframe_to_figur": 37, "dataset_counts_to_mgst_format": 38, "generate_basis_label": 39, "generate_gate_result": 40, "generate_non_gate_result": 41, "generate_unit_rank_gate_result": 42, "mgst_analysi": 43, "pandas_results_to_observ": 44, "result_str_to_float": 45, "run_mgst_wrapp": 46, "entangl": [47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 221], "ghz": [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 213, 214, 219, 220], "ghzbenchmark": 49, "ghzconfigur": 50, "fidelity_analysi": 51, "fidelity_ghz_coher": 52, "fidelity_ghz_randomized_measur": 53, "generate_ghz_linear": 54, "generate_ghz_log_cruz": 55, "generate_ghz_log_moonei": 56, "generate_ghz_spanning_tre": 57, "generate_ghz_star": 58, "get_cx_map": 59, "get_edg": 60, "plot_fidel": 61, "graph_stat": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74], "graphstatebenchmark": 63, "graphstateconfigur": 64, "find_edges_with_disjoint_neighbor": 65, "generate_graph_st": 66, "generate_minimal_edge_lay": 67, "negativity_analysi": 68, "plot_density_matrix": 69, "plot_max_neg": 70, "plot_max_negativities_graph": 71, "shadow_tomography_analysi": 72, "state_tomography_analysi": 73, "update_pauli_expect": 74, "logging_config": 75, "optim": [76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88], "qscore": [77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 219, 225], "qscorebenchmark": 78, "qscoreconfigur": 79, "calculate_optimal_angles_for_qaoa_p1": 80, "compute_expectation_valu": 81, "create_objective_funct": 82, "cut_cost_funct": 83, "get_optimal_angl": 84, "is_success": [85, 105], "plot_approximation_ratio": 86, "qscore_analysi": 87, "run_qaoa": 88, "quantum_volum": [89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "clop": [90, 91, 92, 93, 94, 95, 213, 214, 216, 219], "clopsbenchmark": 91, "clopsconfigur": 92, "clops_analysi": 93, "plot_tim": 94, "retrieve_clops_elapsed_tim": 95, "quantumvolumebenchmark": 97, "quantumvolumeconfigur": 98, "compute_heavy_output_prob": 99, "cumulative_hop": 100, "cumulative_std": 101, "get_ideal_heavy_output": 102, "get_rem_hop": 103, "heavy_projector": 104, "plot_hop_threshold": 106, "qv_analysi": 107, "randomized_benchmark": [108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "clifford_rb": [109, 110, 111, 112, 113], "cliffordrbconfigur": 111, "cliffordrandomizedbenchmark": 112, "clifford_rb_analysi": 113, "direct_rb": [114, 115, 116, 117, 118, 119, 120], "directrbconfigur": 116, "directrandomizedbenchmark": 117, "direct_rb_analysi": 118, "generate_drb_circuit": 119, "generate_fixed_depth_parallel_drb_circuit": 120, "eplg": [121, 122, 123, 124, 125, 126, 218], "eplgbenchmark": 123, "eplgconfigur": 124, "eplg_analysi": 125, "plot_layered_fidelities_graph": 126, "interleaved_rb": [127, 128, 129, 130, 131], "interleavedrbconfigur": 129, "interleavedrandomizedbenchmark": 130, "interleaved_rb_analysi": 131, "mirror_rb": [132, 133, 134, 135, 136, 137, 138, 139, 140], "mirrorrbconfigur": 134, "mirrorrandomizedbenchmark": 135, "compute_polar": 136, "generate_fixed_depth_mrb_circuit": 137, "generate_pauli_dressed_mrb_circuit": 138, "list_to_numcircuit_times_numpauli_matrix": 139, "mrb_analysi": 140, "multi_lmfit": [141, 142, 143, 144, 145], "create_multi_dataset_param": 142, "eval_func_single_dataset": 143, "get_param_names_from_func_signatur": 144, "multi_dataset_residu": 145, "randomized_benchmarking_common": [146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "compute_inverse_clifford": 147, "edge_grab": 148, "estimate_survival_prob": 149, "exponential_rb": 150, "fit_decay_lmfit": 151, "generate_all_rb_circuit": 152, "generate_fixed_depth_parallel_rb_circuit": 153, "generate_random_clifford_seq_circuit": 154, "get_survival_prob": 155, "import_native_gate_clifford": 156, "lmfit_minim": 157, "plot_rb_decai": 158, "relabel_qubits_array_from_zero": 159, "submit_parallel_rb_job": 160, "submit_sequential_rb_job": 161, "survival_probabilities_parallel": 162, "validate_irb_g": 163, "validate_rb_qubit": 164, "readout_mitig": [165, 166, 167, 168], "m3iqm": 166, "apply_readout_error_mitig": 167, "readout_error_m3": 168, "util": [169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195], "bootstrap_count": 170, "count_2q_lay": 171, "count_native_g": 172, "extract_fidel": 173, "generate_state_tomography_circuit": 174, "get_pauli_expect": 175, "get_active_qubit": 176, "get_iqm_backend": 177, "get_measurement_map": 178, "get_neighbors_of_edg": 179, "get_tomography_matrix": 180, "marginal_distribut": 181, "median_with_uncertainti": 182, "perform_backend_transpil": 183, "random_hamiltonian_path": 184, "reduce_to_active_qubit": 185, "remove_directed_duplicates_to_list": 186, "retrieve_all_count": 187, "retrieve_all_job_metadata": 188, "set_coupling_map": 189, "sort_batches_by_final_layout": 190, "split_into_disjoint_pair": 191, "split_sequence_in_chunk": 192, "submit_execut": 193, "timeit": 194, "xrvariable_to_count": 195, "utils_plot": [196, 197, 198, 199, 200, 201, 202], "graphposit": 197, "calculate_node_radii": 198, "draw_graph_edg": 199, "evaluate_hamiltonian_path": 200, "plot_layout_fidelity_graph": 201, "rx_to_nx_graph": 202, "utils_shadow": [203, 204, 205, 206, 207], "cue": 204, "get_local_shadow": 205, "get_neg": 206, "local_shadow_tomographi": 207, "changelog": 208, "version": 208, "2": [208, 210], "44": 208, "43": 208, "42": 208, "41": 208, "40": 208, "39": 208, "38": 208, "37": 208, "36": 208, "35": 208, "34": 208, "33": 208, "32": 208, "31": 208, "30": 208, "29": 208, "28": 208, "27": 208, "26": 208, "25": 208, "24": 208, "23": 208, "22": 208, "21": 208, "20": 208, "19": 208, "18": 208, "17": 208, "16": 208, "15": 208, "14": 208, "13": 208, "12": 208, "11": 208, "10": 208, "9": 208, "8": 208, "7": 208, "6": 208, "5": 208, "4": 208, "3": 208, "1": 208, "0": 208, "develop": [209, 230], "qubit": [210, 221], "clifford": [210, 213, 215, 219], "group": 210, "decomposit": 210, "gener": [210, 216, 224, 226], "1q": [210, 223], "2q": [210, 223], "dump": 210, "pickl": 210, "file": 210, "load": 210, "count": 210, "element": 210, "A": 210, "wai": 210, "work": 210, "out": [210, 222], "invers": 210, "sequenc": 210, "design": 210, "condit": 210, "how": 211, "make": 211, "your": 211, "own": 211, "devic": 212, "spark": 213, "connect": [213, 214], "backend": [213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226], "state": [213, 214, 219, 220, 221], "fidel": [213, 214, 218, 219, 220], "quantum": [213, 214, 219, 226], "volum": [213, 214, 219, 226], "layer": [213, 214, 216, 218], "oper": [213, 214, 216], "per": [213, 214, 216, 218], "second": [213, 214, 216], "random": [213, 215, 218, 219, 223, 224], "interleav": [213, 219, 223], "irb": [213, 223], "q": [213, 214, 225], "score": [213, 214, 225], "summari": [213, 214, 219], "star": 214, "crb": 215, "choos": [215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226], "defin": [215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226], "set": [215, 216, 218, 219, 222, 224, 225, 226], "token": [215, 216, 218, 219, 224, 225, 226], "us": [215, 216, 218, 219, 221, 224, 225, 226, 230], "reson": [215, 216, 218, 219, 224, 225, 226], "configur": [215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226], "run": [215, 216, 217, 218, 220, 221, 223, 224, 225, 226], "experi": [215, 216, 217, 218, 221, 222, 223, 224, 225, 226], "perform": [215, 216, 217, 218, 221, 225, 226], "analysi": [215, 216, 217, 218, 221, 225, 226], "list": [216, 224], "all": [216, 218, 221, 222, 224], "kei": [216, 224], "attribut": [216, 221, 224], "dataset": [216, 221, 224], "The": [216, 224], "observ": [216, 222, 224], "object": [216, 224], "contain": [216, 224], "result": [216, 217, 220, 222, 223, 224], "plot": [216, 217, 218, 221, 222, 224, 226], "error": 218, "gate": [218, 222, 223], "inspect": [218, 221], "final": [218, 222], "visual": 218, "select": 218, "drb": 218, "decai": 218, "sampl": [218, 221], "parallel": 218, "notebook": [219, 230], "mirror": [219, 224], "greenberg": 220, "horn": 220, "zeiling": 220, "definit": 220, "access": [220, 222], "graph": 221, "bipartit": 221, "displai": 221, "maximum": 221, "neg": 221, "pair": 221, "avail": 221, "If": 221, "tomographi": [221, 222], "bootstrap": 221, "bia": 221, "differ": 221, "between": 221, "each": 221, "mean": 221, "measur": 221, "some": 221, "particular": 221, "pauli": 221, "compress": 222, "gst": 222, "minim": 222, "execut": 222, "": 222, "examin": 222, "high": 222, "level": 222, "store": 222, "estim": 222, "further": 222, "process": 222, "creat": 222, "custom": 222, "check": 222, "matrix": 222, "correspond": 222, "pi": 222, "rotat": 222, "around": 222, "y": 222, "axi": 222, "analyz": [223, 224], "non": 223, "nativ": 223, "mrb": 224, "rb": 224, "qv": 226, "exampl": 227, "content": 228, "indic": 228, "tabl": 228, "licens": 229, "instal": 230, "latest": 230, "releas": 230, "option": 230, "depend": 230, "chang": 230, "character": 230, "physic": 230, "hardwar": 230, "jupyt": 230, "python": 230, "script": 230, "schedul": 230, "ci": 230, "cd": 230, "pipelin": 230}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"API Reference": [[0, "api-reference"]], "iqm.benchmarks": [[1, "module-iqm.benchmarks"]], "iqm.benchmarks.benchmark": [[2, "module-iqm.benchmarks.benchmark"]], "iqm.benchmarks.benchmark.BenchmarkBase": [[3, "iqm-benchmarks-benchmark-benchmarkbase"]], "iqm.benchmarks.benchmark.BenchmarkConfigurationBase": [[4, "iqm-benchmarks-benchmark-benchmarkconfigurationbase"]], "iqm.benchmarks.benchmark_definition": [[5, "module-iqm.benchmarks.benchmark_definition"]], "iqm.benchmarks.benchmark_definition.Benchmark": [[6, "iqm-benchmarks-benchmark-definition-benchmark"]], "iqm.benchmarks.benchmark_definition.BenchmarkAnalysisResult": [[7, "iqm-benchmarks-benchmark-definition-benchmarkanalysisresult"]], "iqm.benchmarks.benchmark_definition.BenchmarkObservation": [[8, "iqm-benchmarks-benchmark-definition-benchmarkobservation"]], "iqm.benchmarks.benchmark_definition.BenchmarkObservationIdentifier": [[9, "iqm-benchmarks-benchmark-definition-benchmarkobservationidentifier"]], "iqm.benchmarks.benchmark_definition.BenchmarkRunResult": [[10, "iqm-benchmarks-benchmark-definition-benchmarkrunresult"]], "iqm.benchmarks.benchmark_definition.add_counts_to_dataset": [[11, "iqm-benchmarks-benchmark-definition-add-counts-to-dataset"]], "iqm.benchmarks.benchmark_definition.default_analysis_function": [[12, "iqm-benchmarks-benchmark-definition-default-analysis-function"]], "iqm.benchmarks.benchmark_definition.merge_datasets_dac": [[13, "iqm-benchmarks-benchmark-definition-merge-datasets-dac"]], "iqm.benchmarks.benchmark_definition.show_figure": [[14, "iqm-benchmarks-benchmark-definition-show-figure"]], "iqm.benchmarks.circuit_containers": [[15, "module-iqm.benchmarks.circuit_containers"]], "iqm.benchmarks.circuit_containers.BenchmarkCircuit": [[16, "iqm-benchmarks-circuit-containers-benchmarkcircuit"]], "iqm.benchmarks.circuit_containers.CircuitGroup": [[17, "iqm-benchmarks-circuit-containers-circuitgroup"]], "iqm.benchmarks.circuit_containers.Circuits": [[18, "iqm-benchmarks-circuit-containers-circuits"]], "iqm.benchmarks.coherence": [[19, "module-iqm.benchmarks.coherence"]], "iqm.benchmarks.coherence.coherence": [[20, "module-iqm.benchmarks.coherence.coherence"]], "iqm.benchmarks.coherence.coherence.CoherenceBenchmark": [[21, "iqm-benchmarks-coherence-coherence-coherencebenchmark"]], "iqm.benchmarks.coherence.coherence.CoherenceConfiguration": [[22, "iqm-benchmarks-coherence-coherence-coherenceconfiguration"]], "iqm.benchmarks.coherence.coherence.calculate_probabilities": [[23, "iqm-benchmarks-coherence-coherence-calculate-probabilities"]], "iqm.benchmarks.coherence.coherence.coherence_analysis": [[24, "iqm-benchmarks-coherence-coherence-coherence-analysis"]], "iqm.benchmarks.coherence.coherence.exp_decay": [[25, "iqm-benchmarks-coherence-coherence-exp-decay"]], "iqm.benchmarks.coherence.coherence.fit_coherence_model": [[26, "iqm-benchmarks-coherence-coherence-fit-coherence-model"]], "iqm.benchmarks.coherence.coherence.plot_coherence": [[27, "iqm-benchmarks-coherence-coherence-plot-coherence"]], "iqm.benchmarks.compressive_gst": [[28, "module-iqm.benchmarks.compressive_gst"]], "iqm.benchmarks.compressive_gst.compressive_gst": [[29, "module-iqm.benchmarks.compressive_gst.compressive_gst"]], "iqm.benchmarks.compressive_gst.compressive_gst.CompressiveGST": [[30, "iqm-benchmarks-compressive-gst-compressive-gst-compressivegst"]], "iqm.benchmarks.compressive_gst.compressive_gst.GSTConfiguration": [[31, "iqm-benchmarks-compressive-gst-compressive-gst-gstconfiguration"]], "iqm.benchmarks.compressive_gst.compressive_gst.create_predefined_gate_set": [[32, "iqm-benchmarks-compressive-gst-compressive-gst-create-predefined-gate-set"]], "iqm.benchmarks.compressive_gst.compressive_gst.parse_gate_set": [[33, "iqm-benchmarks-compressive-gst-compressive-gst-parse-gate-set"]], "iqm.benchmarks.compressive_gst.compressive_gst.parse_layouts": [[34, "iqm-benchmarks-compressive-gst-compressive-gst-parse-layouts"]], "iqm.benchmarks.compressive_gst.gst_analysis": [[35, "module-iqm.benchmarks.compressive_gst.gst_analysis"]], "iqm.benchmarks.compressive_gst.gst_analysis.bootstrap_errors": [[36, "iqm-benchmarks-compressive-gst-gst-analysis-bootstrap-errors"]], "iqm.benchmarks.compressive_gst.gst_analysis.dataframe_to_figure": [[37, "iqm-benchmarks-compressive-gst-gst-analysis-dataframe-to-figure"]], "iqm.benchmarks.compressive_gst.gst_analysis.dataset_counts_to_mgst_format": [[38, "iqm-benchmarks-compressive-gst-gst-analysis-dataset-counts-to-mgst-format"]], "iqm.benchmarks.compressive_gst.gst_analysis.generate_basis_labels": [[39, "iqm-benchmarks-compressive-gst-gst-analysis-generate-basis-labels"]], "iqm.benchmarks.compressive_gst.gst_analysis.generate_gate_results": [[40, "iqm-benchmarks-compressive-gst-gst-analysis-generate-gate-results"]], "iqm.benchmarks.compressive_gst.gst_analysis.generate_non_gate_results": [[41, "iqm-benchmarks-compressive-gst-gst-analysis-generate-non-gate-results"]], "iqm.benchmarks.compressive_gst.gst_analysis.generate_unit_rank_gate_results": [[42, "iqm-benchmarks-compressive-gst-gst-analysis-generate-unit-rank-gate-results"]], "iqm.benchmarks.compressive_gst.gst_analysis.mgst_analysis": [[43, "iqm-benchmarks-compressive-gst-gst-analysis-mgst-analysis"]], "iqm.benchmarks.compressive_gst.gst_analysis.pandas_results_to_observations": [[44, "iqm-benchmarks-compressive-gst-gst-analysis-pandas-results-to-observations"]], "iqm.benchmarks.compressive_gst.gst_analysis.result_str_to_floats": [[45, "iqm-benchmarks-compressive-gst-gst-analysis-result-str-to-floats"]], "iqm.benchmarks.compressive_gst.gst_analysis.run_mGST_wrapper": [[46, "iqm-benchmarks-compressive-gst-gst-analysis-run-mgst-wrapper"]], "iqm.benchmarks.entanglement": [[47, "module-iqm.benchmarks.entanglement"]], "iqm.benchmarks.entanglement.ghz": [[48, "module-iqm.benchmarks.entanglement.ghz"]], "iqm.benchmarks.entanglement.ghz.GHZBenchmark": [[49, "iqm-benchmarks-entanglement-ghz-ghzbenchmark"]], "iqm.benchmarks.entanglement.ghz.GHZConfiguration": [[50, "iqm-benchmarks-entanglement-ghz-ghzconfiguration"]], "iqm.benchmarks.entanglement.ghz.fidelity_analysis": [[51, "iqm-benchmarks-entanglement-ghz-fidelity-analysis"]], "iqm.benchmarks.entanglement.ghz.fidelity_ghz_coherences": [[52, "iqm-benchmarks-entanglement-ghz-fidelity-ghz-coherences"]], "iqm.benchmarks.entanglement.ghz.fidelity_ghz_randomized_measurements": [[53, "iqm-benchmarks-entanglement-ghz-fidelity-ghz-randomized-measurements"]], "iqm.benchmarks.entanglement.ghz.generate_ghz_linear": [[54, "iqm-benchmarks-entanglement-ghz-generate-ghz-linear"]], "iqm.benchmarks.entanglement.ghz.generate_ghz_log_cruz": [[55, "iqm-benchmarks-entanglement-ghz-generate-ghz-log-cruz"]], "iqm.benchmarks.entanglement.ghz.generate_ghz_log_mooney": [[56, "iqm-benchmarks-entanglement-ghz-generate-ghz-log-mooney"]], "iqm.benchmarks.entanglement.ghz.generate_ghz_spanning_tree": [[57, "iqm-benchmarks-entanglement-ghz-generate-ghz-spanning-tree"]], "iqm.benchmarks.entanglement.ghz.generate_ghz_star": [[58, "iqm-benchmarks-entanglement-ghz-generate-ghz-star"]], "iqm.benchmarks.entanglement.ghz.get_cx_map": [[59, "iqm-benchmarks-entanglement-ghz-get-cx-map"]], "iqm.benchmarks.entanglement.ghz.get_edges": [[60, "iqm-benchmarks-entanglement-ghz-get-edges"]], "iqm.benchmarks.entanglement.ghz.plot_fidelities": [[61, "iqm-benchmarks-entanglement-ghz-plot-fidelities"]], "iqm.benchmarks.entanglement.graph_states": [[62, "module-iqm.benchmarks.entanglement.graph_states"]], "iqm.benchmarks.entanglement.graph_states.GraphStateBenchmark": [[63, "iqm-benchmarks-entanglement-graph-states-graphstatebenchmark"]], "iqm.benchmarks.entanglement.graph_states.GraphStateConfiguration": [[64, "iqm-benchmarks-entanglement-graph-states-graphstateconfiguration"]], "iqm.benchmarks.entanglement.graph_states.find_edges_with_disjoint_neighbors": [[65, "iqm-benchmarks-entanglement-graph-states-find-edges-with-disjoint-neighbors"]], "iqm.benchmarks.entanglement.graph_states.generate_graph_state": [[66, "iqm-benchmarks-entanglement-graph-states-generate-graph-state"]], "iqm.benchmarks.entanglement.graph_states.generate_minimal_edge_layers": [[67, "iqm-benchmarks-entanglement-graph-states-generate-minimal-edge-layers"]], "iqm.benchmarks.entanglement.graph_states.negativity_analysis": [[68, "iqm-benchmarks-entanglement-graph-states-negativity-analysis"]], "iqm.benchmarks.entanglement.graph_states.plot_density_matrix": [[69, "iqm-benchmarks-entanglement-graph-states-plot-density-matrix"]], "iqm.benchmarks.entanglement.graph_states.plot_max_negativities": [[70, "iqm-benchmarks-entanglement-graph-states-plot-max-negativities"]], "iqm.benchmarks.entanglement.graph_states.plot_max_negativities_graph": [[71, "iqm-benchmarks-entanglement-graph-states-plot-max-negativities-graph"]], "iqm.benchmarks.entanglement.graph_states.shadow_tomography_analysis": [[72, "iqm-benchmarks-entanglement-graph-states-shadow-tomography-analysis"]], "iqm.benchmarks.entanglement.graph_states.state_tomography_analysis": [[73, "iqm-benchmarks-entanglement-graph-states-state-tomography-analysis"]], "iqm.benchmarks.entanglement.graph_states.update_pauli_expectations": [[74, "iqm-benchmarks-entanglement-graph-states-update-pauli-expectations"]], "iqm.benchmarks.logging_config": [[75, "module-iqm.benchmarks.logging_config"]], "iqm.benchmarks.optimization": [[76, "module-iqm.benchmarks.optimization"]], "iqm.benchmarks.optimization.qscore": [[77, "module-iqm.benchmarks.optimization.qscore"]], "iqm.benchmarks.optimization.qscore.QScoreBenchmark": [[78, "iqm-benchmarks-optimization-qscore-qscorebenchmark"]], "iqm.benchmarks.optimization.qscore.QScoreConfiguration": [[79, "iqm-benchmarks-optimization-qscore-qscoreconfiguration"]], "iqm.benchmarks.optimization.qscore.calculate_optimal_angles_for_QAOA_p1": [[80, "iqm-benchmarks-optimization-qscore-calculate-optimal-angles-for-qaoa-p1"]], "iqm.benchmarks.optimization.qscore.compute_expectation_value": [[81, "iqm-benchmarks-optimization-qscore-compute-expectation-value"]], "iqm.benchmarks.optimization.qscore.create_objective_function": [[82, "iqm-benchmarks-optimization-qscore-create-objective-function"]], "iqm.benchmarks.optimization.qscore.cut_cost_function": [[83, "iqm-benchmarks-optimization-qscore-cut-cost-function"]], "iqm.benchmarks.optimization.qscore.get_optimal_angles": [[84, "iqm-benchmarks-optimization-qscore-get-optimal-angles"]], "iqm.benchmarks.optimization.qscore.is_successful": [[85, "iqm-benchmarks-optimization-qscore-is-successful"]], "iqm.benchmarks.optimization.qscore.plot_approximation_ratios": [[86, "iqm-benchmarks-optimization-qscore-plot-approximation-ratios"]], "iqm.benchmarks.optimization.qscore.qscore_analysis": [[87, "iqm-benchmarks-optimization-qscore-qscore-analysis"]], "iqm.benchmarks.optimization.qscore.run_QAOA": [[88, "iqm-benchmarks-optimization-qscore-run-qaoa"]], "iqm.benchmarks.quantum_volume": [[89, "module-iqm.benchmarks.quantum_volume"]], "iqm.benchmarks.quantum_volume.clops": [[90, "module-iqm.benchmarks.quantum_volume.clops"]], "iqm.benchmarks.quantum_volume.clops.CLOPSBenchmark": [[91, "iqm-benchmarks-quantum-volume-clops-clopsbenchmark"]], "iqm.benchmarks.quantum_volume.clops.CLOPSConfiguration": [[92, "iqm-benchmarks-quantum-volume-clops-clopsconfiguration"]], "iqm.benchmarks.quantum_volume.clops.clops_analysis": [[93, "iqm-benchmarks-quantum-volume-clops-clops-analysis"]], "iqm.benchmarks.quantum_volume.clops.plot_times": [[94, "iqm-benchmarks-quantum-volume-clops-plot-times"]], "iqm.benchmarks.quantum_volume.clops.retrieve_clops_elapsed_times": [[95, "iqm-benchmarks-quantum-volume-clops-retrieve-clops-elapsed-times"]], "iqm.benchmarks.quantum_volume.quantum_volume": [[96, "module-iqm.benchmarks.quantum_volume.quantum_volume"]], "iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeBenchmark": [[97, "iqm-benchmarks-quantum-volume-quantum-volume-quantumvolumebenchmark"]], "iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeConfiguration": [[98, "iqm-benchmarks-quantum-volume-quantum-volume-quantumvolumeconfiguration"]], "iqm.benchmarks.quantum_volume.quantum_volume.compute_heavy_output_probabilities": [[99, "iqm-benchmarks-quantum-volume-quantum-volume-compute-heavy-output-probabilities"]], "iqm.benchmarks.quantum_volume.quantum_volume.cumulative_hop": [[100, "iqm-benchmarks-quantum-volume-quantum-volume-cumulative-hop"]], "iqm.benchmarks.quantum_volume.quantum_volume.cumulative_std": [[101, "iqm-benchmarks-quantum-volume-quantum-volume-cumulative-std"]], "iqm.benchmarks.quantum_volume.quantum_volume.get_ideal_heavy_outputs": [[102, "iqm-benchmarks-quantum-volume-quantum-volume-get-ideal-heavy-outputs"]], "iqm.benchmarks.quantum_volume.quantum_volume.get_rem_hops": [[103, "iqm-benchmarks-quantum-volume-quantum-volume-get-rem-hops"]], "iqm.benchmarks.quantum_volume.quantum_volume.heavy_projector": [[104, "iqm-benchmarks-quantum-volume-quantum-volume-heavy-projector"]], "iqm.benchmarks.quantum_volume.quantum_volume.is_successful": [[105, "iqm-benchmarks-quantum-volume-quantum-volume-is-successful"]], "iqm.benchmarks.quantum_volume.quantum_volume.plot_hop_threshold": [[106, "iqm-benchmarks-quantum-volume-quantum-volume-plot-hop-threshold"]], "iqm.benchmarks.quantum_volume.quantum_volume.qv_analysis": [[107, "iqm-benchmarks-quantum-volume-quantum-volume-qv-analysis"]], "iqm.benchmarks.randomized_benchmarking": [[108, "module-iqm.benchmarks.randomized_benchmarking"]], "iqm.benchmarks.randomized_benchmarking.clifford_rb": [[109, "module-iqm.benchmarks.randomized_benchmarking.clifford_rb"]], "iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb": [[110, "module-iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb"]], "iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.CliffordRBConfiguration": [[111, "iqm-benchmarks-randomized-benchmarking-clifford-rb-clifford-rb-cliffordrbconfiguration"]], "iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.CliffordRandomizedBenchmarking": [[112, "iqm-benchmarks-randomized-benchmarking-clifford-rb-clifford-rb-cliffordrandomizedbenchmarking"]], "iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.clifford_rb_analysis": [[113, "iqm-benchmarks-randomized-benchmarking-clifford-rb-clifford-rb-clifford-rb-analysis"]], "iqm.benchmarks.randomized_benchmarking.direct_rb": [[114, "module-iqm.benchmarks.randomized_benchmarking.direct_rb"]], "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb": [[115, "module-iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb"]], "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.DirectRBConfiguration": [[116, "iqm-benchmarks-randomized-benchmarking-direct-rb-direct-rb-directrbconfiguration"]], "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.DirectRandomizedBenchmarking": [[117, "iqm-benchmarks-randomized-benchmarking-direct-rb-direct-rb-directrandomizedbenchmarking"]], "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.direct_rb_analysis": [[118, "iqm-benchmarks-randomized-benchmarking-direct-rb-direct-rb-direct-rb-analysis"]], "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.generate_drb_circuits": [[119, "iqm-benchmarks-randomized-benchmarking-direct-rb-direct-rb-generate-drb-circuits"]], "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.generate_fixed_depth_parallel_drb_circuits": [[120, "iqm-benchmarks-randomized-benchmarking-direct-rb-direct-rb-generate-fixed-depth-parallel-drb-circuits"]], "iqm.benchmarks.randomized_benchmarking.eplg": [[121, "module-iqm.benchmarks.randomized_benchmarking.eplg"]], "iqm.benchmarks.randomized_benchmarking.eplg.eplg": [[122, "module-iqm.benchmarks.randomized_benchmarking.eplg.eplg"]], "iqm.benchmarks.randomized_benchmarking.eplg.eplg.EPLGBenchmark": [[123, "iqm-benchmarks-randomized-benchmarking-eplg-eplg-eplgbenchmark"]], "iqm.benchmarks.randomized_benchmarking.eplg.eplg.EPLGConfiguration": [[124, "iqm-benchmarks-randomized-benchmarking-eplg-eplg-eplgconfiguration"]], "iqm.benchmarks.randomized_benchmarking.eplg.eplg.eplg_analysis": [[125, "iqm-benchmarks-randomized-benchmarking-eplg-eplg-eplg-analysis"]], "iqm.benchmarks.randomized_benchmarking.eplg.eplg.plot_layered_fidelities_graph": [[126, "iqm-benchmarks-randomized-benchmarking-eplg-eplg-plot-layered-fidelities-graph"]], "iqm.benchmarks.randomized_benchmarking.interleaved_rb": [[127, "module-iqm.benchmarks.randomized_benchmarking.interleaved_rb"]], "iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb": [[128, "module-iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb"]], "iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.InterleavedRBConfiguration": [[129, "iqm-benchmarks-randomized-benchmarking-interleaved-rb-interleaved-rb-interleavedrbconfiguration"]], "iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.InterleavedRandomizedBenchmarking": [[130, "iqm-benchmarks-randomized-benchmarking-interleaved-rb-interleaved-rb-interleavedrandomizedbenchmarking"]], "iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.interleaved_rb_analysis": [[131, "iqm-benchmarks-randomized-benchmarking-interleaved-rb-interleaved-rb-interleaved-rb-analysis"]], "iqm.benchmarks.randomized_benchmarking.mirror_rb": [[132, "module-iqm.benchmarks.randomized_benchmarking.mirror_rb"]], "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb": [[133, "module-iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb"]], "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRBConfiguration": [[134, "iqm-benchmarks-randomized-benchmarking-mirror-rb-mirror-rb-mirrorrbconfiguration"]], "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRandomizedBenchmarking": [[135, "iqm-benchmarks-randomized-benchmarking-mirror-rb-mirror-rb-mirrorrandomizedbenchmarking"]], "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.compute_polarizations": [[136, "iqm-benchmarks-randomized-benchmarking-mirror-rb-mirror-rb-compute-polarizations"]], "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.generate_fixed_depth_mrb_circuits": [[137, "iqm-benchmarks-randomized-benchmarking-mirror-rb-mirror-rb-generate-fixed-depth-mrb-circuits"]], "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.generate_pauli_dressed_mrb_circuits": [[138, "iqm-benchmarks-randomized-benchmarking-mirror-rb-mirror-rb-generate-pauli-dressed-mrb-circuits"]], "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.list_to_numcircuit_times_numpauli_matrix": [[139, "iqm-benchmarks-randomized-benchmarking-mirror-rb-mirror-rb-list-to-numcircuit-times-numpauli-matrix"]], "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.mrb_analysis": [[140, "iqm-benchmarks-randomized-benchmarking-mirror-rb-mirror-rb-mrb-analysis"]], "iqm.benchmarks.randomized_benchmarking.multi_lmfit": [[141, "module-iqm.benchmarks.randomized_benchmarking.multi_lmfit"]], "iqm.benchmarks.randomized_benchmarking.multi_lmfit.create_multi_dataset_params": [[142, "iqm-benchmarks-randomized-benchmarking-multi-lmfit-create-multi-dataset-params"]], "iqm.benchmarks.randomized_benchmarking.multi_lmfit.eval_func_single_dataset": [[143, "iqm-benchmarks-randomized-benchmarking-multi-lmfit-eval-func-single-dataset"]], "iqm.benchmarks.randomized_benchmarking.multi_lmfit.get_param_names_from_func_signature": [[144, "iqm-benchmarks-randomized-benchmarking-multi-lmfit-get-param-names-from-func-signature"]], "iqm.benchmarks.randomized_benchmarking.multi_lmfit.multi_dataset_residual": [[145, "iqm-benchmarks-randomized-benchmarking-multi-lmfit-multi-dataset-residual"]], "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common": [[146, "module-iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common"]], "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.compute_inverse_clifford": [[147, "iqm-benchmarks-randomized-benchmarking-randomized-benchmarking-common-compute-inverse-clifford"]], "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.edge_grab": [[148, "iqm-benchmarks-randomized-benchmarking-randomized-benchmarking-common-edge-grab"]], "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.estimate_survival_probabilities": [[149, "iqm-benchmarks-randomized-benchmarking-randomized-benchmarking-common-estimate-survival-probabilities"]], "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.exponential_rb": [[150, "iqm-benchmarks-randomized-benchmarking-randomized-benchmarking-common-exponential-rb"]], "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.fit_decay_lmfit": [[151, "iqm-benchmarks-randomized-benchmarking-randomized-benchmarking-common-fit-decay-lmfit"]], "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.generate_all_rb_circuits": [[152, "iqm-benchmarks-randomized-benchmarking-randomized-benchmarking-common-generate-all-rb-circuits"]], "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.generate_fixed_depth_parallel_rb_circuits": [[153, "iqm-benchmarks-randomized-benchmarking-randomized-benchmarking-common-generate-fixed-depth-parallel-rb-circuits"]], "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.generate_random_clifford_seq_circuits": [[154, "iqm-benchmarks-randomized-benchmarking-randomized-benchmarking-common-generate-random-clifford-seq-circuits"]], "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.get_survival_probabilities": [[155, "iqm-benchmarks-randomized-benchmarking-randomized-benchmarking-common-get-survival-probabilities"]], "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.import_native_gate_cliffords": [[156, "iqm-benchmarks-randomized-benchmarking-randomized-benchmarking-common-import-native-gate-cliffords"]], "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.lmfit_minimizer": [[157, "iqm-benchmarks-randomized-benchmarking-randomized-benchmarking-common-lmfit-minimizer"]], "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.plot_rb_decay": [[158, "iqm-benchmarks-randomized-benchmarking-randomized-benchmarking-common-plot-rb-decay"]], "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.relabel_qubits_array_from_zero": [[159, "iqm-benchmarks-randomized-benchmarking-randomized-benchmarking-common-relabel-qubits-array-from-zero"]], "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.submit_parallel_rb_job": [[160, "iqm-benchmarks-randomized-benchmarking-randomized-benchmarking-common-submit-parallel-rb-job"]], "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.submit_sequential_rb_jobs": [[161, "iqm-benchmarks-randomized-benchmarking-randomized-benchmarking-common-submit-sequential-rb-jobs"]], "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.survival_probabilities_parallel": [[162, "iqm-benchmarks-randomized-benchmarking-randomized-benchmarking-common-survival-probabilities-parallel"]], "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.validate_irb_gate": [[163, "iqm-benchmarks-randomized-benchmarking-randomized-benchmarking-common-validate-irb-gate"]], "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.validate_rb_qubits": [[164, "iqm-benchmarks-randomized-benchmarking-randomized-benchmarking-common-validate-rb-qubits"]], "iqm.benchmarks.readout_mitigation": [[165, "module-iqm.benchmarks.readout_mitigation"]], "iqm.benchmarks.readout_mitigation.M3IQM": [[166, "iqm-benchmarks-readout-mitigation-m3iqm"]], "iqm.benchmarks.readout_mitigation.apply_readout_error_mitigation": [[167, "iqm-benchmarks-readout-mitigation-apply-readout-error-mitigation"]], "iqm.benchmarks.readout_mitigation.readout_error_m3": [[168, "iqm-benchmarks-readout-mitigation-readout-error-m3"]], "iqm.benchmarks.utils": [[169, "module-iqm.benchmarks.utils"]], "iqm.benchmarks.utils.bootstrap_counts": [[170, "iqm-benchmarks-utils-bootstrap-counts"]], "iqm.benchmarks.utils.count_2q_layers": [[171, "iqm-benchmarks-utils-count-2q-layers"]], "iqm.benchmarks.utils.count_native_gates": [[172, "iqm-benchmarks-utils-count-native-gates"]], "iqm.benchmarks.utils.extract_fidelities": [[173, "iqm-benchmarks-utils-extract-fidelities"]], "iqm.benchmarks.utils.generate_state_tomography_circuits": [[174, "iqm-benchmarks-utils-generate-state-tomography-circuits"]], "iqm.benchmarks.utils.get_Pauli_expectation": [[175, "iqm-benchmarks-utils-get-pauli-expectation"]], "iqm.benchmarks.utils.get_active_qubits": [[176, "iqm-benchmarks-utils-get-active-qubits"]], "iqm.benchmarks.utils.get_iqm_backend": [[177, "iqm-benchmarks-utils-get-iqm-backend"]], "iqm.benchmarks.utils.get_measurement_mapping": [[178, "iqm-benchmarks-utils-get-measurement-mapping"]], "iqm.benchmarks.utils.get_neighbors_of_edges": [[179, "iqm-benchmarks-utils-get-neighbors-of-edges"]], "iqm.benchmarks.utils.get_tomography_matrix": [[180, "iqm-benchmarks-utils-get-tomography-matrix"]], "iqm.benchmarks.utils.marginal_distribution": [[181, "iqm-benchmarks-utils-marginal-distribution"]], "iqm.benchmarks.utils.median_with_uncertainty": [[182, "iqm-benchmarks-utils-median-with-uncertainty"]], "iqm.benchmarks.utils.perform_backend_transpilation": [[183, "iqm-benchmarks-utils-perform-backend-transpilation"]], "iqm.benchmarks.utils.random_hamiltonian_path": [[184, "iqm-benchmarks-utils-random-hamiltonian-path"]], "iqm.benchmarks.utils.reduce_to_active_qubits": [[185, "iqm-benchmarks-utils-reduce-to-active-qubits"]], "iqm.benchmarks.utils.remove_directed_duplicates_to_list": [[186, "iqm-benchmarks-utils-remove-directed-duplicates-to-list"]], "iqm.benchmarks.utils.retrieve_all_counts": [[187, "iqm-benchmarks-utils-retrieve-all-counts"]], "iqm.benchmarks.utils.retrieve_all_job_metadata": [[188, "iqm-benchmarks-utils-retrieve-all-job-metadata"]], "iqm.benchmarks.utils.set_coupling_map": [[189, "iqm-benchmarks-utils-set-coupling-map"]], "iqm.benchmarks.utils.sort_batches_by_final_layout": [[190, "iqm-benchmarks-utils-sort-batches-by-final-layout"]], "iqm.benchmarks.utils.split_into_disjoint_pairs": [[191, "iqm-benchmarks-utils-split-into-disjoint-pairs"]], "iqm.benchmarks.utils.split_sequence_in_chunks": [[192, "iqm-benchmarks-utils-split-sequence-in-chunks"]], "iqm.benchmarks.utils.submit_execute": [[193, "iqm-benchmarks-utils-submit-execute"]], "iqm.benchmarks.utils.timeit": [[194, "iqm-benchmarks-utils-timeit"]], "iqm.benchmarks.utils.xrvariable_to_counts": [[195, "iqm-benchmarks-utils-xrvariable-to-counts"]], "iqm.benchmarks.utils_plots": [[196, "module-iqm.benchmarks.utils_plots"]], "iqm.benchmarks.utils_plots.GraphPositions": [[197, "iqm-benchmarks-utils-plots-graphpositions"]], "iqm.benchmarks.utils_plots.calculate_node_radii": [[198, "iqm-benchmarks-utils-plots-calculate-node-radii"]], "iqm.benchmarks.utils_plots.draw_graph_edges": [[199, "iqm-benchmarks-utils-plots-draw-graph-edges"]], "iqm.benchmarks.utils_plots.evaluate_hamiltonian_paths": [[200, "iqm-benchmarks-utils-plots-evaluate-hamiltonian-paths"]], "iqm.benchmarks.utils_plots.plot_layout_fidelity_graph": [[201, "iqm-benchmarks-utils-plots-plot-layout-fidelity-graph"]], "iqm.benchmarks.utils_plots.rx_to_nx_graph": [[202, "iqm-benchmarks-utils-plots-rx-to-nx-graph"]], "iqm.benchmarks.utils_shadows": [[203, "module-iqm.benchmarks.utils_shadows"]], "iqm.benchmarks.utils_shadows.CUE": [[204, "iqm-benchmarks-utils-shadows-cue"]], "iqm.benchmarks.utils_shadows.get_local_shadow": [[205, "iqm-benchmarks-utils-shadows-get-local-shadow"]], "iqm.benchmarks.utils_shadows.get_negativity": [[206, "iqm-benchmarks-utils-shadows-get-negativity"]], "iqm.benchmarks.utils_shadows.local_shadow_tomography": [[207, "iqm-benchmarks-utils-shadows-local-shadow-tomography"]], "Changelog": [[208, "changelog"]], "Version 2.44": [[208, "version-2-44"]], "Version 2.43": [[208, "version-2-43"]], "Version 2.42": [[208, "version-2-42"]], "Version 2.41": [[208, "version-2-41"]], "Version 2.40": [[208, "version-2-40"]], "Version 2.39": [[208, "version-2-39"]], "Version 2.38": [[208, "version-2-38"]], "Version 2.37": [[208, "version-2-37"]], "Version 2.36": [[208, "version-2-36"]], "Version 2.35": [[208, "version-2-35"]], "Version 2.34": [[208, "version-2-34"]], "Version 2.33": [[208, "version-2-33"]], "Version 2.32": [[208, "version-2-32"]], "Version 2.31": [[208, "version-2-31"]], "Version 2.30": [[208, "version-2-30"]], "Version 2.29": [[208, "version-2-29"]], "Version 2.28": [[208, "version-2-28"]], "Version 2.27": [[208, "version-2-27"]], "Version 2.26": [[208, "version-2-26"]], "Version 2.25": [[208, "version-2-25"]], "Version 2.24": [[208, "version-2-24"]], "Version 2.23": [[208, "version-2-23"]], "Version 2.22": [[208, "version-2-22"]], "Version 2.21": [[208, "version-2-21"]], "Version 2.20": [[208, "version-2-20"]], "Version 2.19": [[208, "version-2-19"]], "Version 2.18": [[208, "version-2-18"]], "Version 2.17": [[208, "version-2-17"]], "Version 2.16": [[208, "version-2-16"]], "Version 2.15": [[208, "version-2-15"]], "Version 2.14": [[208, "version-2-14"]], "Version 2.13": [[208, "version-2-13"]], "Version 2.12": [[208, "version-2-12"]], "Version 2.11": [[208, "version-2-11"]], "Version 2.10": [[208, "version-2-10"]], "Version 2.9": [[208, "version-2-9"]], "Version 2.8": [[208, "version-2-8"]], "Version 2.7": [[208, "version-2-7"]], "Version 2.6": [[208, "version-2-6"]], "Version 2.5": [[208, "version-2-5"]], "Version 2.4": [[208, "version-2-4"]], "Version 2.3": [[208, "version-2-3"]], "Version 2.2": [[208, "version-2-2"]], "Version 2.1": [[208, "version-2-1"]], "Version 2.0": [[208, "version-2-0"]], "Version 1.12": [[208, "version-1-12"]], "Version 1.11": [[208, "version-1-11"]], "Version 1.10": [[208, "version-1-10"]], "Version 1.9": [[208, "version-1-9"]], "Version 1.8": [[208, "version-1-8"]], "Version 1.7": [[208, "version-1-7"]], "Version 1.6": [[208, "version-1-6"]], "Version 1.5": [[208, "version-1-5"]], "Version 1.4": [[208, "version-1-4"]], "Version 1.3": [[208, "version-1-3"]], "Version 1.2": [[208, "version-1-2"]], "Version 1.1": [[208, "version-1-1"]], "Version 1.0": [[208, "version-1-0"]], "Development": [[209, "development"]], "2-Qubit Clifford Group Decomposition": [[210, "qubit-clifford-group-decomposition"]], "Generate the 1Q Clifford group": [[210, "generate-the-1q-clifford-group"]], "Generate the 2Q Clifford group": [[210, "generate-the-2q-clifford-group"]], "Dump on a pickle file": [[210, "dump-on-a-pickle-file"]], "Load": [[210, "load"]], "Count elements": [[210, "count-elements"]], "2Q": [[210, "q"]], "1Q": [[210, "id1"]], "A way to work out the inverse of sequences": [[210, "a-way-to-work-out-the-inverse-of-sequences"]], "2-design condition": [[210, "design-condition"]], "How to make your own benchmark?": [[211, "how-to-make-your-own-benchmark"]], "Devices": [[212, "devices"]], "Benchmarking IQM Spark": [[213, "benchmarking-iqm-spark"]], "Connect to the backend": [[213, "connect-to-the-backend"], [214, "connect-to-the-backend"]], "GHZ state fidelity": [[213, "ghz-state-fidelity"], [214, "ghz-state-fidelity"], [219, "ghz-state-fidelity"]], "Quantum Volume": [[213, "quantum-volume"], [214, "quantum-volume"], [219, "quantum-volume"]], "Circuit Layer Operations Per Second (CLOPS)": [[213, "circuit-layer-operations-per-second-clops"], [214, "circuit-layer-operations-per-second-clops"], [216, "circuit-layer-operations-per-second-clops"]], "Clifford Randomized Benchmarking": [[213, "clifford-randomized-benchmarking"], [219, "clifford-randomized-benchmarking"]], "Interleaved Randomized Benchmarking (IRB)": [[213, "interleaved-randomized-benchmarking-irb"], [223, "interleaved-randomized-benchmarking-irb"]], "Q-Score": [[213, "q-score"], [214, "q-score"], [225, "q-score"]], "Summary": [[213, "summary"], [214, "summary"]], "Benchmarking IQM Star": [[214, "benchmarking-iqm-star"]], "Clifford Randomized Benchmarking (CRB)": [[215, "clifford-randomized-benchmarking-crb"]], "Choose (or define) a backend": [[215, "choose-or-define-a-backend"], [216, "choose-or-define-a-backend"], [217, "choose-or-define-a-backend"], [218, "choose-or-define-a-backend"], [219, "choose-or-define-a-backend"], [221, "choose-or-define-a-backend"], [222, "choose-or-define-a-backend"], [223, "choose-or-define-a-backend"], [224, "choose-or-define-a-backend"], [225, "choose-or-define-a-backend"], [226, "choose-or-define-a-backend"]], "Set IQM Token if using Resonance.": [[215, "set-iqm-token-if-using-resonance"], [218, "set-iqm-token-if-using-resonance"], [219, "set-iqm-token-if-using-resonance"], [224, "set-iqm-token-if-using-resonance"], [225, "set-iqm-token-if-using-resonance"], [226, "set-iqm-token-if-using-resonance"]], "Randomized Benchmarking Configuration": [[215, "randomized-benchmarking-configuration"], [218, "randomized-benchmarking-configuration"]], "Run the experiment": [[215, "run-the-experiment"], [216, "run-the-experiment"], [217, "run-the-experiment"], [218, "run-the-experiment"], [221, "run-the-experiment"], [224, "run-the-experiment"], [225, "run-the-experiment"], [226, "run-the-experiment"]], "Perform the analysis": [[215, "perform-the-analysis"], [218, "perform-the-analysis"]], "Set IQM Token if using Resonance": [[216, "set-iqm-token-if-using-resonance"]], "CLOPS Configuration": [[216, "clops-configuration"]], "Perform Analysis": [[216, "perform-analysis"], [221, "perform-analysis"], [225, "perform-analysis"], [226, "perform-analysis"]], "List all the keys in the attributes of the dataset": [[216, "list-all-the-keys-in-the-attributes-of-the-dataset"], [224, "list-all-the-keys-in-the-attributes-of-the-dataset"]], "The observation object contains the benchmark results": [[216, "the-observation-object-contains-the-benchmark-results"], [224, "the-observation-object-contains-the-benchmark-results"]], "Generate plots": [[216, "generate-plots"], [224, "generate-plots"], [226, "generate-plots"]], "Coherence experiments": [[217, "coherence-experiments"]], "Coherence Configuration": [[217, "coherence-configuration"]], "Perform analysis and plot results": [[217, "perform-analysis-and-plot-results"]], "Error Per Layered Gate (EPLG)": [[218, "error-per-layered-gate-eplg"]], "Inspect all the fidelities and the final EPLG": [[218, "inspect-all-the-fidelities-and-the-final-eplg"]], "Plot a visualization of the selected layers and all the DRB decays": [[218, "plot-a-visualization-of-the-selected-layers-and-all-the-drb-decays"]], "Inspect a sample circuit (parallel DRB)": [[218, "inspect-a-sample-circuit-parallel-drb"]], "IQM Benchmarks: Summary Notebook": [[219, "iqm-benchmarks-summary-notebook"]], "Interleaved Randomized Benchmarking": [[219, "interleaved-randomized-benchmarking"]], "Mirror Randomized Benchmarking": [[219, "mirror-randomized-benchmarking"]], "CLOPS": [[219, "clops"]], "QScore": [[219, "qscore"]], "Greenberger\u2013Horne\u2013Zeilinger (GHZ) State Fidelity": [[220, "greenbergerhornezeilinger-ghz-state-fidelity"]], "Definition of the benchmark configuration": [[220, "definition-of-the-benchmark-configuration"]], "Running the benchmark": [[220, "running-the-benchmark"]], "Accessing the results": [[220, "accessing-the-results"]], "Graph State Bipartite Entanglement": [[221, "graph-state-bipartite-entanglement"]], "Graph State Configuration": [[221, "graph-state-configuration"]], "Display the maximum negativity for all qubit pairs": [[221, "display-the-maximum-negativity-for-all-qubit-pairs"]], "Inspect the available plots": [[221, "inspect-the-available-plots"]], "Display all available dataset attributes": [[221, "display-all-available-dataset-attributes"]], "If using state tomography: inspect the bootstrap bias (difference between each bootstrap mean and the measured sample)": [[221, "if-using-state-tomography-inspect-the-bootstrap-bias-difference-between-each-bootstrap-mean-and-the-measured-sample"]], "Inspect a graph state for some particular Pauli measurement": [[221, "inspect-a-graph-state-for-some-particular-pauli-measurement"]], "Compressive Gate Set Tomography (GST)": [[222, "compressive-gate-set-tomography-gst"]], "Minimal GST Experiment configurations": [[222, "minimal-gst-experiment-configurations"]], "Execute GST Experiment(s)": [[222, "execute-gst-experiment-s"]], "Examine the results": [[222, "examine-the-results"]], "High level results stored at result.observations": [[222, "high-level-results-stored-at-result-observations"]], "Accessing the final gate set estimates for further processing": [[222, "accessing-the-final-gate-set-estimates-for-further-processing"]], "Plots": [[222, "plots"]], "Creating a custom gate set": [[222, "creating-a-custom-gate-set"]], "Checking out the process matrix corresponding to the pi rotation around the y-axis": [[222, "checking-out-the-process-matrix-corresponding-to-the-pi-rotation-around-the-y-axis"]], "All plots for the custom gate set": [[222, "all-plots-for-the-custom-gate-set"]], "Interleaved Randomized Benchmarking Configuration": [[223, "interleaved-randomized-benchmarking-configuration"]], "1Q gate IRB": [[223, "q-gate-irb"]], "Run the experiment - 1Q gate IRB": [[223, "run-the-experiment-1q-gate-irb"]], "Analyze the results - 1Q gate IRB": [[223, "analyze-the-results-1q-gate-irb"]], "2Q gate IRB": [[223, "id1"]], "Run the experiment - 2Q gate IRB": [[223, "run-the-experiment-2q-gate-irb"]], "Analyze the results - 2Q gate IRB": [[223, "analyze-the-results-2q-gate-irb"]], "IRB for non-native gate": [[223, "irb-for-non-native-gate"]], "Mirror Randomized Benchmarking (MRB)": [[224, "mirror-randomized-benchmarking-mrb"]], "Mirror RB Configuration": [[224, "mirror-rb-configuration"]], "Analyze the results": [[224, "analyze-the-results"]], "Qscore Configuration": [[225, "qscore-configuration"]], "Quantum Volume (QV)": [[226, "quantum-volume-qv"]], "Quantum Volume Configuration": [[226, "quantum-volume-configuration"]], "Examples": [[227, "examples"]], "IQM Benchmarks": [[228, "iqm-benchmarks"], [230, "iqm-benchmarks"]], "Contents": [[228, "contents"]], "Indices and tables": [[228, "indices-and-tables"]], "License": [[229, "license"]], "Installation (latest release)": [[230, "installation-latest-release"]], "Optional dependencies": [[230, "optional-dependencies"]], "Development installation (latest changes)": [[230, "development-installation-latest-changes"]], "Characterize Physical Hardware": [[230, "characterize-physical-hardware"]], "Using a Jupyter notebook or Python script": [[230, "using-a-jupyter-notebook-or-python-script"]], "Scheduled benchmarks using a CI/CD Pipeline": [[230, "scheduled-benchmarks-using-a-ci-cd-pipeline"]]}, "indexentries": {"iqm.benchmarks": [[1, "module-iqm.benchmarks"]], "module": [[1, "module-iqm.benchmarks"], [2, "module-iqm.benchmarks.benchmark"], [5, "module-iqm.benchmarks.benchmark_definition"], [15, "module-iqm.benchmarks.circuit_containers"], [19, "module-iqm.benchmarks.coherence"], [20, "module-iqm.benchmarks.coherence.coherence"], [28, "module-iqm.benchmarks.compressive_gst"], [29, "module-iqm.benchmarks.compressive_gst.compressive_gst"], [35, "module-iqm.benchmarks.compressive_gst.gst_analysis"], [47, "module-iqm.benchmarks.entanglement"], [48, "module-iqm.benchmarks.entanglement.ghz"], [62, "module-iqm.benchmarks.entanglement.graph_states"], [75, "module-iqm.benchmarks.logging_config"], [76, "module-iqm.benchmarks.optimization"], [77, "module-iqm.benchmarks.optimization.qscore"], [89, "module-iqm.benchmarks.quantum_volume"], [90, "module-iqm.benchmarks.quantum_volume.clops"], [96, "module-iqm.benchmarks.quantum_volume.quantum_volume"], [108, "module-iqm.benchmarks.randomized_benchmarking"], [109, "module-iqm.benchmarks.randomized_benchmarking.clifford_rb"], [110, "module-iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb"], [114, "module-iqm.benchmarks.randomized_benchmarking.direct_rb"], [115, "module-iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb"], [121, "module-iqm.benchmarks.randomized_benchmarking.eplg"], [122, "module-iqm.benchmarks.randomized_benchmarking.eplg.eplg"], [127, "module-iqm.benchmarks.randomized_benchmarking.interleaved_rb"], [128, "module-iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb"], [132, "module-iqm.benchmarks.randomized_benchmarking.mirror_rb"], [133, "module-iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb"], [141, "module-iqm.benchmarks.randomized_benchmarking.multi_lmfit"], [146, "module-iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common"], [165, "module-iqm.benchmarks.readout_mitigation"], [169, "module-iqm.benchmarks.utils"], [196, "module-iqm.benchmarks.utils_plots"], [203, "module-iqm.benchmarks.utils_shadows"]], "iqm.benchmarks.benchmark": [[2, "module-iqm.benchmarks.benchmark"]], "benchmarkbase (class in iqm.benchmarks.benchmark)": [[3, "iqm.benchmarks.benchmark.BenchmarkBase"]], "check_requirements() (iqm.benchmarks.benchmark.benchmarkbase static method)": [[3, "iqm.benchmarks.benchmark.BenchmarkBase.check_requirements"]], "execute_full_benchmark() (iqm.benchmarks.benchmark.benchmarkbase method)": [[3, "iqm.benchmarks.benchmark.BenchmarkBase.execute_full_benchmark"]], "generate_requirements() (iqm.benchmarks.benchmark.benchmarkbase method)": [[3, "iqm.benchmarks.benchmark.BenchmarkBase.generate_requirements"]], "name() (iqm.benchmarks.benchmark.benchmarkbase class method)": [[3, "iqm.benchmarks.benchmark.BenchmarkBase.name"]], "benchmarkconfigurationbase (class in iqm.benchmarks.benchmark)": [[4, "iqm.benchmarks.benchmark.BenchmarkConfigurationBase"]], "benchmark (iqm.benchmarks.benchmark.benchmarkconfigurationbase attribute)": [[4, "iqm.benchmarks.benchmark.BenchmarkConfigurationBase.benchmark"]], "calset_id (iqm.benchmarks.benchmark.benchmarkconfigurationbase attribute)": [[4, "iqm.benchmarks.benchmark.BenchmarkConfigurationBase.calset_id"]], "max_circuits_per_batch (iqm.benchmarks.benchmark.benchmarkconfigurationbase attribute)": [[4, "iqm.benchmarks.benchmark.BenchmarkConfigurationBase.max_circuits_per_batch"]], "max_gates_per_batch (iqm.benchmarks.benchmark.benchmarkconfigurationbase attribute)": [[4, "iqm.benchmarks.benchmark.BenchmarkConfigurationBase.max_gates_per_batch"]], "model_config (iqm.benchmarks.benchmark.benchmarkconfigurationbase attribute)": [[4, "iqm.benchmarks.benchmark.BenchmarkConfigurationBase.model_config"]], "physical_layout (iqm.benchmarks.benchmark.benchmarkconfigurationbase attribute)": [[4, "iqm.benchmarks.benchmark.BenchmarkConfigurationBase.physical_layout"]], "routing_method (iqm.benchmarks.benchmark.benchmarkconfigurationbase attribute)": [[4, "iqm.benchmarks.benchmark.BenchmarkConfigurationBase.routing_method"]], "shots (iqm.benchmarks.benchmark.benchmarkconfigurationbase attribute)": [[4, "iqm.benchmarks.benchmark.BenchmarkConfigurationBase.shots"]], "use_dd (iqm.benchmarks.benchmark.benchmarkconfigurationbase attribute)": [[4, "iqm.benchmarks.benchmark.BenchmarkConfigurationBase.use_dd"]], "iqm.benchmarks.benchmark_definition": [[5, "module-iqm.benchmarks.benchmark_definition"]], "benchmark (class in iqm.benchmarks.benchmark_definition)": [[6, "iqm.benchmarks.benchmark_definition.Benchmark"]], "analysis_function() (iqm.benchmarks.benchmark_definition.benchmark static method)": [[6, "iqm.benchmarks.benchmark_definition.Benchmark.analysis_function"]], "analyze() (iqm.benchmarks.benchmark_definition.benchmark method)": [[6, "iqm.benchmarks.benchmark_definition.Benchmark.analyze"]], "execute() (iqm.benchmarks.benchmark_definition.benchmark method)": [[6, "iqm.benchmarks.benchmark_definition.Benchmark.execute"]], "name() (iqm.benchmarks.benchmark_definition.benchmark class method)": [[6, "iqm.benchmarks.benchmark_definition.Benchmark.name"]], "run() (iqm.benchmarks.benchmark_definition.benchmark method)": [[6, "iqm.benchmarks.benchmark_definition.Benchmark.run"]], "benchmarkanalysisresult (class in iqm.benchmarks.benchmark_definition)": [[7, "iqm.benchmarks.benchmark_definition.BenchmarkAnalysisResult"]], "from_run_result() (iqm.benchmarks.benchmark_definition.benchmarkanalysisresult class method)": [[7, "iqm.benchmarks.benchmark_definition.BenchmarkAnalysisResult.from_run_result"]], "plot() (iqm.benchmarks.benchmark_definition.benchmarkanalysisresult method)": [[7, "iqm.benchmarks.benchmark_definition.BenchmarkAnalysisResult.plot"]], "plot_all() (iqm.benchmarks.benchmark_definition.benchmarkanalysisresult method)": [[7, "iqm.benchmarks.benchmark_definition.BenchmarkAnalysisResult.plot_all"]], "benchmarkobservation (class in iqm.benchmarks.benchmark_definition)": [[8, "iqm.benchmarks.benchmark_definition.BenchmarkObservation"]], "identifier (iqm.benchmarks.benchmark_definition.benchmarkobservation attribute)": [[8, "iqm.benchmarks.benchmark_definition.BenchmarkObservation.identifier"]], "name (iqm.benchmarks.benchmark_definition.benchmarkobservation attribute)": [[8, "iqm.benchmarks.benchmark_definition.BenchmarkObservation.name"]], "uncertainty (iqm.benchmarks.benchmark_definition.benchmarkobservation attribute)": [[8, "iqm.benchmarks.benchmark_definition.BenchmarkObservation.uncertainty"]], "value (iqm.benchmarks.benchmark_definition.benchmarkobservation attribute)": [[8, "iqm.benchmarks.benchmark_definition.BenchmarkObservation.value"]], "benchmarkobservationidentifier (class in iqm.benchmarks.benchmark_definition)": [[9, "iqm.benchmarks.benchmark_definition.BenchmarkObservationIdentifier"]], "qubit_indices (iqm.benchmarks.benchmark_definition.benchmarkobservationidentifier attribute)": [[9, "iqm.benchmarks.benchmark_definition.BenchmarkObservationIdentifier.qubit_indices"]], "string_identifier (iqm.benchmarks.benchmark_definition.benchmarkobservationidentifier property)": [[9, "iqm.benchmarks.benchmark_definition.BenchmarkObservationIdentifier.string_identifier"]], "benchmarkrunresult (class in iqm.benchmarks.benchmark_definition)": [[10, "iqm.benchmarks.benchmark_definition.BenchmarkRunResult"]], "add_counts_to_dataset() (in module iqm.benchmarks.benchmark_definition)": [[11, "iqm.benchmarks.benchmark_definition.add_counts_to_dataset"]], "default_analysis_function() (in module iqm.benchmarks.benchmark_definition)": [[12, "iqm.benchmarks.benchmark_definition.default_analysis_function"]], "merge_datasets_dac() (in module iqm.benchmarks.benchmark_definition)": [[13, "iqm.benchmarks.benchmark_definition.merge_datasets_dac"]], "show_figure() (in module iqm.benchmarks.benchmark_definition)": [[14, "iqm.benchmarks.benchmark_definition.show_figure"]], "iqm.benchmarks.circuit_containers": [[15, "module-iqm.benchmarks.circuit_containers"]], "benchmarkcircuit (class in iqm.benchmarks.circuit_containers)": [[16, "iqm.benchmarks.circuit_containers.BenchmarkCircuit"]], "circuit_groups (iqm.benchmarks.circuit_containers.benchmarkcircuit attribute)": [[16, "iqm.benchmarks.circuit_containers.BenchmarkCircuit.circuit_groups"]], "get_circuit_group_by_name() (iqm.benchmarks.circuit_containers.benchmarkcircuit method)": [[16, "iqm.benchmarks.circuit_containers.BenchmarkCircuit.get_circuit_group_by_name"]], "group_names (iqm.benchmarks.circuit_containers.benchmarkcircuit property)": [[16, "iqm.benchmarks.circuit_containers.BenchmarkCircuit.group_names"]], "groups (iqm.benchmarks.circuit_containers.benchmarkcircuit property)": [[16, "iqm.benchmarks.circuit_containers.BenchmarkCircuit.groups"]], "name (iqm.benchmarks.circuit_containers.benchmarkcircuit attribute)": [[16, "iqm.benchmarks.circuit_containers.BenchmarkCircuit.name"]], "qubit_indices (iqm.benchmarks.circuit_containers.benchmarkcircuit property)": [[16, "iqm.benchmarks.circuit_containers.BenchmarkCircuit.qubit_indices"]], "qubit_layouts (iqm.benchmarks.circuit_containers.benchmarkcircuit property)": [[16, "iqm.benchmarks.circuit_containers.BenchmarkCircuit.qubit_layouts"]], "qubit_layouts_by_index (iqm.benchmarks.circuit_containers.benchmarkcircuit property)": [[16, "iqm.benchmarks.circuit_containers.BenchmarkCircuit.qubit_layouts_by_index"]], "qubits (iqm.benchmarks.circuit_containers.benchmarkcircuit property)": [[16, "iqm.benchmarks.circuit_containers.BenchmarkCircuit.qubits"]], "circuitgroup (class in iqm.benchmarks.circuit_containers)": [[17, "iqm.benchmarks.circuit_containers.CircuitGroup"]], "add_circuit() (iqm.benchmarks.circuit_containers.circuitgroup method)": [[17, "iqm.benchmarks.circuit_containers.CircuitGroup.add_circuit"]], "circuit_names (iqm.benchmarks.circuit_containers.circuitgroup property)": [[17, "iqm.benchmarks.circuit_containers.CircuitGroup.circuit_names"]], "circuits (iqm.benchmarks.circuit_containers.circuitgroup attribute)": [[17, "iqm.benchmarks.circuit_containers.CircuitGroup.circuits"]], "get_circuits_by_name() (iqm.benchmarks.circuit_containers.circuitgroup method)": [[17, "iqm.benchmarks.circuit_containers.CircuitGroup.get_circuits_by_name"]], "name (iqm.benchmarks.circuit_containers.circuitgroup attribute)": [[17, "iqm.benchmarks.circuit_containers.CircuitGroup.name"]], "qubit_layouts (iqm.benchmarks.circuit_containers.circuitgroup property)": [[17, "iqm.benchmarks.circuit_containers.CircuitGroup.qubit_layouts"]], "qubit_layouts_by_index (iqm.benchmarks.circuit_containers.circuitgroup property)": [[17, "iqm.benchmarks.circuit_containers.CircuitGroup.qubit_layouts_by_index"]], "qubits (iqm.benchmarks.circuit_containers.circuitgroup property)": [[17, "iqm.benchmarks.circuit_containers.CircuitGroup.qubits"]], "circuits (class in iqm.benchmarks.circuit_containers)": [[18, "iqm.benchmarks.circuit_containers.Circuits"]], "benchmark_circuits (iqm.benchmarks.circuit_containers.circuits attribute)": [[18, "iqm.benchmarks.circuit_containers.Circuits.benchmark_circuits"]], "get_benchmark_circuits_by_name() (iqm.benchmarks.circuit_containers.circuits method)": [[18, "iqm.benchmarks.circuit_containers.Circuits.get_benchmark_circuits_by_name"]], "iqm.benchmarks.coherence": [[19, "module-iqm.benchmarks.coherence"]], "iqm.benchmarks.coherence.coherence": [[20, "module-iqm.benchmarks.coherence.coherence"]], "coherencebenchmark (class in iqm.benchmarks.coherence.coherence)": [[21, "iqm.benchmarks.coherence.coherence.CoherenceBenchmark"]], "add_all_meta_to_dataset() (iqm.benchmarks.coherence.coherence.coherencebenchmark method)": [[21, "iqm.benchmarks.coherence.coherence.CoherenceBenchmark.add_all_meta_to_dataset"]], "analysis_function() (iqm.benchmarks.coherence.coherence.coherencebenchmark static method)": [[21, "iqm.benchmarks.coherence.coherence.CoherenceBenchmark.analysis_function"]], "checkerboard_groups_from_coupling() (iqm.benchmarks.coherence.coherence.coherencebenchmark method)": [[21, "iqm.benchmarks.coherence.coherence.CoherenceBenchmark.checkerboard_groups_from_coupling"]], "execute() (iqm.benchmarks.coherence.coherence.coherencebenchmark method)": [[21, "iqm.benchmarks.coherence.coherence.CoherenceBenchmark.execute"]], "generate_coherence_circuits() (iqm.benchmarks.coherence.coherence.coherencebenchmark method)": [[21, "iqm.benchmarks.coherence.coherence.CoherenceBenchmark.generate_coherence_circuits"]], "coherenceconfiguration (class in iqm.benchmarks.coherence.coherence)": [[22, "iqm.benchmarks.coherence.coherence.CoherenceConfiguration"]], "benchmark (iqm.benchmarks.coherence.coherence.coherenceconfiguration attribute)": [[22, "iqm.benchmarks.coherence.coherence.CoherenceConfiguration.benchmark"]], "coherence_exp (iqm.benchmarks.coherence.coherence.coherenceconfiguration attribute)": [[22, "iqm.benchmarks.coherence.coherence.CoherenceConfiguration.coherence_exp"]], "delays (iqm.benchmarks.coherence.coherence.coherenceconfiguration attribute)": [[22, "iqm.benchmarks.coherence.coherence.CoherenceConfiguration.delays"]], "model_config (iqm.benchmarks.coherence.coherence.coherenceconfiguration attribute)": [[22, "iqm.benchmarks.coherence.coherence.CoherenceConfiguration.model_config"]], "optimize_sqg (iqm.benchmarks.coherence.coherence.coherenceconfiguration attribute)": [[22, "iqm.benchmarks.coherence.coherence.CoherenceConfiguration.optimize_sqg"]], "qiskit_optim_level (iqm.benchmarks.coherence.coherence.coherenceconfiguration attribute)": [[22, "iqm.benchmarks.coherence.coherence.CoherenceConfiguration.qiskit_optim_level"]], "calculate_probabilities() (in module iqm.benchmarks.coherence.coherence)": [[23, "iqm.benchmarks.coherence.coherence.calculate_probabilities"]], "coherence_analysis() (in module iqm.benchmarks.coherence.coherence)": [[24, "iqm.benchmarks.coherence.coherence.coherence_analysis"]], "exp_decay() (in module iqm.benchmarks.coherence.coherence)": [[25, "iqm.benchmarks.coherence.coherence.exp_decay"]], "fit_coherence_model() (in module iqm.benchmarks.coherence.coherence)": [[26, "iqm.benchmarks.coherence.coherence.fit_coherence_model"]], "plot_coherence() (in module iqm.benchmarks.coherence.coherence)": [[27, "iqm.benchmarks.coherence.coherence.plot_coherence"]], "iqm.benchmarks.compressive_gst": [[28, "module-iqm.benchmarks.compressive_gst"]], "iqm.benchmarks.compressive_gst.compressive_gst": [[29, "module-iqm.benchmarks.compressive_gst.compressive_gst"]], "compressivegst (class in iqm.benchmarks.compressive_gst.compressive_gst)": [[30, "iqm.benchmarks.compressive_gst.compressive_gst.CompressiveGST"]], "add_configuration_to_dataset() (iqm.benchmarks.compressive_gst.compressive_gst.compressivegst method)": [[30, "iqm.benchmarks.compressive_gst.compressive_gst.CompressiveGST.add_configuration_to_dataset"]], "analysis_function() (iqm.benchmarks.compressive_gst.compressive_gst.compressivegst static method)": [[30, "iqm.benchmarks.compressive_gst.compressive_gst.CompressiveGST.analysis_function"]], "execute() (iqm.benchmarks.compressive_gst.compressive_gst.compressivegst method)": [[30, "iqm.benchmarks.compressive_gst.compressive_gst.CompressiveGST.execute"]], "generate_meas_circuits() (iqm.benchmarks.compressive_gst.compressive_gst.compressivegst method)": [[30, "iqm.benchmarks.compressive_gst.compressive_gst.CompressiveGST.generate_meas_circuits"]], "gstconfiguration (class in iqm.benchmarks.compressive_gst.compressive_gst)": [[31, "iqm.benchmarks.compressive_gst.compressive_gst.GSTConfiguration"]], "batch_size (iqm.benchmarks.compressive_gst.compressive_gst.gstconfiguration attribute)": [[31, "iqm.benchmarks.compressive_gst.compressive_gst.GSTConfiguration.batch_size"]], "benchmark (iqm.benchmarks.compressive_gst.compressive_gst.gstconfiguration attribute)": [[31, "iqm.benchmarks.compressive_gst.compressive_gst.GSTConfiguration.benchmark"]], "bootstrap_samples (iqm.benchmarks.compressive_gst.compressive_gst.gstconfiguration attribute)": [[31, "iqm.benchmarks.compressive_gst.compressive_gst.GSTConfiguration.bootstrap_samples"]], "convergence_criteria (iqm.benchmarks.compressive_gst.compressive_gst.gstconfiguration attribute)": [[31, "iqm.benchmarks.compressive_gst.compressive_gst.GSTConfiguration.convergence_criteria"]], "from_init (iqm.benchmarks.compressive_gst.compressive_gst.gstconfiguration attribute)": [[31, "iqm.benchmarks.compressive_gst.compressive_gst.GSTConfiguration.from_init"]], "gate_labels (iqm.benchmarks.compressive_gst.compressive_gst.gstconfiguration attribute)": [[31, "iqm.benchmarks.compressive_gst.compressive_gst.GSTConfiguration.gate_labels"]], "gate_set (iqm.benchmarks.compressive_gst.compressive_gst.gstconfiguration attribute)": [[31, "iqm.benchmarks.compressive_gst.compressive_gst.GSTConfiguration.gate_set"]], "max_inits (iqm.benchmarks.compressive_gst.compressive_gst.gstconfiguration attribute)": [[31, "iqm.benchmarks.compressive_gst.compressive_gst.GSTConfiguration.max_inits"]], "max_iterations (iqm.benchmarks.compressive_gst.compressive_gst.gstconfiguration attribute)": [[31, "iqm.benchmarks.compressive_gst.compressive_gst.GSTConfiguration.max_iterations"]], "model_config (iqm.benchmarks.compressive_gst.compressive_gst.gstconfiguration attribute)": [[31, "iqm.benchmarks.compressive_gst.compressive_gst.GSTConfiguration.model_config"]], "num_circuits (iqm.benchmarks.compressive_gst.compressive_gst.gstconfiguration attribute)": [[31, "iqm.benchmarks.compressive_gst.compressive_gst.GSTConfiguration.num_circuits"]], "opt_method (iqm.benchmarks.compressive_gst.compressive_gst.gstconfiguration attribute)": [[31, "iqm.benchmarks.compressive_gst.compressive_gst.GSTConfiguration.opt_method"]], "parallel_execution (iqm.benchmarks.compressive_gst.compressive_gst.gstconfiguration attribute)": [[31, "iqm.benchmarks.compressive_gst.compressive_gst.GSTConfiguration.parallel_execution"]], "qubit_layouts (iqm.benchmarks.compressive_gst.compressive_gst.gstconfiguration attribute)": [[31, "iqm.benchmarks.compressive_gst.compressive_gst.GSTConfiguration.qubit_layouts"]], "rank (iqm.benchmarks.compressive_gst.compressive_gst.gstconfiguration attribute)": [[31, "iqm.benchmarks.compressive_gst.compressive_gst.GSTConfiguration.rank"]], "seq_len_list (iqm.benchmarks.compressive_gst.compressive_gst.gstconfiguration attribute)": [[31, "iqm.benchmarks.compressive_gst.compressive_gst.GSTConfiguration.seq_len_list"]], "shots (iqm.benchmarks.compressive_gst.compressive_gst.gstconfiguration attribute)": [[31, "iqm.benchmarks.compressive_gst.compressive_gst.GSTConfiguration.shots"]], "create_predefined_gate_set() (in module iqm.benchmarks.compressive_gst.compressive_gst)": [[32, "iqm.benchmarks.compressive_gst.compressive_gst.create_predefined_gate_set"]], "parse_gate_set() (in module iqm.benchmarks.compressive_gst.compressive_gst)": [[33, "iqm.benchmarks.compressive_gst.compressive_gst.parse_gate_set"]], "parse_layouts() (in module iqm.benchmarks.compressive_gst.compressive_gst)": [[34, "iqm.benchmarks.compressive_gst.compressive_gst.parse_layouts"]], "iqm.benchmarks.compressive_gst.gst_analysis": [[35, "module-iqm.benchmarks.compressive_gst.gst_analysis"]], "bootstrap_errors() (in module iqm.benchmarks.compressive_gst.gst_analysis)": [[36, "iqm.benchmarks.compressive_gst.gst_analysis.bootstrap_errors"]], "dataframe_to_figure() (in module iqm.benchmarks.compressive_gst.gst_analysis)": [[37, "iqm.benchmarks.compressive_gst.gst_analysis.dataframe_to_figure"]], "dataset_counts_to_mgst_format() (in module iqm.benchmarks.compressive_gst.gst_analysis)": [[38, "iqm.benchmarks.compressive_gst.gst_analysis.dataset_counts_to_mgst_format"]], "generate_basis_labels() (in module iqm.benchmarks.compressive_gst.gst_analysis)": [[39, "iqm.benchmarks.compressive_gst.gst_analysis.generate_basis_labels"]], "generate_gate_results() (in module iqm.benchmarks.compressive_gst.gst_analysis)": [[40, "iqm.benchmarks.compressive_gst.gst_analysis.generate_gate_results"]], "generate_non_gate_results() (in module iqm.benchmarks.compressive_gst.gst_analysis)": [[41, "iqm.benchmarks.compressive_gst.gst_analysis.generate_non_gate_results"]], "generate_unit_rank_gate_results() (in module iqm.benchmarks.compressive_gst.gst_analysis)": [[42, "iqm.benchmarks.compressive_gst.gst_analysis.generate_unit_rank_gate_results"]], "mgst_analysis() (in module iqm.benchmarks.compressive_gst.gst_analysis)": [[43, "iqm.benchmarks.compressive_gst.gst_analysis.mgst_analysis"]], "pandas_results_to_observations() (in module iqm.benchmarks.compressive_gst.gst_analysis)": [[44, "iqm.benchmarks.compressive_gst.gst_analysis.pandas_results_to_observations"]], "result_str_to_floats() (in module iqm.benchmarks.compressive_gst.gst_analysis)": [[45, "iqm.benchmarks.compressive_gst.gst_analysis.result_str_to_floats"]], "run_mgst_wrapper() (in module iqm.benchmarks.compressive_gst.gst_analysis)": [[46, "iqm.benchmarks.compressive_gst.gst_analysis.run_mGST_wrapper"]], "iqm.benchmarks.entanglement": [[47, "module-iqm.benchmarks.entanglement"]], "iqm.benchmarks.entanglement.ghz": [[48, "module-iqm.benchmarks.entanglement.ghz"]], "ghzbenchmark (class in iqm.benchmarks.entanglement.ghz)": [[49, "iqm.benchmarks.entanglement.ghz.GHZBenchmark"]], "add_configuration_to_dataset() (iqm.benchmarks.entanglement.ghz.ghzbenchmark method)": [[49, "iqm.benchmarks.entanglement.ghz.GHZBenchmark.add_configuration_to_dataset"]], "analysis_function() (iqm.benchmarks.entanglement.ghz.ghzbenchmark static method)": [[49, "iqm.benchmarks.entanglement.ghz.GHZBenchmark.analysis_function"]], "append_rms() (iqm.benchmarks.entanglement.ghz.ghzbenchmark method)": [[49, "iqm.benchmarks.entanglement.ghz.GHZBenchmark.append_rms"]], "execute() (iqm.benchmarks.entanglement.ghz.ghzbenchmark method)": [[49, "iqm.benchmarks.entanglement.ghz.GHZBenchmark.execute"]], "generate_coherence_meas_circuits() (iqm.benchmarks.entanglement.ghz.ghzbenchmark method)": [[49, "iqm.benchmarks.entanglement.ghz.GHZBenchmark.generate_coherence_meas_circuits"]], "generate_native_ghz() (iqm.benchmarks.entanglement.ghz.ghzbenchmark method)": [[49, "iqm.benchmarks.entanglement.ghz.GHZBenchmark.generate_native_ghz"]], "generate_readout_circuit() (iqm.benchmarks.entanglement.ghz.ghzbenchmark method)": [[49, "iqm.benchmarks.entanglement.ghz.GHZBenchmark.generate_readout_circuit"]], "ghzconfiguration (class in iqm.benchmarks.entanglement.ghz)": [[50, "iqm.benchmarks.entanglement.ghz.GHZConfiguration"]], "benchmark (iqm.benchmarks.entanglement.ghz.ghzconfiguration attribute)": [[50, "iqm.benchmarks.entanglement.ghz.GHZConfiguration.benchmark"]], "cal_url (iqm.benchmarks.entanglement.ghz.ghzconfiguration attribute)": [[50, "iqm.benchmarks.entanglement.ghz.GHZConfiguration.cal_url"]], "custom_qubits_array (iqm.benchmarks.entanglement.ghz.ghzconfiguration attribute)": [[50, "iqm.benchmarks.entanglement.ghz.GHZConfiguration.custom_qubits_array"]], "fidelity_routine (iqm.benchmarks.entanglement.ghz.ghzconfiguration attribute)": [[50, "iqm.benchmarks.entanglement.ghz.GHZConfiguration.fidelity_routine"]], "mit_shots (iqm.benchmarks.entanglement.ghz.ghzconfiguration attribute)": [[50, "iqm.benchmarks.entanglement.ghz.GHZConfiguration.mit_shots"]], "model_config (iqm.benchmarks.entanglement.ghz.ghzconfiguration attribute)": [[50, "iqm.benchmarks.entanglement.ghz.GHZConfiguration.model_config"]], "num_rms (iqm.benchmarks.entanglement.ghz.ghzconfiguration attribute)": [[50, "iqm.benchmarks.entanglement.ghz.GHZConfiguration.num_RMs"]], "optimize_single_qubit_gates (iqm.benchmarks.entanglement.ghz.ghzconfiguration.iqm.qiskit_iqm.iqm_transpilation attribute)": [[50, "iqm.benchmarks.entanglement.ghz.GHZConfiguration.iqm.qiskit_iqm.iqm_transpilation.optimize_single_qubit_gates"]], "optimize_sqg (iqm.benchmarks.entanglement.ghz.ghzconfiguration attribute)": [[50, "iqm.benchmarks.entanglement.ghz.GHZConfiguration.optimize_sqg"]], "qiskit_optim_level (iqm.benchmarks.entanglement.ghz.ghzconfiguration attribute)": [[50, "iqm.benchmarks.entanglement.ghz.GHZConfiguration.qiskit_optim_level"]], "qubit_counts (iqm.benchmarks.entanglement.ghz.ghzconfiguration attribute)": [[50, "iqm.benchmarks.entanglement.ghz.GHZConfiguration.qubit_counts"]], "rem (iqm.benchmarks.entanglement.ghz.ghzconfiguration attribute)": [[50, "iqm.benchmarks.entanglement.ghz.GHZConfiguration.rem"]], "state_generation_routine (iqm.benchmarks.entanglement.ghz.ghzconfiguration attribute)": [[50, "iqm.benchmarks.entanglement.ghz.GHZConfiguration.state_generation_routine"]], "fidelity_analysis() (in module iqm.benchmarks.entanglement.ghz)": [[51, "iqm.benchmarks.entanglement.ghz.fidelity_analysis"]], "fidelity_ghz_coherences() (in module iqm.benchmarks.entanglement.ghz)": [[52, "iqm.benchmarks.entanglement.ghz.fidelity_ghz_coherences"]], "fidelity_ghz_randomized_measurements() (in module iqm.benchmarks.entanglement.ghz)": [[53, "iqm.benchmarks.entanglement.ghz.fidelity_ghz_randomized_measurements"]], "generate_ghz_linear() (in module iqm.benchmarks.entanglement.ghz)": [[54, "iqm.benchmarks.entanglement.ghz.generate_ghz_linear"]], "generate_ghz_log_cruz() (in module iqm.benchmarks.entanglement.ghz)": [[55, "iqm.benchmarks.entanglement.ghz.generate_ghz_log_cruz"]], "generate_ghz_log_mooney() (in module iqm.benchmarks.entanglement.ghz)": [[56, "iqm.benchmarks.entanglement.ghz.generate_ghz_log_mooney"]], "generate_ghz_spanning_tree() (in module iqm.benchmarks.entanglement.ghz)": [[57, "iqm.benchmarks.entanglement.ghz.generate_ghz_spanning_tree"]], "generate_ghz_star() (in module iqm.benchmarks.entanglement.ghz)": [[58, "iqm.benchmarks.entanglement.ghz.generate_ghz_star"]], "get_cx_map() (in module iqm.benchmarks.entanglement.ghz)": [[59, "iqm.benchmarks.entanglement.ghz.get_cx_map"]], "get_edges() (in module iqm.benchmarks.entanglement.ghz)": [[60, "iqm.benchmarks.entanglement.ghz.get_edges"]], "plot_fidelities() (in module iqm.benchmarks.entanglement.ghz)": [[61, "iqm.benchmarks.entanglement.ghz.plot_fidelities"]], "iqm.benchmarks.entanglement.graph_states": [[62, "module-iqm.benchmarks.entanglement.graph_states"]], "graphstatebenchmark (class in iqm.benchmarks.entanglement.graph_states)": [[63, "iqm.benchmarks.entanglement.graph_states.GraphStateBenchmark"]], "add_all_circuits_to_dataset() (iqm.benchmarks.entanglement.graph_states.graphstatebenchmark method)": [[63, "iqm.benchmarks.entanglement.graph_states.GraphStateBenchmark.add_all_circuits_to_dataset"]], "add_all_meta_to_dataset() (iqm.benchmarks.entanglement.graph_states.graphstatebenchmark method)": [[63, "iqm.benchmarks.entanglement.graph_states.GraphStateBenchmark.add_all_meta_to_dataset"]], "analysis_function() (iqm.benchmarks.entanglement.graph_states.graphstatebenchmark static method)": [[63, "iqm.benchmarks.entanglement.graph_states.GraphStateBenchmark.analysis_function"]], "execute() (iqm.benchmarks.entanglement.graph_states.graphstatebenchmark method)": [[63, "iqm.benchmarks.entanglement.graph_states.GraphStateBenchmark.execute"]], "generate_all_circuit_info_for_graph_state_benchmark() (iqm.benchmarks.entanglement.graph_states.graphstatebenchmark method)": [[63, "iqm.benchmarks.entanglement.graph_states.GraphStateBenchmark.generate_all_circuit_info_for_graph_state_benchmark"]], "graphstateconfiguration (class in iqm.benchmarks.entanglement.graph_states)": [[64, "iqm.benchmarks.entanglement.graph_states.GraphStateConfiguration"]], "benchmark (iqm.benchmarks.entanglement.graph_states.graphstateconfiguration attribute)": [[64, "iqm.benchmarks.entanglement.graph_states.GraphStateConfiguration.benchmark"]], "model_config (iqm.benchmarks.entanglement.graph_states.graphstateconfiguration attribute)": [[64, "iqm.benchmarks.entanglement.graph_states.GraphStateConfiguration.model_config"]], "n_median_of_means (iqm.benchmarks.entanglement.graph_states.graphstateconfiguration attribute)": [[64, "iqm.benchmarks.entanglement.graph_states.GraphStateConfiguration.n_median_of_means"]], "n_random_unitaries (iqm.benchmarks.entanglement.graph_states.graphstateconfiguration attribute)": [[64, "iqm.benchmarks.entanglement.graph_states.GraphStateConfiguration.n_random_unitaries"]], "num_bootstraps (iqm.benchmarks.entanglement.graph_states.graphstateconfiguration attribute)": [[64, "iqm.benchmarks.entanglement.graph_states.GraphStateConfiguration.num_bootstraps"]], "qubits (iqm.benchmarks.entanglement.graph_states.graphstateconfiguration attribute)": [[64, "iqm.benchmarks.entanglement.graph_states.GraphStateConfiguration.qubits"]], "tomography (iqm.benchmarks.entanglement.graph_states.graphstateconfiguration attribute)": [[64, "iqm.benchmarks.entanglement.graph_states.GraphStateConfiguration.tomography"]], "find_edges_with_disjoint_neighbors() (in module iqm.benchmarks.entanglement.graph_states)": [[65, "iqm.benchmarks.entanglement.graph_states.find_edges_with_disjoint_neighbors"]], "generate_graph_state() (in module iqm.benchmarks.entanglement.graph_states)": [[66, "iqm.benchmarks.entanglement.graph_states.generate_graph_state"]], "generate_minimal_edge_layers() (in module iqm.benchmarks.entanglement.graph_states)": [[67, "iqm.benchmarks.entanglement.graph_states.generate_minimal_edge_layers"]], "negativity_analysis() (in module iqm.benchmarks.entanglement.graph_states)": [[68, "iqm.benchmarks.entanglement.graph_states.negativity_analysis"]], "plot_density_matrix() (in module iqm.benchmarks.entanglement.graph_states)": [[69, "iqm.benchmarks.entanglement.graph_states.plot_density_matrix"]], "plot_max_negativities() (in module iqm.benchmarks.entanglement.graph_states)": [[70, "iqm.benchmarks.entanglement.graph_states.plot_max_negativities"]], "plot_max_negativities_graph() (in module iqm.benchmarks.entanglement.graph_states)": [[71, "iqm.benchmarks.entanglement.graph_states.plot_max_negativities_graph"]], "shadow_tomography_analysis() (in module iqm.benchmarks.entanglement.graph_states)": [[72, "iqm.benchmarks.entanglement.graph_states.shadow_tomography_analysis"]], "state_tomography_analysis() (in module iqm.benchmarks.entanglement.graph_states)": [[73, "iqm.benchmarks.entanglement.graph_states.state_tomography_analysis"]], "update_pauli_expectations() (in module iqm.benchmarks.entanglement.graph_states)": [[74, "iqm.benchmarks.entanglement.graph_states.update_pauli_expectations"]], "iqm.benchmarks.logging_config": [[75, "module-iqm.benchmarks.logging_config"]], "iqm.benchmarks.optimization": [[76, "module-iqm.benchmarks.optimization"]], "iqm.benchmarks.optimization.qscore": [[77, "module-iqm.benchmarks.optimization.qscore"]], "qscorebenchmark (class in iqm.benchmarks.optimization.qscore)": [[78, "iqm.benchmarks.optimization.qscore.QScoreBenchmark"]], "add_all_meta_to_dataset() (iqm.benchmarks.optimization.qscore.qscorebenchmark method)": [[78, "iqm.benchmarks.optimization.qscore.QScoreBenchmark.add_all_meta_to_dataset"]], "analysis_function() (iqm.benchmarks.optimization.qscore.qscorebenchmark static method)": [[78, "iqm.benchmarks.optimization.qscore.QScoreBenchmark.analysis_function"]], "choose_qubits_custom() (iqm.benchmarks.optimization.qscore.qscorebenchmark method)": [[78, "iqm.benchmarks.optimization.qscore.QScoreBenchmark.choose_qubits_custom"]], "choose_qubits_naive() (iqm.benchmarks.optimization.qscore.qscorebenchmark static method)": [[78, "iqm.benchmarks.optimization.qscore.QScoreBenchmark.choose_qubits_naive"]], "execute() (iqm.benchmarks.optimization.qscore.qscorebenchmark method)": [[78, "iqm.benchmarks.optimization.qscore.QScoreBenchmark.execute"]], "generate_maxcut_ansatz() (iqm.benchmarks.optimization.qscore.qscorebenchmark method)": [[78, "iqm.benchmarks.optimization.qscore.QScoreBenchmark.generate_maxcut_ansatz"]], "qscoreconfiguration (class in iqm.benchmarks.optimization.qscore)": [[79, "iqm.benchmarks.optimization.qscore.QScoreConfiguration"]], "rem (iqm.benchmarks.optimization.qscore.qscoreconfiguration attribute)": [[79, "iqm.benchmarks.optimization.qscore.QScoreConfiguration.REM"]], "benchmark (iqm.benchmarks.optimization.qscore.qscoreconfiguration attribute)": [[79, "iqm.benchmarks.optimization.qscore.QScoreConfiguration.benchmark"]], "choose_qubits_routine (iqm.benchmarks.optimization.qscore.qscoreconfiguration attribute)": [[79, "iqm.benchmarks.optimization.qscore.QScoreConfiguration.choose_qubits_routine"]], "custom_qubits_array (iqm.benchmarks.optimization.qscore.qscoreconfiguration attribute)": [[79, "iqm.benchmarks.optimization.qscore.QScoreConfiguration.custom_qubits_array"]], "max_num_nodes (iqm.benchmarks.optimization.qscore.qscoreconfiguration attribute)": [[79, "iqm.benchmarks.optimization.qscore.QScoreConfiguration.max_num_nodes"]], "min_num_nodes (iqm.benchmarks.optimization.qscore.qscoreconfiguration attribute)": [[79, "iqm.benchmarks.optimization.qscore.QScoreConfiguration.min_num_nodes"]], "min_num_qubits (iqm.benchmarks.optimization.qscore.qscoreconfiguration attribute)": [[79, "iqm.benchmarks.optimization.qscore.QScoreConfiguration.min_num_qubits"]], "mit_shots (iqm.benchmarks.optimization.qscore.qscoreconfiguration attribute)": [[79, "iqm.benchmarks.optimization.qscore.QScoreConfiguration.mit_shots"]], "model_config (iqm.benchmarks.optimization.qscore.qscoreconfiguration attribute)": [[79, "iqm.benchmarks.optimization.qscore.QScoreConfiguration.model_config"]], "num_instances (iqm.benchmarks.optimization.qscore.qscoreconfiguration attribute)": [[79, "iqm.benchmarks.optimization.qscore.QScoreConfiguration.num_instances"]], "num_qaoa_layers (iqm.benchmarks.optimization.qscore.qscoreconfiguration attribute)": [[79, "iqm.benchmarks.optimization.qscore.QScoreConfiguration.num_qaoa_layers"]], "optimize_sqg (iqm.benchmarks.optimization.qscore.qscoreconfiguration attribute)": [[79, "iqm.benchmarks.optimization.qscore.QScoreConfiguration.optimize_sqg"]], "qiskit_optim_level (iqm.benchmarks.optimization.qscore.qscoreconfiguration attribute)": [[79, "iqm.benchmarks.optimization.qscore.QScoreConfiguration.qiskit_optim_level"]], "seed (iqm.benchmarks.optimization.qscore.qscoreconfiguration attribute)": [[79, "iqm.benchmarks.optimization.qscore.QScoreConfiguration.seed"]], "use_classically_optimized_angles (iqm.benchmarks.optimization.qscore.qscoreconfiguration attribute)": [[79, "iqm.benchmarks.optimization.qscore.QScoreConfiguration.use_classically_optimized_angles"]], "use_virtual_node (iqm.benchmarks.optimization.qscore.qscoreconfiguration attribute)": [[79, "iqm.benchmarks.optimization.qscore.QScoreConfiguration.use_virtual_node"]], "calculate_optimal_angles_for_qaoa_p1() (in module iqm.benchmarks.optimization.qscore)": [[80, "iqm.benchmarks.optimization.qscore.calculate_optimal_angles_for_QAOA_p1"]], "compute_expectation_value() (in module iqm.benchmarks.optimization.qscore)": [[81, "iqm.benchmarks.optimization.qscore.compute_expectation_value"]], "create_objective_function() (in module iqm.benchmarks.optimization.qscore)": [[82, "iqm.benchmarks.optimization.qscore.create_objective_function"]], "cut_cost_function() (in module iqm.benchmarks.optimization.qscore)": [[83, "iqm.benchmarks.optimization.qscore.cut_cost_function"]], "get_optimal_angles() (in module iqm.benchmarks.optimization.qscore)": [[84, "iqm.benchmarks.optimization.qscore.get_optimal_angles"]], "is_successful() (in module iqm.benchmarks.optimization.qscore)": [[85, "iqm.benchmarks.optimization.qscore.is_successful"]], "plot_approximation_ratios() (in module iqm.benchmarks.optimization.qscore)": [[86, "iqm.benchmarks.optimization.qscore.plot_approximation_ratios"]], "qscore_analysis() (in module iqm.benchmarks.optimization.qscore)": [[87, "iqm.benchmarks.optimization.qscore.qscore_analysis"]], "run_qaoa() (in module iqm.benchmarks.optimization.qscore)": [[88, "iqm.benchmarks.optimization.qscore.run_QAOA"]], "iqm.benchmarks.quantum_volume": [[89, "module-iqm.benchmarks.quantum_volume"]], "iqm.benchmarks.quantum_volume.clops": [[90, "module-iqm.benchmarks.quantum_volume.clops"]], "clopsbenchmark (class in iqm.benchmarks.quantum_volume.clops)": [[91, "iqm.benchmarks.quantum_volume.clops.CLOPSBenchmark"]], "add_all_meta_to_dataset() (iqm.benchmarks.quantum_volume.clops.clopsbenchmark method)": [[91, "iqm.benchmarks.quantum_volume.clops.CLOPSBenchmark.add_all_meta_to_dataset"]], "analysis_function() (iqm.benchmarks.quantum_volume.clops.clopsbenchmark static method)": [[91, "iqm.benchmarks.quantum_volume.clops.CLOPSBenchmark.analysis_function"]], "append_parameterized_unitary() (iqm.benchmarks.quantum_volume.clops.clopsbenchmark method)": [[91, "iqm.benchmarks.quantum_volume.clops.CLOPSBenchmark.append_parameterized_unitary"]], "assign_random_parameters_to_all() (iqm.benchmarks.quantum_volume.clops.clopsbenchmark method)": [[91, "iqm.benchmarks.quantum_volume.clops.CLOPSBenchmark.assign_random_parameters_to_all"]], "clops_cycle() (iqm.benchmarks.quantum_volume.clops.clopsbenchmark method)": [[91, "iqm.benchmarks.quantum_volume.clops.CLOPSBenchmark.clops_cycle"]], "execute() (iqm.benchmarks.quantum_volume.clops.clopsbenchmark method)": [[91, "iqm.benchmarks.quantum_volume.clops.CLOPSBenchmark.execute"]], "generate_circuit_list() (iqm.benchmarks.quantum_volume.clops.clopsbenchmark method)": [[91, "iqm.benchmarks.quantum_volume.clops.CLOPSBenchmark.generate_circuit_list"]], "generate_random_parameters() (iqm.benchmarks.quantum_volume.clops.clopsbenchmark method)": [[91, "iqm.benchmarks.quantum_volume.clops.CLOPSBenchmark.generate_random_parameters"]], "generate_single_circuit() (iqm.benchmarks.quantum_volume.clops.clopsbenchmark method)": [[91, "iqm.benchmarks.quantum_volume.clops.CLOPSBenchmark.generate_single_circuit"]], "generate_transpiled_clops_templates() (iqm.benchmarks.quantum_volume.clops.clopsbenchmark method)": [[91, "iqm.benchmarks.quantum_volume.clops.CLOPSBenchmark.generate_transpiled_clops_templates"]], "clopsconfiguration (class in iqm.benchmarks.quantum_volume.clops)": [[92, "iqm.benchmarks.quantum_volume.clops.CLOPSConfiguration"]], "benchmark (iqm.benchmarks.quantum_volume.clops.clopsconfiguration attribute)": [[92, "iqm.benchmarks.quantum_volume.clops.CLOPSConfiguration.benchmark"]], "clops_h_bool (iqm.benchmarks.quantum_volume.clops.clopsconfiguration attribute)": [[92, "iqm.benchmarks.quantum_volume.clops.CLOPSConfiguration.clops_h_bool"]], "model_config (iqm.benchmarks.quantum_volume.clops.clopsconfiguration attribute)": [[92, "iqm.benchmarks.quantum_volume.clops.CLOPSConfiguration.model_config"]], "num_circuits (iqm.benchmarks.quantum_volume.clops.clopsconfiguration attribute)": [[92, "iqm.benchmarks.quantum_volume.clops.CLOPSConfiguration.num_circuits"]], "num_shots (iqm.benchmarks.quantum_volume.clops.clopsconfiguration attribute)": [[92, "iqm.benchmarks.quantum_volume.clops.CLOPSConfiguration.num_shots"]], "num_updates (iqm.benchmarks.quantum_volume.clops.clopsconfiguration attribute)": [[92, "iqm.benchmarks.quantum_volume.clops.CLOPSConfiguration.num_updates"]], "optimize_sqg (iqm.benchmarks.quantum_volume.clops.clopsconfiguration attribute)": [[92, "iqm.benchmarks.quantum_volume.clops.CLOPSConfiguration.optimize_sqg"]], "physical_layout (iqm.benchmarks.quantum_volume.clops.clopsconfiguration attribute)": [[92, "iqm.benchmarks.quantum_volume.clops.CLOPSConfiguration.physical_layout"]], "qiskit_optim_level (iqm.benchmarks.quantum_volume.clops.clopsconfiguration attribute)": [[92, "iqm.benchmarks.quantum_volume.clops.CLOPSConfiguration.qiskit_optim_level"]], "qubits (iqm.benchmarks.quantum_volume.clops.clopsconfiguration attribute)": [[92, "iqm.benchmarks.quantum_volume.clops.CLOPSConfiguration.qubits"]], "routing_method (iqm.benchmarks.quantum_volume.clops.clopsconfiguration attribute)": [[92, "iqm.benchmarks.quantum_volume.clops.CLOPSConfiguration.routing_method"]], "clops_analysis() (in module iqm.benchmarks.quantum_volume.clops)": [[93, "iqm.benchmarks.quantum_volume.clops.clops_analysis"]], "plot_times() (in module iqm.benchmarks.quantum_volume.clops)": [[94, "iqm.benchmarks.quantum_volume.clops.plot_times"]], "retrieve_clops_elapsed_times() (in module iqm.benchmarks.quantum_volume.clops)": [[95, "iqm.benchmarks.quantum_volume.clops.retrieve_clops_elapsed_times"]], "iqm.benchmarks.quantum_volume.quantum_volume": [[96, "module-iqm.benchmarks.quantum_volume.quantum_volume"]], "quantumvolumebenchmark (class in iqm.benchmarks.quantum_volume.quantum_volume)": [[97, "iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeBenchmark"]], "add_all_circuits_to_dataset() (iqm.benchmarks.quantum_volume.quantum_volume.quantumvolumebenchmark method)": [[97, "iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeBenchmark.add_all_circuits_to_dataset"]], "add_all_meta_to_dataset() (iqm.benchmarks.quantum_volume.quantum_volume.quantumvolumebenchmark method)": [[97, "iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeBenchmark.add_all_meta_to_dataset"]], "analysis_function() (iqm.benchmarks.quantum_volume.quantum_volume.quantumvolumebenchmark static method)": [[97, "iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeBenchmark.analysis_function"]], "execute() (iqm.benchmarks.quantum_volume.quantum_volume.quantumvolumebenchmark method)": [[97, "iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeBenchmark.execute"]], "generate_circuit_list() (iqm.benchmarks.quantum_volume.quantum_volume.quantumvolumebenchmark method)": [[97, "iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeBenchmark.generate_circuit_list"]], "generate_single_circuit() (iqm.benchmarks.quantum_volume.quantum_volume.quantumvolumebenchmark static method)": [[97, "iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeBenchmark.generate_single_circuit"]], "get_rem_quasidistro() (iqm.benchmarks.quantum_volume.quantum_volume.quantumvolumebenchmark method)": [[97, "iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeBenchmark.get_rem_quasidistro"]], "submit_single_qv_job() (iqm.benchmarks.quantum_volume.quantum_volume.quantumvolumebenchmark method)": [[97, "iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeBenchmark.submit_single_qv_job"]], "quantumvolumeconfiguration (class in iqm.benchmarks.quantum_volume.quantum_volume)": [[98, "iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeConfiguration"]], "benchmark (iqm.benchmarks.quantum_volume.quantum_volume.quantumvolumeconfiguration attribute)": [[98, "iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeConfiguration.benchmark"]], "choose_qubits_routine (iqm.benchmarks.quantum_volume.quantum_volume.quantumvolumeconfiguration attribute)": [[98, "iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeConfiguration.choose_qubits_routine"]], "custom_qubits_array (iqm.benchmarks.quantum_volume.quantum_volume.quantumvolumeconfiguration attribute)": [[98, "iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeConfiguration.custom_qubits_array"]], "mit_shots (iqm.benchmarks.quantum_volume.quantum_volume.quantumvolumeconfiguration attribute)": [[98, "iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeConfiguration.mit_shots"]], "model_config (iqm.benchmarks.quantum_volume.quantum_volume.quantumvolumeconfiguration attribute)": [[98, "iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeConfiguration.model_config"]], "num_circuits (iqm.benchmarks.quantum_volume.quantum_volume.quantumvolumeconfiguration attribute)": [[98, "iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeConfiguration.num_circuits"]], "num_sigmas (iqm.benchmarks.quantum_volume.quantum_volume.quantumvolumeconfiguration attribute)": [[98, "iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeConfiguration.num_sigmas"]], "optimize_sqg (iqm.benchmarks.quantum_volume.quantum_volume.quantumvolumeconfiguration attribute)": [[98, "iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeConfiguration.optimize_sqg"]], "physical_layout (iqm.benchmarks.quantum_volume.quantum_volume.quantumvolumeconfiguration attribute)": [[98, "iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeConfiguration.physical_layout"]], "qiskit_optim_level (iqm.benchmarks.quantum_volume.quantum_volume.quantumvolumeconfiguration attribute)": [[98, "iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeConfiguration.qiskit_optim_level"]], "rem (iqm.benchmarks.quantum_volume.quantum_volume.quantumvolumeconfiguration attribute)": [[98, "iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeConfiguration.rem"]], "routing_method (iqm.benchmarks.quantum_volume.quantum_volume.quantumvolumeconfiguration attribute)": [[98, "iqm.benchmarks.quantum_volume.quantum_volume.QuantumVolumeConfiguration.routing_method"]], "compute_heavy_output_probabilities() (in module iqm.benchmarks.quantum_volume.quantum_volume)": [[99, "iqm.benchmarks.quantum_volume.quantum_volume.compute_heavy_output_probabilities"]], "cumulative_hop() (in module iqm.benchmarks.quantum_volume.quantum_volume)": [[100, "iqm.benchmarks.quantum_volume.quantum_volume.cumulative_hop"]], "cumulative_std() (in module iqm.benchmarks.quantum_volume.quantum_volume)": [[101, "iqm.benchmarks.quantum_volume.quantum_volume.cumulative_std"]], "get_ideal_heavy_outputs() (in module iqm.benchmarks.quantum_volume.quantum_volume)": [[102, "iqm.benchmarks.quantum_volume.quantum_volume.get_ideal_heavy_outputs"]], "get_rem_hops() (in module iqm.benchmarks.quantum_volume.quantum_volume)": [[103, "iqm.benchmarks.quantum_volume.quantum_volume.get_rem_hops"]], "heavy_projector() (in module iqm.benchmarks.quantum_volume.quantum_volume)": [[104, "iqm.benchmarks.quantum_volume.quantum_volume.heavy_projector"]], "is_successful() (in module iqm.benchmarks.quantum_volume.quantum_volume)": [[105, "iqm.benchmarks.quantum_volume.quantum_volume.is_successful"]], "plot_hop_threshold() (in module iqm.benchmarks.quantum_volume.quantum_volume)": [[106, "iqm.benchmarks.quantum_volume.quantum_volume.plot_hop_threshold"]], "qv_analysis() (in module iqm.benchmarks.quantum_volume.quantum_volume)": [[107, "iqm.benchmarks.quantum_volume.quantum_volume.qv_analysis"]], "iqm.benchmarks.randomized_benchmarking": [[108, "module-iqm.benchmarks.randomized_benchmarking"]], "iqm.benchmarks.randomized_benchmarking.clifford_rb": [[109, "module-iqm.benchmarks.randomized_benchmarking.clifford_rb"]], "iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb": [[110, "module-iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb"]], "cliffordrbconfiguration (class in iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb)": [[111, "iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.CliffordRBConfiguration"]], "benchmark (iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.cliffordrbconfiguration attribute)": [[111, "iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.CliffordRBConfiguration.benchmark"]], "model_config (iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.cliffordrbconfiguration attribute)": [[111, "iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.CliffordRBConfiguration.model_config"]], "num_circuit_samples (iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.cliffordrbconfiguration attribute)": [[111, "iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.CliffordRBConfiguration.num_circuit_samples"]], "parallel_execution (iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.cliffordrbconfiguration attribute)": [[111, "iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.CliffordRBConfiguration.parallel_execution"]], "qubits_array (iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.cliffordrbconfiguration attribute)": [[111, "iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.CliffordRBConfiguration.qubits_array"]], "sequence_lengths (iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.cliffordrbconfiguration attribute)": [[111, "iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.CliffordRBConfiguration.sequence_lengths"]], "shots (iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.cliffordrbconfiguration attribute)": [[111, "iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.CliffordRBConfiguration.shots"]], "cliffordrandomizedbenchmarking (class in iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb)": [[112, "iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.CliffordRandomizedBenchmarking"]], "add_all_circuits_to_dataset() (iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.cliffordrandomizedbenchmarking method)": [[112, "iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.CliffordRandomizedBenchmarking.add_all_circuits_to_dataset"]], "add_all_metadata_to_dataset() (iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.cliffordrandomizedbenchmarking method)": [[112, "iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.CliffordRandomizedBenchmarking.add_all_metadata_to_dataset"]], "analysis_function() (iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.cliffordrandomizedbenchmarking static method)": [[112, "iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.CliffordRandomizedBenchmarking.analysis_function"]], "execute() (iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.cliffordrandomizedbenchmarking method)": [[112, "iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.CliffordRandomizedBenchmarking.execute"]], "clifford_rb_analysis() (in module iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb)": [[113, "iqm.benchmarks.randomized_benchmarking.clifford_rb.clifford_rb.clifford_rb_analysis"]], "iqm.benchmarks.randomized_benchmarking.direct_rb": [[114, "module-iqm.benchmarks.randomized_benchmarking.direct_rb"]], "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb": [[115, "module-iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb"]], "directrbconfiguration (class in iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb)": [[116, "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.DirectRBConfiguration"]], "benchmark (iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.directrbconfiguration attribute)": [[116, "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.DirectRBConfiguration.benchmark"]], "clifford_sqg_probabilities (iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.directrbconfiguration attribute)": [[116, "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.DirectRBConfiguration.clifford_sqg_probabilities"]], "densities_2q_gates (iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.directrbconfiguration attribute)": [[116, "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.DirectRBConfiguration.densities_2q_gates"]], "depths (iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.directrbconfiguration attribute)": [[116, "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.DirectRBConfiguration.depths"]], "is_eplg (iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.directrbconfiguration attribute)": [[116, "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.DirectRBConfiguration.is_eplg"]], "model_config (iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.directrbconfiguration attribute)": [[116, "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.DirectRBConfiguration.model_config"]], "num_circuit_samples (iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.directrbconfiguration attribute)": [[116, "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.DirectRBConfiguration.num_circuit_samples"]], "parallel_execution (iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.directrbconfiguration attribute)": [[116, "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.DirectRBConfiguration.parallel_execution"]], "qiskit_optim_level (iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.directrbconfiguration attribute)": [[116, "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.DirectRBConfiguration.qiskit_optim_level"]], "qubits_array (iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.directrbconfiguration attribute)": [[116, "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.DirectRBConfiguration.qubits_array"]], "routing_method (iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.directrbconfiguration attribute)": [[116, "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.DirectRBConfiguration.routing_method"]], "shots (iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.directrbconfiguration attribute)": [[116, "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.DirectRBConfiguration.shots"]], "sqg_gate_ensembles (iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.directrbconfiguration attribute)": [[116, "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.DirectRBConfiguration.sqg_gate_ensembles"]], "two_qubit_gate_ensembles (iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.directrbconfiguration attribute)": [[116, "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.DirectRBConfiguration.two_qubit_gate_ensembles"]], "directrandomizedbenchmarking (class in iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb)": [[117, "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.DirectRandomizedBenchmarking"]], "add_all_meta_to_dataset() (iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.directrandomizedbenchmarking method)": [[117, "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.DirectRandomizedBenchmarking.add_all_meta_to_dataset"]], "analysis_function() (iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.directrandomizedbenchmarking static method)": [[117, "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.DirectRandomizedBenchmarking.analysis_function"]], "assign_inputs_to_qubits() (iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.directrandomizedbenchmarking method)": [[117, "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.DirectRandomizedBenchmarking.assign_inputs_to_qubits"]], "execute() (iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.directrandomizedbenchmarking method)": [[117, "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.DirectRandomizedBenchmarking.execute"]], "submit_single_drb_job() (iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.directrandomizedbenchmarking method)": [[117, "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.DirectRandomizedBenchmarking.submit_single_drb_job"]], "direct_rb_analysis() (in module iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb)": [[118, "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.direct_rb_analysis"]], "generate_drb_circuits() (in module iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb)": [[119, "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.generate_drb_circuits"]], "generate_fixed_depth_parallel_drb_circuits() (in module iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb)": [[120, "iqm.benchmarks.randomized_benchmarking.direct_rb.direct_rb.generate_fixed_depth_parallel_drb_circuits"]], "iqm.benchmarks.randomized_benchmarking.eplg": [[121, "module-iqm.benchmarks.randomized_benchmarking.eplg"]], "iqm.benchmarks.randomized_benchmarking.eplg.eplg": [[122, "module-iqm.benchmarks.randomized_benchmarking.eplg.eplg"]], "eplgbenchmark (class in iqm.benchmarks.randomized_benchmarking.eplg.eplg)": [[123, "iqm.benchmarks.randomized_benchmarking.eplg.eplg.EPLGBenchmark"]], "add_all_meta_to_dataset() (iqm.benchmarks.randomized_benchmarking.eplg.eplg.eplgbenchmark method)": [[123, "iqm.benchmarks.randomized_benchmarking.eplg.eplg.EPLGBenchmark.add_all_meta_to_dataset"]], "analysis_function() (iqm.benchmarks.randomized_benchmarking.eplg.eplg.eplgbenchmark static method)": [[123, "iqm.benchmarks.randomized_benchmarking.eplg.eplg.EPLGBenchmark.analysis_function"]], "execute() (iqm.benchmarks.randomized_benchmarking.eplg.eplg.eplgbenchmark method)": [[123, "iqm.benchmarks.randomized_benchmarking.eplg.eplg.EPLGBenchmark.execute"]], "validate_custom_qubits_array() (iqm.benchmarks.randomized_benchmarking.eplg.eplg.eplgbenchmark method)": [[123, "iqm.benchmarks.randomized_benchmarking.eplg.eplg.EPLGBenchmark.validate_custom_qubits_array"]], "validate_random_chain_inputs() (iqm.benchmarks.randomized_benchmarking.eplg.eplg.eplgbenchmark method)": [[123, "iqm.benchmarks.randomized_benchmarking.eplg.eplg.EPLGBenchmark.validate_random_chain_inputs"]], "eplgconfiguration (class in iqm.benchmarks.randomized_benchmarking.eplg.eplg)": [[124, "iqm.benchmarks.randomized_benchmarking.eplg.eplg.EPLGConfiguration"]], "calibration_url (iqm.benchmarks.randomized_benchmarking.eplg.eplg.eplgconfiguration attribute)": [[124, "iqm.benchmarks.randomized_benchmarking.eplg.eplg.EPLGConfiguration.calibration_url"]], "chain_length (iqm.benchmarks.randomized_benchmarking.eplg.eplg.eplgconfiguration attribute)": [[124, "iqm.benchmarks.randomized_benchmarking.eplg.eplg.EPLGConfiguration.chain_length"]], "chain_path_samples (iqm.benchmarks.randomized_benchmarking.eplg.eplg.eplgconfiguration attribute)": [[124, "iqm.benchmarks.randomized_benchmarking.eplg.eplg.EPLGConfiguration.chain_path_samples"]], "custom_qubits_array (iqm.benchmarks.randomized_benchmarking.eplg.eplg.eplgconfiguration attribute)": [[124, "iqm.benchmarks.randomized_benchmarking.eplg.eplg.EPLGConfiguration.custom_qubits_array"]], "drb_circuit_samples (iqm.benchmarks.randomized_benchmarking.eplg.eplg.eplgconfiguration attribute)": [[124, "iqm.benchmarks.randomized_benchmarking.eplg.eplg.EPLGConfiguration.drb_circuit_samples"]], "drb_depths (iqm.benchmarks.randomized_benchmarking.eplg.eplg.eplgconfiguration attribute)": [[124, "iqm.benchmarks.randomized_benchmarking.eplg.eplg.EPLGConfiguration.drb_depths"]], "max_hamiltonian_path_tries (iqm.benchmarks.randomized_benchmarking.eplg.eplg.eplgconfiguration attribute)": [[124, "iqm.benchmarks.randomized_benchmarking.eplg.eplg.EPLGConfiguration.max_hamiltonian_path_tries"]], "model_config (iqm.benchmarks.randomized_benchmarking.eplg.eplg.eplgconfiguration attribute)": [[124, "iqm.benchmarks.randomized_benchmarking.eplg.eplg.EPLGConfiguration.model_config"]], "num_disjoint_layers (iqm.benchmarks.randomized_benchmarking.eplg.eplg.eplgconfiguration attribute)": [[124, "iqm.benchmarks.randomized_benchmarking.eplg.eplg.EPLGConfiguration.num_disjoint_layers"]], "eplg_analysis() (in module iqm.benchmarks.randomized_benchmarking.eplg.eplg)": [[125, "iqm.benchmarks.randomized_benchmarking.eplg.eplg.eplg_analysis"]], "plot_layered_fidelities_graph() (in module iqm.benchmarks.randomized_benchmarking.eplg.eplg)": [[126, "iqm.benchmarks.randomized_benchmarking.eplg.eplg.plot_layered_fidelities_graph"]], "iqm.benchmarks.randomized_benchmarking.interleaved_rb": [[127, "module-iqm.benchmarks.randomized_benchmarking.interleaved_rb"]], "iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb": [[128, "module-iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb"]], "interleavedrbconfiguration (class in iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb)": [[129, "iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.InterleavedRBConfiguration"]], "interleaved_gate (iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.interleavedrbconfiguration attribute)": [[129, "iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.InterleavedRBConfiguration.interleaved_gate"]], "interleaved_gate_params (iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.interleavedrbconfiguration attribute)": [[129, "iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.InterleavedRBConfiguration.interleaved_gate_params"]], "model_config (iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.interleavedrbconfiguration attribute)": [[129, "iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.InterleavedRBConfiguration.model_config"]], "num_circuit_samples (iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.interleavedrbconfiguration attribute)": [[129, "iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.InterleavedRBConfiguration.num_circuit_samples"]], "parallel_execution (iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.interleavedrbconfiguration attribute)": [[129, "iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.InterleavedRBConfiguration.parallel_execution"]], "qubits_array (iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.interleavedrbconfiguration attribute)": [[129, "iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.InterleavedRBConfiguration.qubits_array"]], "sequence_lengths (iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.interleavedrbconfiguration attribute)": [[129, "iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.InterleavedRBConfiguration.sequence_lengths"]], "shots (iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.interleavedrbconfiguration attribute)": [[129, "iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.InterleavedRBConfiguration.shots"]], "simultaneous_fit (iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.interleavedrbconfiguration attribute)": [[129, "iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.InterleavedRBConfiguration.simultaneous_fit"]], "interleavedrandomizedbenchmarking (class in iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb)": [[130, "iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.InterleavedRandomizedBenchmarking"]], "add_all_circuits_to_dataset() (iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.interleavedrandomizedbenchmarking method)": [[130, "iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.InterleavedRandomizedBenchmarking.add_all_circuits_to_dataset"]], "add_all_meta_to_dataset() (iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.interleavedrandomizedbenchmarking method)": [[130, "iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.InterleavedRandomizedBenchmarking.add_all_meta_to_dataset"]], "analysis_function() (iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.interleavedrandomizedbenchmarking static method)": [[130, "iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.InterleavedRandomizedBenchmarking.analysis_function"]], "execute() (iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.interleavedrandomizedbenchmarking method)": [[130, "iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.InterleavedRandomizedBenchmarking.execute"]], "interleaved_rb_analysis() (in module iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb)": [[131, "iqm.benchmarks.randomized_benchmarking.interleaved_rb.interleaved_rb.interleaved_rb_analysis"]], "iqm.benchmarks.randomized_benchmarking.mirror_rb": [[132, "module-iqm.benchmarks.randomized_benchmarking.mirror_rb"]], "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb": [[133, "module-iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb"]], "mirrorrbconfiguration (class in iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb)": [[134, "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRBConfiguration"]], "benchmark (iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.mirrorrbconfiguration attribute)": [[134, "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRBConfiguration.benchmark"]], "clifford_sqg_probability (iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.mirrorrbconfiguration attribute)": [[134, "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRBConfiguration.clifford_sqg_probability"]], "density_2q_gates (iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.mirrorrbconfiguration attribute)": [[134, "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRBConfiguration.density_2q_gates"]], "depths_array (iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.mirrorrbconfiguration attribute)": [[134, "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRBConfiguration.depths_array"]], "model_config (iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.mirrorrbconfiguration attribute)": [[134, "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRBConfiguration.model_config"]], "num_circuit_samples (iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.mirrorrbconfiguration attribute)": [[134, "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRBConfiguration.num_circuit_samples"]], "num_pauli_samples (iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.mirrorrbconfiguration attribute)": [[134, "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRBConfiguration.num_pauli_samples"]], "qiskit_optim_level (iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.mirrorrbconfiguration attribute)": [[134, "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRBConfiguration.qiskit_optim_level"]], "qubits_array (iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.mirrorrbconfiguration attribute)": [[134, "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRBConfiguration.qubits_array"]], "routing_method (iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.mirrorrbconfiguration attribute)": [[134, "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRBConfiguration.routing_method"]], "shots (iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.mirrorrbconfiguration attribute)": [[134, "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRBConfiguration.shots"]], "simulation_method (iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.mirrorrbconfiguration attribute)": [[134, "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRBConfiguration.simulation_method"]], "sqg_gate_ensemble (iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.mirrorrbconfiguration attribute)": [[134, "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRBConfiguration.sqg_gate_ensemble"]], "two_qubit_gate_ensemble (iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.mirrorrbconfiguration attribute)": [[134, "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRBConfiguration.two_qubit_gate_ensemble"]], "mirrorrandomizedbenchmarking (class in iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb)": [[135, "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRandomizedBenchmarking"]], "add_all_meta_to_dataset() (iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.mirrorrandomizedbenchmarking method)": [[135, "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRandomizedBenchmarking.add_all_meta_to_dataset"]], "analysis_function() (iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.mirrorrandomizedbenchmarking static method)": [[135, "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRandomizedBenchmarking.analysis_function"]], "execute() (iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.mirrorrandomizedbenchmarking method)": [[135, "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRandomizedBenchmarking.execute"]], "submit_single_mrb_job() (iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.mirrorrandomizedbenchmarking method)": [[135, "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.MirrorRandomizedBenchmarking.submit_single_mrb_job"]], "compute_polarizations() (in module iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb)": [[136, "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.compute_polarizations"]], "generate_fixed_depth_mrb_circuits() (in module iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb)": [[137, "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.generate_fixed_depth_mrb_circuits"]], "generate_pauli_dressed_mrb_circuits() (in module iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb)": [[138, "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.generate_pauli_dressed_mrb_circuits"]], "list_to_numcircuit_times_numpauli_matrix() (in module iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb)": [[139, "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.list_to_numcircuit_times_numpauli_matrix"]], "mrb_analysis() (in module iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb)": [[140, "iqm.benchmarks.randomized_benchmarking.mirror_rb.mirror_rb.mrb_analysis"]], "iqm.benchmarks.randomized_benchmarking.multi_lmfit": [[141, "module-iqm.benchmarks.randomized_benchmarking.multi_lmfit"]], "create_multi_dataset_params() (in module iqm.benchmarks.randomized_benchmarking.multi_lmfit)": [[142, "iqm.benchmarks.randomized_benchmarking.multi_lmfit.create_multi_dataset_params"]], "eval_func_single_dataset() (in module iqm.benchmarks.randomized_benchmarking.multi_lmfit)": [[143, "iqm.benchmarks.randomized_benchmarking.multi_lmfit.eval_func_single_dataset"]], "get_param_names_from_func_signature() (in module iqm.benchmarks.randomized_benchmarking.multi_lmfit)": [[144, "iqm.benchmarks.randomized_benchmarking.multi_lmfit.get_param_names_from_func_signature"]], "multi_dataset_residual() (in module iqm.benchmarks.randomized_benchmarking.multi_lmfit)": [[145, "iqm.benchmarks.randomized_benchmarking.multi_lmfit.multi_dataset_residual"]], "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common": [[146, "module-iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common"]], "compute_inverse_clifford() (in module iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common)": [[147, "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.compute_inverse_clifford"]], "edge_grab() (in module iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common)": [[148, "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.edge_grab"]], "estimate_survival_probabilities() (in module iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common)": [[149, "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.estimate_survival_probabilities"]], "exponential_rb() (in module iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common)": [[150, "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.exponential_rb"]], "fit_decay_lmfit() (in module iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common)": [[151, "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.fit_decay_lmfit"]], "generate_all_rb_circuits() (in module iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common)": [[152, "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.generate_all_rb_circuits"]], "generate_fixed_depth_parallel_rb_circuits() (in module iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common)": [[153, "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.generate_fixed_depth_parallel_rb_circuits"]], "generate_random_clifford_seq_circuits() (in module iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common)": [[154, "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.generate_random_clifford_seq_circuits"]], "get_survival_probabilities() (in module iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common)": [[155, "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.get_survival_probabilities"]], "import_native_gate_cliffords() (in module iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common)": [[156, "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.import_native_gate_cliffords"]], "lmfit_minimizer() (in module iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common)": [[157, "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.lmfit_minimizer"]], "plot_rb_decay() (in module iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common)": [[158, "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.plot_rb_decay"]], "relabel_qubits_array_from_zero() (in module iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common)": [[159, "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.relabel_qubits_array_from_zero"]], "submit_parallel_rb_job() (in module iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common)": [[160, "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.submit_parallel_rb_job"]], "submit_sequential_rb_jobs() (in module iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common)": [[161, "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.submit_sequential_rb_jobs"]], "survival_probabilities_parallel() (in module iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common)": [[162, "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.survival_probabilities_parallel"]], "validate_irb_gate() (in module iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common)": [[163, "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.validate_irb_gate"]], "validate_rb_qubits() (in module iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common)": [[164, "iqm.benchmarks.randomized_benchmarking.randomized_benchmarking_common.validate_rb_qubits"]], "iqm.benchmarks.readout_mitigation": [[165, "module-iqm.benchmarks.readout_mitigation"]], "m3iqm (class in iqm.benchmarks.readout_mitigation)": [[166, "iqm.benchmarks.readout_mitigation.M3IQM"]], "cals_from_system() (iqm.benchmarks.readout_mitigation.m3iqm method)": [[166, "iqm.benchmarks.readout_mitigation.M3IQM.cals_from_system"]], "apply_readout_error_mitigation() (in module iqm.benchmarks.readout_mitigation)": [[167, "iqm.benchmarks.readout_mitigation.apply_readout_error_mitigation"]], "readout_error_m3() (in module iqm.benchmarks.readout_mitigation)": [[168, "iqm.benchmarks.readout_mitigation.readout_error_m3"]], "iqm.benchmarks.utils": [[169, "module-iqm.benchmarks.utils"]], "bootstrap_counts() (in module iqm.benchmarks.utils)": [[170, "iqm.benchmarks.utils.bootstrap_counts"]], "count_2q_layers() (in module iqm.benchmarks.utils)": [[171, "iqm.benchmarks.utils.count_2q_layers"]], "count_native_gates() (in module iqm.benchmarks.utils)": [[172, "iqm.benchmarks.utils.count_native_gates"]], "extract_fidelities() (in module iqm.benchmarks.utils)": [[173, "iqm.benchmarks.utils.extract_fidelities"]], "generate_state_tomography_circuits() (in module iqm.benchmarks.utils)": [[174, "iqm.benchmarks.utils.generate_state_tomography_circuits"]], "get_pauli_expectation() (in module iqm.benchmarks.utils)": [[175, "iqm.benchmarks.utils.get_Pauli_expectation"]], "get_active_qubits() (in module iqm.benchmarks.utils)": [[176, "iqm.benchmarks.utils.get_active_qubits"]], "get_iqm_backend() (in module iqm.benchmarks.utils)": [[177, "iqm.benchmarks.utils.get_iqm_backend"]], "get_measurement_mapping() (in module iqm.benchmarks.utils)": [[178, "iqm.benchmarks.utils.get_measurement_mapping"]], "get_neighbors_of_edges() (in module iqm.benchmarks.utils)": [[179, "iqm.benchmarks.utils.get_neighbors_of_edges"]], "get_tomography_matrix() (in module iqm.benchmarks.utils)": [[180, "iqm.benchmarks.utils.get_tomography_matrix"]], "marginal_distribution() (in module iqm.benchmarks.utils)": [[181, "iqm.benchmarks.utils.marginal_distribution"]], "median_with_uncertainty() (in module iqm.benchmarks.utils)": [[182, "iqm.benchmarks.utils.median_with_uncertainty"]], "perform_backend_transpilation() (in module iqm.benchmarks.utils)": [[183, "iqm.benchmarks.utils.perform_backend_transpilation"]], "random_hamiltonian_path() (in module iqm.benchmarks.utils)": [[184, "iqm.benchmarks.utils.random_hamiltonian_path"]], "reduce_to_active_qubits() (in module iqm.benchmarks.utils)": [[185, "iqm.benchmarks.utils.reduce_to_active_qubits"]], "remove_directed_duplicates_to_list() (in module iqm.benchmarks.utils)": [[186, "iqm.benchmarks.utils.remove_directed_duplicates_to_list"]], "retrieve_all_counts() (in module iqm.benchmarks.utils)": [[187, "iqm.benchmarks.utils.retrieve_all_counts"]], "retrieve_all_job_metadata() (in module iqm.benchmarks.utils)": [[188, "iqm.benchmarks.utils.retrieve_all_job_metadata"]], "set_coupling_map() (in module iqm.benchmarks.utils)": [[189, "iqm.benchmarks.utils.set_coupling_map"]], "sort_batches_by_final_layout() (in module iqm.benchmarks.utils)": [[190, "iqm.benchmarks.utils.sort_batches_by_final_layout"]], "split_into_disjoint_pairs() (in module iqm.benchmarks.utils)": [[191, "iqm.benchmarks.utils.split_into_disjoint_pairs"]], "split_sequence_in_chunks() (in module iqm.benchmarks.utils)": [[192, "iqm.benchmarks.utils.split_sequence_in_chunks"]], "submit_execute() (in module iqm.benchmarks.utils)": [[193, "iqm.benchmarks.utils.submit_execute"]], "timeit() (in module iqm.benchmarks.utils)": [[194, "iqm.benchmarks.utils.timeit"]], "xrvariable_to_counts() (in module iqm.benchmarks.utils)": [[195, "iqm.benchmarks.utils.xrvariable_to_counts"]], "iqm.benchmarks.utils_plots": [[196, "module-iqm.benchmarks.utils_plots"]], "graphpositions (class in iqm.benchmarks.utils_plots)": [[197, "iqm.benchmarks.utils_plots.GraphPositions"]], "create_positions() (iqm.benchmarks.utils_plots.graphpositions static method)": [[197, "iqm.benchmarks.utils_plots.GraphPositions.create_positions"]], "deneb_positions (iqm.benchmarks.utils_plots.graphpositions attribute)": [[197, "iqm.benchmarks.utils_plots.GraphPositions.deneb_positions"]], "garnet_positions (iqm.benchmarks.utils_plots.graphpositions attribute)": [[197, "iqm.benchmarks.utils_plots.GraphPositions.garnet_positions"]], "get_positions() (iqm.benchmarks.utils_plots.graphpositions static method)": [[197, "iqm.benchmarks.utils_plots.GraphPositions.get_positions"]], "predefined_stations (iqm.benchmarks.utils_plots.graphpositions attribute)": [[197, "iqm.benchmarks.utils_plots.GraphPositions.predefined_stations"]], "calculate_node_radii() (in module iqm.benchmarks.utils_plots)": [[198, "iqm.benchmarks.utils_plots.calculate_node_radii"]], "draw_graph_edges() (in module iqm.benchmarks.utils_plots)": [[199, "iqm.benchmarks.utils_plots.draw_graph_edges"]], "evaluate_hamiltonian_paths() (in module iqm.benchmarks.utils_plots)": [[200, "iqm.benchmarks.utils_plots.evaluate_hamiltonian_paths"]], "plot_layout_fidelity_graph() (in module iqm.benchmarks.utils_plots)": [[201, "iqm.benchmarks.utils_plots.plot_layout_fidelity_graph"]], "rx_to_nx_graph() (in module iqm.benchmarks.utils_plots)": [[202, "iqm.benchmarks.utils_plots.rx_to_nx_graph"]], "iqm.benchmarks.utils_shadows": [[203, "module-iqm.benchmarks.utils_shadows"]], "cue() (in module iqm.benchmarks.utils_shadows)": [[204, "iqm.benchmarks.utils_shadows.CUE"]], "get_local_shadow() (in module iqm.benchmarks.utils_shadows)": [[205, "iqm.benchmarks.utils_shadows.get_local_shadow"]], "get_negativity() (in module iqm.benchmarks.utils_shadows)": [[206, "iqm.benchmarks.utils_shadows.get_negativity"]], "local_shadow_tomography() (in module iqm.benchmarks.utils_shadows)": [[207, "iqm.benchmarks.utils_shadows.local_shadow_tomography"]]}})